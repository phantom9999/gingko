// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bbts/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Host_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BaseRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchCtrlRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchCtrlRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchListRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchListRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Host_descriptor_ = file->message_type(0);
  static const int Host_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, port_),
  };
  Host_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Host_descriptor_,
      Host::default_instance_,
      Host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Host));
  TaskOptions_descriptor_ = file->message_type(1);
  static const int TaskOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, max_conections_),
  };
  TaskOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskOptions_descriptor_,
      TaskOptions::default_instance_,
      TaskOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskOptions));
  AgentOptions_descriptor_ = file->message_type(2);
  static const int AgentOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, bind_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, max_conections_),
  };
  AgentOptions_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentOptions_descriptor_,
      AgentOptions::default_instance_,
      AgentOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentOptions));
  TaskStatus_descriptor_ = file->message_type(3);
  static const int TaskStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, total_download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, total_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, download_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, upload_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, num_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, num_seeds_),
  };
  TaskStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::default_instance_,
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskStatus));
  TaskStatus_status_t_descriptor_ = TaskStatus_descriptor_->enum_type(0);
  Task_descriptor_ = file->message_type(4);
  static const int Task_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, infohash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, torrent_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, save_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, trackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, seeding_time_),
  };
  Task_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Task_descriptor_,
      Task::default_instance_,
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Task));
  AddTask_descriptor_ = file->message_type(5);
  static const int AddTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, options_),
  };
  AddTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddTask_descriptor_,
      AddTask::default_instance_,
      AddTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddTask));
  BatchCtrl_descriptor_ = file->message_type(6);
  static const int BatchCtrl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, ctrl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, ctrl_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, taskids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, infohashs_),
  };
  BatchCtrl_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchCtrl_descriptor_,
      BatchCtrl::default_instance_,
      BatchCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchCtrl));
  BatchCtrl_ctrl_t_descriptor_ = BatchCtrl_descriptor_->enum_type(0);
  BaseRes_descriptor_ = file->message_type(7);
  static const int BaseRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, fail_msg_),
  };
  BaseRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseRes_descriptor_,
      BaseRes::default_instance_,
      BaseRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseRes));
  TaskRes_descriptor_ = file->message_type(8);
  static const int TaskRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, res_),
  };
  TaskRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskRes_descriptor_,
      TaskRes::default_instance_,
      TaskRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskRes));
  BatchCtrlRes_descriptor_ = file->message_type(9);
  static const int BatchCtrlRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, tasks_),
  };
  BatchCtrlRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchCtrlRes_descriptor_,
      BatchCtrlRes::default_instance_,
      BatchCtrlRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchCtrlRes));
  BatchListRes_descriptor_ = file->message_type(10);
  static const int BatchListRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, status_),
  };
  BatchListRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatchListRes_descriptor_,
      BatchListRes::default_instance_,
      BatchListRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatchListRes));
  Metadata_descriptor_ = file->message_type(11);
  static const int Metadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, infohash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, data_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  TaskType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Host_descriptor_, &Host::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskOptions_descriptor_, &TaskOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentOptions_descriptor_, &AgentOptions::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskStatus_descriptor_, &TaskStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Task_descriptor_, &Task::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddTask_descriptor_, &AddTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchCtrl_descriptor_, &BatchCtrl::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseRes_descriptor_, &BaseRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskRes_descriptor_, &TaskRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchCtrlRes_descriptor_, &BatchCtrlRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatchListRes_descriptor_, &BatchListRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  delete Host::default_instance_;
  delete Host_reflection_;
  delete TaskOptions::default_instance_;
  delete TaskOptions_reflection_;
  delete AgentOptions::default_instance_;
  delete AgentOptions_reflection_;
  delete TaskStatus::default_instance_;
  delete TaskStatus_reflection_;
  delete Task::default_instance_;
  delete Task_reflection_;
  delete AddTask::default_instance_;
  delete AddTask_reflection_;
  delete BatchCtrl::default_instance_;
  delete BatchCtrl_reflection_;
  delete BaseRes::default_instance_;
  delete BaseRes_reflection_;
  delete TaskRes::default_instance_;
  delete TaskRes_reflection_;
  delete BatchCtrlRes::default_instance_;
  delete BatchCtrlRes_reflection_;
  delete BatchListRes::default_instance_;
  delete BatchListRes_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
}

void protobuf_AddDesc_message_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\014bbts.message\" \n\004Host\022\n\n"
    "\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"c\n\013TaskOptions\022\016"
    "\n\006taskid\030\001 \001(\003\022\024\n\014upload_limit\030\002 \001(\005\022\026\n\016"
    "download_limit\030\003 \001(\005\022\026\n\016max_conections\030\004"
    " \001(\005\"O\n\014AgentOptions\022\021\n\tbind_port\030\001 \001(\005\022"
    "\024\n\014upload_limit\030\002 \001(\005\022\026\n\016max_conections\030"
    "\004 \001(\005\"\221\003\n\nTaskStatus\022 \n\004task\030\001 \001(\0132\022.bbt"
    "s.message.Task\0221\n\006status\030\002 \001(\0162!.bbts.me"
    "ssage.TaskStatus.status_t\022\020\n\010progress\030\003 "
    "\001(\005\022\r\n\005error\030\004 \001(\t\022\026\n\016total_download\030\005 \001"
    "(\003\022\024\n\014total_upload\030\006 \001(\003\022\025\n\rdownload_rat"
    "e\030\007 \001(\005\022\023\n\013upload_rate\030\010 \001(\005\022\021\n\tnum_peer"
    "s\030\t \001(\005\022\021\n\tnum_seeds\030\n \001(\005\"\214\001\n\010status_t\022"
    "\n\n\006UNKNOW\020\000\022\t\n\005ERROR\020\001\022\n\n\006CHECKQ\020\002\022\014\n\010CH"
    "ECKING\020\003\022\014\n\010DTORRENT\020\004\022\014\n\010DOWNLOAD\020\005\022\n\n\006"
    "PAUSED\020\006\022\013\n\007SEEDING\020\007\022\014\n\010FINISHED\020\010\022\014\n\010C"
    "ANCELED\020\t\"\372\001\n\004Task\022\016\n\006taskid\030\001 \001(\003\022$\n\004ty"
    "pe\030\002 \001(\0162\026.bbts.message.TaskType\022\020\n\010info"
    "hash\030\003 \001(\t\022\024\n\014torrent_path\030\004 \001(\t\022\014\n\004data"
    "\030\005 \001(\014\022\021\n\tsave_path\030\006 \001(\t\022\020\n\010new_name\030\007 "
    "\001(\t\022$\n\010trackers\030\010 \003(\0132\022.bbts.message.Hos"
    "t\022\013\n\003cmd\030\024 \001(\t\022\013\n\003uid\030\025 \001(\005\022\013\n\003gid\030\026 \001(\005"
    "\022\024\n\014seeding_time\030\031 \001(\005\"W\n\007AddTask\022 \n\004tas"
    "k\030\001 \001(\0132\022.bbts.message.Task\022*\n\007options\030\002"
    " \001(\0132\031.bbts.message.TaskOptions\"\253\001\n\tBatc"
    "hCtrl\0221\n\tctrl_type\030\001 \001(\0162\036.bbts.message."
    "BatchCtrl.ctrl_t\022\020\n\010ctrl_all\030\002 \001(\010\022\017\n\007ta"
    "skids\030\003 \003(\003\022\021\n\tinfohashs\030\004 \003(\t\"5\n\006ctrl_t"
    "\022\n\n\006CANCEL\020\001\022\t\n\005PAUSE\020\002\022\n\n\006RESUME\020\003\022\010\n\004L"
    "IST\020\004\"-\n\007BaseRes\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010fa"
    "il_msg\030\002 \001(\t\"=\n\007TaskRes\022\016\n\006taskid\030\001 \001(\003\022"
    "\"\n\003res\030\002 \001(\0132\025.bbts.message.BaseRes\"4\n\014B"
    "atchCtrlRes\022$\n\005tasks\030\001 \003(\0132\025.bbts.messag"
    "e.TaskRes\"8\n\014BatchListRes\022(\n\006status\030\001 \003("
    "\0132\030.bbts.message.TaskStatus\"*\n\010Metadata\022"
    "\020\n\010infohash\030\001 \001(\t\022\014\n\004data\030\002 \001(\014*.\n\010TaskT"
    "ype\022\020\n\014SEEDING_TASK\020\002\022\020\n\014NOCHECK_TASK\020\003", 1479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  Host::default_instance_ = new Host();
  TaskOptions::default_instance_ = new TaskOptions();
  AgentOptions::default_instance_ = new AgentOptions();
  TaskStatus::default_instance_ = new TaskStatus();
  Task::default_instance_ = new Task();
  AddTask::default_instance_ = new AddTask();
  BatchCtrl::default_instance_ = new BatchCtrl();
  BaseRes::default_instance_ = new BaseRes();
  TaskRes::default_instance_ = new TaskRes();
  BatchCtrlRes::default_instance_ = new BatchCtrlRes();
  BatchListRes::default_instance_ = new BatchListRes();
  Metadata::default_instance_ = new Metadata();
  Host::default_instance_->InitAsDefaultInstance();
  TaskOptions::default_instance_->InitAsDefaultInstance();
  AgentOptions::default_instance_->InitAsDefaultInstance();
  TaskStatus::default_instance_->InitAsDefaultInstance();
  Task::default_instance_->InitAsDefaultInstance();
  AddTask::default_instance_->InitAsDefaultInstance();
  BatchCtrl::default_instance_->InitAsDefaultInstance();
  BaseRes::default_instance_->InitAsDefaultInstance();
  TaskRes::default_instance_->InitAsDefaultInstance();
  BatchCtrlRes::default_instance_->InitAsDefaultInstance();
  BatchListRes::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskType_descriptor_;
}
bool TaskType_IsValid(int value) {
  switch(value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Host::kIpFieldNumber;
const int Host::kPortFieldNumber;
#endif  // !_MSC_VER

Host::Host()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Host::InitAsDefaultInstance() {
}

Host::Host(const Host& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Host::SharedCtor() {
  _cached_size_ = 0;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Host::~Host() {
  SharedDtor();
}

void Host::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Host_descriptor_;
}

const Host& Host::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Host* Host::default_instance_ = NULL;

Host* Host::New() const {
  return new Host;
}

void Host::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ip(), output);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Host::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Host::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }
    
    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Host* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Host*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Host::IsInitialized() const {
  
  return true;
}

void Host::Swap(Host* other) {
  if (other != this) {
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Host_descriptor_;
  metadata.reflection = Host_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskOptions::kTaskidFieldNumber;
const int TaskOptions::kUploadLimitFieldNumber;
const int TaskOptions::kDownloadLimitFieldNumber;
const int TaskOptions::kMaxConectionsFieldNumber;
#endif  // !_MSC_VER

TaskOptions::TaskOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskOptions::InitAsDefaultInstance() {
}

TaskOptions::TaskOptions(const TaskOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskOptions::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_LONGLONG(0);
  upload_limit_ = 0;
  download_limit_ = 0;
  max_conections_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskOptions::~TaskOptions() {
  SharedDtor();
}

void TaskOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TaskOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskOptions_descriptor_;
}

const TaskOptions& TaskOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

TaskOptions* TaskOptions::default_instance_ = NULL;

TaskOptions* TaskOptions::New() const {
  return new TaskOptions;
}

void TaskOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_LONGLONG(0);
    upload_limit_ = 0;
    download_limit_ = 0;
    max_conections_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upload_limit;
        break;
      }
      
      // optional int32 upload_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
          set_has_upload_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_download_limit;
        break;
      }
      
      // optional int32 download_limit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
          set_has_download_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_conections;
        break;
      }
      
      // optional int32 max_conections = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_conections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_conections_)));
          set_has_max_conections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }
  
  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_limit(), output);
  }
  
  // optional int32 download_limit = 3;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->download_limit(), output);
  }
  
  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_conections(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }
  
  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_limit(), target);
  }
  
  // optional int32 download_limit = 3;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->download_limit(), target);
  }
  
  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_conections(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }
    
    // optional int32 upload_limit = 2;
    if (has_upload_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }
    
    // optional int32 download_limit = 3;
    if (has_download_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }
    
    // optional int32 max_conections = 4;
    if (has_max_conections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_conections());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskOptions::MergeFrom(const TaskOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_max_conections()) {
      set_max_conections(from.max_conections());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskOptions::CopyFrom(const TaskOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskOptions::IsInitialized() const {
  
  return true;
}

void TaskOptions::Swap(TaskOptions* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(upload_limit_, other->upload_limit_);
    std::swap(download_limit_, other->download_limit_);
    std::swap(max_conections_, other->max_conections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskOptions_descriptor_;
  metadata.reflection = TaskOptions_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentOptions::kBindPortFieldNumber;
const int AgentOptions::kUploadLimitFieldNumber;
const int AgentOptions::kMaxConectionsFieldNumber;
#endif  // !_MSC_VER

AgentOptions::AgentOptions()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentOptions::InitAsDefaultInstance() {
}

AgentOptions::AgentOptions(const AgentOptions& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentOptions::SharedCtor() {
  _cached_size_ = 0;
  bind_port_ = 0;
  upload_limit_ = 0;
  max_conections_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentOptions::~AgentOptions() {
  SharedDtor();
}

void AgentOptions::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AgentOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOptions_descriptor_;
}

const AgentOptions& AgentOptions::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AgentOptions* AgentOptions::default_instance_ = NULL;

AgentOptions* AgentOptions::New() const {
  return new AgentOptions;
}

void AgentOptions::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bind_port_ = 0;
    upload_limit_ = 0;
    max_conections_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bind_port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_port_)));
          set_has_bind_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upload_limit;
        break;
      }
      
      // optional int32 upload_limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
          set_has_upload_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_max_conections;
        break;
      }
      
      // optional int32 max_conections = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_conections:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_conections_)));
          set_has_max_conections();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 bind_port = 1;
  if (has_bind_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bind_port(), output);
  }
  
  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_limit(), output);
  }
  
  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_conections(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentOptions::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 bind_port = 1;
  if (has_bind_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bind_port(), target);
  }
  
  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_limit(), target);
  }
  
  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_conections(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentOptions::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 bind_port = 1;
    if (has_bind_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_port());
    }
    
    // optional int32 upload_limit = 2;
    if (has_upload_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }
    
    // optional int32 max_conections = 4;
    if (has_max_conections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_conections());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOptions::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentOptions* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentOptions*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentOptions::MergeFrom(const AgentOptions& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bind_port()) {
      set_bind_port(from.bind_port());
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_max_conections()) {
      set_max_conections(from.max_conections());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentOptions::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOptions::CopyFrom(const AgentOptions& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentOptions::IsInitialized() const {
  
  return true;
}

void AgentOptions::Swap(AgentOptions* other) {
  if (other != this) {
    std::swap(bind_port_, other->bind_port_);
    std::swap(upload_limit_, other->upload_limit_);
    std::swap(max_conections_, other->max_conections_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOptions_descriptor_;
  metadata.reflection = AgentOptions_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_status_t_descriptor_;
}
bool TaskStatus_status_t_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TaskStatus_status_t TaskStatus::UNKNOW;
const TaskStatus_status_t TaskStatus::ERROR;
const TaskStatus_status_t TaskStatus::CHECKQ;
const TaskStatus_status_t TaskStatus::CHECKING;
const TaskStatus_status_t TaskStatus::DTORRENT;
const TaskStatus_status_t TaskStatus::DOWNLOAD;
const TaskStatus_status_t TaskStatus::PAUSED;
const TaskStatus_status_t TaskStatus::SEEDING;
const TaskStatus_status_t TaskStatus::FINISHED;
const TaskStatus_status_t TaskStatus::CANCELED;
const TaskStatus_status_t TaskStatus::status_t_MIN;
const TaskStatus_status_t TaskStatus::status_t_MAX;
const int TaskStatus::status_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TaskStatus::kTaskFieldNumber;
const int TaskStatus::kStatusFieldNumber;
const int TaskStatus::kProgressFieldNumber;
const int TaskStatus::kErrorFieldNumber;
const int TaskStatus::kTotalDownloadFieldNumber;
const int TaskStatus::kTotalUploadFieldNumber;
const int TaskStatus::kDownloadRateFieldNumber;
const int TaskStatus::kUploadRateFieldNumber;
const int TaskStatus::kNumPeersFieldNumber;
const int TaskStatus::kNumSeedsFieldNumber;
#endif  // !_MSC_VER

TaskStatus::TaskStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskStatus::InitAsDefaultInstance() {
  task_ = const_cast< ::bbts::message::Task*>(&::bbts::message::Task::default_instance());
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  status_ = 0;
  progress_ = 0;
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  total_download_ = GOOGLE_LONGLONG(0);
  total_upload_ = GOOGLE_LONGLONG(0);
  download_rate_ = 0;
  upload_rate_ = 0;
  num_peers_ = 0;
  num_seeds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskStatus::~TaskStatus() {
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
    delete task_;
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

TaskStatus* TaskStatus::default_instance_ = NULL;

TaskStatus* TaskStatus::New() const {
  return new TaskStatus;
}

void TaskStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::bbts::message::Task::Clear();
    }
    status_ = 0;
    progress_ = 0;
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
    total_download_ = GOOGLE_LONGLONG(0);
    total_upload_ = GOOGLE_LONGLONG(0);
    download_rate_ = 0;
    upload_rate_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    num_peers_ = 0;
    num_seeds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.Task task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }
      
      // optional .bbts.message.TaskStatus.status_t status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bbts::message::TaskStatus_status_t_IsValid(value)) {
            set_status(static_cast< ::bbts::message::TaskStatus_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }
      
      // optional int32 progress = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_progress:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
          set_has_progress();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }
      
      // optional string error = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_total_download;
        break;
      }
      
      // optional int64 total_download = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_download:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_download_)));
          set_has_total_download();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total_upload;
        break;
      }
      
      // optional int64 total_upload = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total_upload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_upload_)));
          set_has_total_upload();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_download_rate;
        break;
      }
      
      // optional int32 download_rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_rate_)));
          set_has_download_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_upload_rate;
        break;
      }
      
      // optional int32 upload_rate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_rate_)));
          set_has_upload_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_num_peers;
        break;
      }
      
      // optional int32 num_peers = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_peers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_peers_)));
          set_has_num_peers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num_seeds;
        break;
      }
      
      // optional int32 num_seeds = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_seeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_seeds_)));
          set_has_num_seeds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }
  
  // optional .bbts.message.TaskStatus.status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }
  
  // optional int32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }
  
  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->error(), output);
  }
  
  // optional int64 total_download = 5;
  if (has_total_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_download(), output);
  }
  
  // optional int64 total_upload = 6;
  if (has_total_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_upload(), output);
  }
  
  // optional int32 download_rate = 7;
  if (has_download_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->download_rate(), output);
  }
  
  // optional int32 upload_rate = 8;
  if (has_upload_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->upload_rate(), output);
  }
  
  // optional int32 num_peers = 9;
  if (has_num_peers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_peers(), output);
  }
  
  // optional int32 num_seeds = 10;
  if (has_num_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_seeds(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  // optional .bbts.message.TaskStatus.status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }
  
  // optional int32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }
  
  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }
  
  // optional int64 total_download = 5;
  if (has_total_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_download(), target);
  }
  
  // optional int64 total_upload = 6;
  if (has_total_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_upload(), target);
  }
  
  // optional int32 download_rate = 7;
  if (has_download_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->download_rate(), target);
  }
  
  // optional int32 upload_rate = 8;
  if (has_upload_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->upload_rate(), target);
  }
  
  // optional int32 num_peers = 9;
  if (has_num_peers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_peers(), target);
  }
  
  // optional int32 num_seeds = 10;
  if (has_num_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_seeds(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskStatus::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bbts.message.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
    // optional .bbts.message.TaskStatus.status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }
    
    // optional int32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }
    
    // optional string error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
    // optional int64 total_download = 5;
    if (has_total_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_download());
    }
    
    // optional int64 total_upload = 6;
    if (has_total_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_upload());
    }
    
    // optional int32 download_rate = 7;
    if (has_download_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_rate());
    }
    
    // optional int32 upload_rate = 8;
    if (has_upload_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_rate());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 num_peers = 9;
    if (has_num_peers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_peers());
    }
    
    // optional int32 num_seeds = 10;
    if (has_num_seeds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_seeds());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::bbts::message::Task::MergeFrom(from.task());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_total_download()) {
      set_total_download(from.total_download());
    }
    if (from.has_total_upload()) {
      set_total_upload(from.total_upload());
    }
    if (from.has_download_rate()) {
      set_download_rate(from.download_rate());
    }
    if (from.has_upload_rate()) {
      set_upload_rate(from.upload_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_peers()) {
      set_num_peers(from.num_peers());
    }
    if (from.has_num_seeds()) {
      set_num_seeds(from.num_seeds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskStatus::IsInitialized() const {
  
  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(status_, other->status_);
    std::swap(progress_, other->progress_);
    std::swap(error_, other->error_);
    std::swap(total_download_, other->total_download_);
    std::swap(total_upload_, other->total_upload_);
    std::swap(download_rate_, other->download_rate_);
    std::swap(upload_rate_, other->upload_rate_);
    std::swap(num_peers_, other->num_peers_);
    std::swap(num_seeds_, other->num_seeds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Task::kTaskidFieldNumber;
const int Task::kTypeFieldNumber;
const int Task::kInfohashFieldNumber;
const int Task::kTorrentPathFieldNumber;
const int Task::kDataFieldNumber;
const int Task::kSavePathFieldNumber;
const int Task::kNewNameFieldNumber;
const int Task::kTrackersFieldNumber;
const int Task::kCmdFieldNumber;
const int Task::kUidFieldNumber;
const int Task::kGidFieldNumber;
const int Task::kSeedingTimeFieldNumber;
#endif  // !_MSC_VER

Task::Task()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_LONGLONG(0);
  type_ = 2;
  infohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  torrent_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  save_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  uid_ = 0;
  gid_ = 0;
  seeding_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Task::~Task() {
  SharedDtor();
}

void Task::SharedDtor() {
  if (infohash_ != &::google::protobuf::internal::kEmptyString) {
    delete infohash_;
  }
  if (torrent_path_ != &::google::protobuf::internal::kEmptyString) {
    delete torrent_path_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (save_path_ != &::google::protobuf::internal::kEmptyString) {
    delete save_path_;
  }
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    delete new_name_;
  }
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (this != default_instance_) {
  }
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Task* Task::default_instance_ = NULL;

Task* Task::New() const {
  return new Task;
}

void Task::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_LONGLONG(0);
    type_ = 2;
    if (has_infohash()) {
      if (infohash_ != &::google::protobuf::internal::kEmptyString) {
        infohash_->clear();
      }
    }
    if (has_torrent_path()) {
      if (torrent_path_ != &::google::protobuf::internal::kEmptyString) {
        torrent_path_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
    if (has_save_path()) {
      if (save_path_ != &::google::protobuf::internal::kEmptyString) {
        save_path_->clear();
      }
    }
    if (has_new_name()) {
      if (new_name_ != &::google::protobuf::internal::kEmptyString) {
        new_name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    uid_ = 0;
    gid_ = 0;
    seeding_time_ = 0;
  }
  trackers_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }
      
      // optional .bbts.message.TaskType type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (bbts::message::TaskType_IsValid(value)) {
            set_type(static_cast< bbts::message::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infohash;
        break;
      }
      
      // optional string infohash = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infohash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infohash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infohash().data(), this->infohash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_torrent_path;
        break;
      }
      
      // optional string torrent_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_torrent_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torrent_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->torrent_path().data(), this->torrent_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }
      
      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_save_path;
        break;
      }
      
      // optional string save_path = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_save_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->save_path().data(), this->save_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_new_name;
        break;
      }
      
      // optional string new_name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_trackers;
        break;
      }
      
      // repeated .bbts.message.Host trackers = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_trackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trackers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_trackers;
        if (input->ExpectTag(162)) goto parse_cmd;
        break;
      }
      
      // optional string cmd = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_uid;
        break;
      }
      
      // optional int32 uid = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_gid;
        break;
      }
      
      // optional int32 gid = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
          set_has_gid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_seeding_time;
        break;
      }
      
      // optional int32 seeding_time = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seeding_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_time_)));
          set_has_seeding_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }
  
  // optional .bbts.message.TaskType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }
  
  // optional string infohash = 3;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->infohash(), output);
  }
  
  // optional string torrent_path = 4;
  if (has_torrent_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torrent_path().data(), this->torrent_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->torrent_path(), output);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }
  
  // optional string save_path = 6;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->save_path(), output);
  }
  
  // optional string new_name = 7;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->new_name(), output);
  }
  
  // repeated .bbts.message.Host trackers = 8;
  for (int i = 0; i < this->trackers_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->trackers(i), output);
  }
  
  // optional string cmd = 20;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->cmd(), output);
  }
  
  // optional int32 uid = 21;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->uid(), output);
  }
  
  // optional int32 gid = 22;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gid(), output);
  }
  
  // optional int32 seeding_time = 25;
  if (has_seeding_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->seeding_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Task::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }
  
  // optional .bbts.message.TaskType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }
  
  // optional string infohash = 3;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->infohash(), target);
  }
  
  // optional string torrent_path = 4;
  if (has_torrent_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->torrent_path().data(), this->torrent_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->torrent_path(), target);
  }
  
  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }
  
  // optional string save_path = 6;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->save_path(), target);
  }
  
  // optional string new_name = 7;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->new_name(), target);
  }
  
  // repeated .bbts.message.Host trackers = 8;
  for (int i = 0; i < this->trackers_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->trackers(i), target);
  }
  
  // optional string cmd = 20;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->cmd(), target);
  }
  
  // optional int32 uid = 21;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->uid(), target);
  }
  
  // optional int32 gid = 22;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gid(), target);
  }
  
  // optional int32 seeding_time = 25;
  if (has_seeding_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->seeding_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Task::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }
    
    // optional .bbts.message.TaskType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }
    
    // optional string infohash = 3;
    if (has_infohash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infohash());
    }
    
    // optional string torrent_path = 4;
    if (has_torrent_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->torrent_path());
    }
    
    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
    // optional string save_path = 6;
    if (has_save_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_path());
    }
    
    // optional string new_name = 7;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string cmd = 20;
    if (has_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }
    
    // optional int32 uid = 21;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }
    
    // optional int32 gid = 22;
    if (has_gid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }
    
    // optional int32 seeding_time = 25;
    if (has_seeding_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_time());
    }
    
  }
  // repeated .bbts.message.Host trackers = 8;
  total_size += 1 * this->trackers_size();
  for (int i = 0; i < this->trackers_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trackers(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Task* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Task*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
  GOOGLE_CHECK_NE(&from, this);
  trackers_.MergeFrom(from.trackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_infohash()) {
      set_infohash(from.infohash());
    }
    if (from.has_torrent_path()) {
      set_torrent_path(from.torrent_path());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
    if (from.has_save_path()) {
      set_save_path(from.save_path());
    }
    if (from.has_new_name()) {
      set_new_name(from.new_name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_seeding_time()) {
      set_seeding_time(from.seeding_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Task::IsInitialized() const {
  
  return true;
}

void Task::Swap(Task* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(type_, other->type_);
    std::swap(infohash_, other->infohash_);
    std::swap(torrent_path_, other->torrent_path_);
    std::swap(data_, other->data_);
    std::swap(save_path_, other->save_path_);
    std::swap(new_name_, other->new_name_);
    trackers_.Swap(&other->trackers_);
    std::swap(cmd_, other->cmd_);
    std::swap(uid_, other->uid_);
    std::swap(gid_, other->gid_);
    std::swap(seeding_time_, other->seeding_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddTask::kTaskFieldNumber;
const int AddTask::kOptionsFieldNumber;
#endif  // !_MSC_VER

AddTask::AddTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddTask::InitAsDefaultInstance() {
  task_ = const_cast< ::bbts::message::Task*>(&::bbts::message::Task::default_instance());
  options_ = const_cast< ::bbts::message::TaskOptions*>(&::bbts::message::TaskOptions::default_instance());
}

AddTask::AddTask(const AddTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddTask::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  options_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddTask::~AddTask() {
  SharedDtor();
}

void AddTask::SharedDtor() {
  if (this != default_instance_) {
    delete task_;
    delete options_;
  }
}

void AddTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTask_descriptor_;
}

const AddTask& AddTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

AddTask* AddTask::default_instance_ = NULL;

AddTask* AddTask::New() const {
  return new AddTask;
}

void AddTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_task()) {
      if (task_ != NULL) task_->::bbts::message::Task::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bbts::message::TaskOptions::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.Task task = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }
      
      // optional .bbts.message.TaskOptions options = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->task(), output);
  }
  
  // optional .bbts.message.TaskOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->options(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->task(), target);
  }
  
  // optional .bbts.message.TaskOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->options(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddTask::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bbts.message.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->task());
    }
    
    // optional .bbts.message.TaskOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->options());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddTask::MergeFrom(const AddTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::bbts::message::Task::MergeFrom(from.task());
    }
    if (from.has_options()) {
      mutable_options()->::bbts::message::TaskOptions::MergeFrom(from.options());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTask::CopyFrom(const AddTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTask::IsInitialized() const {
  
  return true;
}

void AddTask::Swap(AddTask* other) {
  if (other != this) {
    std::swap(task_, other->task_);
    std::swap(options_, other->options_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTask_descriptor_;
  metadata.reflection = AddTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrl_ctrl_t_descriptor_;
}
bool BatchCtrl_ctrl_t_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const BatchCtrl_ctrl_t BatchCtrl::CANCEL;
const BatchCtrl_ctrl_t BatchCtrl::PAUSE;
const BatchCtrl_ctrl_t BatchCtrl::RESUME;
const BatchCtrl_ctrl_t BatchCtrl::LIST;
const BatchCtrl_ctrl_t BatchCtrl::ctrl_t_MIN;
const BatchCtrl_ctrl_t BatchCtrl::ctrl_t_MAX;
const int BatchCtrl::ctrl_t_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int BatchCtrl::kCtrlTypeFieldNumber;
const int BatchCtrl::kCtrlAllFieldNumber;
const int BatchCtrl::kTaskidsFieldNumber;
const int BatchCtrl::kInfohashsFieldNumber;
#endif  // !_MSC_VER

BatchCtrl::BatchCtrl()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchCtrl::InitAsDefaultInstance() {
}

BatchCtrl::BatchCtrl(const BatchCtrl& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchCtrl::SharedCtor() {
  _cached_size_ = 0;
  ctrl_type_ = 1;
  ctrl_all_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchCtrl::~BatchCtrl() {
  SharedDtor();
}

void BatchCtrl::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrl_descriptor_;
}

const BatchCtrl& BatchCtrl::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BatchCtrl* BatchCtrl::default_instance_ = NULL;

BatchCtrl* BatchCtrl::New() const {
  return new BatchCtrl;
}

void BatchCtrl::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ctrl_type_ = 1;
    ctrl_all_ = false;
  }
  taskids_.Clear();
  infohashs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bbts::message::BatchCtrl_ctrl_t_IsValid(value)) {
            set_ctrl_type(static_cast< ::bbts::message::BatchCtrl_ctrl_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ctrl_all;
        break;
      }
      
      // optional bool ctrl_all = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ctrl_all:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_all_)));
          set_has_ctrl_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskids;
        break;
      }
      
      // repeated int64 taskids = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_taskids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_taskids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_taskids;
        if (input->ExpectTag(34)) goto parse_infohashs;
        break;
      }
      
      // repeated string infohashs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infohashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_infohashs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infohashs(0).data(), this->infohashs(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_infohashs;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  if (has_ctrl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctrl_type(), output);
  }
  
  // optional bool ctrl_all = 2;
  if (has_ctrl_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ctrl_all(), output);
  }
  
  // repeated int64 taskids = 3;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->taskids(i), output);
  }
  
  // repeated string infohashs = 4;
  for (int i = 0; i < this->infohashs_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->infohashs(i).data(), this->infohashs(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->infohashs(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchCtrl::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  if (has_ctrl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctrl_type(), target);
  }
  
  // optional bool ctrl_all = 2;
  if (has_ctrl_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ctrl_all(), target);
  }
  
  // repeated int64 taskids = 3;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->taskids(i), target);
  }
  
  // repeated string infohashs = 4;
  for (int i = 0; i < this->infohashs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infohashs(i).data(), this->infohashs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->infohashs(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchCtrl::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
    if (has_ctrl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_type());
    }
    
    // optional bool ctrl_all = 2;
    if (has_ctrl_all()) {
      total_size += 1 + 1;
    }
    
  }
  // repeated int64 taskids = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->taskids(i));
    }
    total_size += 1 * this->taskids_size() + data_size;
  }
  
  // repeated string infohashs = 4;
  total_size += 1 * this->infohashs_size();
  for (int i = 0; i < this->infohashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->infohashs(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCtrl::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchCtrl* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchCtrl*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchCtrl::MergeFrom(const BatchCtrl& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskids_.MergeFrom(from.taskids_);
  infohashs_.MergeFrom(from.infohashs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrl_type()) {
      set_ctrl_type(from.ctrl_type());
    }
    if (from.has_ctrl_all()) {
      set_ctrl_all(from.ctrl_all());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchCtrl::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCtrl::CopyFrom(const BatchCtrl& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCtrl::IsInitialized() const {
  
  return true;
}

void BatchCtrl::Swap(BatchCtrl* other) {
  if (other != this) {
    std::swap(ctrl_type_, other->ctrl_type_);
    std::swap(ctrl_all_, other->ctrl_all_);
    taskids_.Swap(&other->taskids_);
    infohashs_.Swap(&other->infohashs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchCtrl_descriptor_;
  metadata.reflection = BatchCtrl_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseRes::kRetCodeFieldNumber;
const int BaseRes::kFailMsgFieldNumber;
#endif  // !_MSC_VER

BaseRes::BaseRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseRes::InitAsDefaultInstance() {
}

BaseRes::BaseRes(const BaseRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseRes::SharedCtor() {
  _cached_size_ = 0;
  ret_code_ = 0;
  fail_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseRes::~BaseRes() {
  SharedDtor();
}

void BaseRes::SharedDtor() {
  if (fail_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete fail_msg_;
  }
  if (this != default_instance_) {
  }
}

void BaseRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseRes_descriptor_;
}

const BaseRes& BaseRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BaseRes* BaseRes::default_instance_ = NULL;

BaseRes* BaseRes::New() const {
  return new BaseRes;
}

void BaseRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_code_ = 0;
    if (has_fail_msg()) {
      if (fail_msg_ != &::google::protobuf::internal::kEmptyString) {
        fail_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
          set_has_ret_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_fail_msg;
        break;
      }
      
      // optional string fail_msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fail_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fail_msg().data(), this->fail_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }
  
  // optional string fail_msg = 2;
  if (has_fail_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fail_msg().data(), this->fail_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->fail_msg(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }
  
  // optional string fail_msg = 2;
  if (has_fail_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fail_msg().data(), this->fail_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fail_msg(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseRes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }
    
    // optional string fail_msg = 2;
    if (has_fail_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_msg());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseRes::MergeFrom(const BaseRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_fail_msg()) {
      set_fail_msg(from.fail_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRes::CopyFrom(const BaseRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseRes::IsInitialized() const {
  
  return true;
}

void BaseRes::Swap(BaseRes* other) {
  if (other != this) {
    std::swap(ret_code_, other->ret_code_);
    std::swap(fail_msg_, other->fail_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseRes_descriptor_;
  metadata.reflection = BaseRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskRes::kTaskidFieldNumber;
const int TaskRes::kResFieldNumber;
#endif  // !_MSC_VER

TaskRes::TaskRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskRes::InitAsDefaultInstance() {
  res_ = const_cast< ::bbts::message::BaseRes*>(&::bbts::message::BaseRes::default_instance());
}

TaskRes::TaskRes(const TaskRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskRes::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = GOOGLE_LONGLONG(0);
  res_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskRes::~TaskRes() {
  SharedDtor();
}

void TaskRes::SharedDtor() {
  if (this != default_instance_) {
    delete res_;
  }
}

void TaskRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRes_descriptor_;
}

const TaskRes& TaskRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

TaskRes* TaskRes::default_instance_ = NULL;

TaskRes* TaskRes::New() const {
  return new TaskRes;
}

void TaskRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = GOOGLE_LONGLONG(0);
    if (has_res()) {
      if (res_ != NULL) res_->::bbts::message::BaseRes::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }
      
      // optional .bbts.message.BaseRes res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }
  
  // optional .bbts.message.BaseRes res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->res(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }
  
  // optional .bbts.message.BaseRes res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->res(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskRes::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }
    
    // optional .bbts.message.BaseRes res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->res());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskRes::MergeFrom(const TaskRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_res()) {
      mutable_res()->::bbts::message::BaseRes::MergeFrom(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRes::CopyFrom(const TaskRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskRes::IsInitialized() const {
  
  return true;
}

void TaskRes::Swap(TaskRes* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskRes_descriptor_;
  metadata.reflection = TaskRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchCtrlRes::kTasksFieldNumber;
#endif  // !_MSC_VER

BatchCtrlRes::BatchCtrlRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchCtrlRes::InitAsDefaultInstance() {
}

BatchCtrlRes::BatchCtrlRes(const BatchCtrlRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchCtrlRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchCtrlRes::~BatchCtrlRes() {
  SharedDtor();
}

void BatchCtrlRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchCtrlRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCtrlRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrlRes_descriptor_;
}

const BatchCtrlRes& BatchCtrlRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BatchCtrlRes* BatchCtrlRes::default_instance_ = NULL;

BatchCtrlRes* BatchCtrlRes::New() const {
  return new BatchCtrlRes;
}

void BatchCtrlRes::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchCtrlRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bbts.message.TaskRes tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchCtrlRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bbts.message.TaskRes tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchCtrlRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bbts.message.TaskRes tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchCtrlRes::ByteSize() const {
  int total_size = 0;
  
  // repeated .bbts.message.TaskRes tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCtrlRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchCtrlRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchCtrlRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchCtrlRes::MergeFrom(const BatchCtrlRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchCtrlRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCtrlRes::CopyFrom(const BatchCtrlRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchCtrlRes::IsInitialized() const {
  
  return true;
}

void BatchCtrlRes::Swap(BatchCtrlRes* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchCtrlRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchCtrlRes_descriptor_;
  metadata.reflection = BatchCtrlRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatchListRes::kStatusFieldNumber;
#endif  // !_MSC_VER

BatchListRes::BatchListRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatchListRes::InitAsDefaultInstance() {
}

BatchListRes::BatchListRes(const BatchListRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatchListRes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatchListRes::~BatchListRes() {
  SharedDtor();
}

void BatchListRes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BatchListRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchListRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchListRes_descriptor_;
}

const BatchListRes& BatchListRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

BatchListRes* BatchListRes::default_instance_ = NULL;

BatchListRes* BatchListRes::New() const {
  return new BatchListRes;
}

void BatchListRes::Clear() {
  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatchListRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bbts.message.TaskStatus status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_status()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_status;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatchListRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bbts.message.TaskStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatchListRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bbts.message.TaskStatus status = 1;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->status(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatchListRes::ByteSize() const {
  int total_size = 0;
  
  // repeated .bbts.message.TaskStatus status = 1;
  total_size += 1 * this->status_size();
  for (int i = 0; i < this->status_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->status(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchListRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatchListRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatchListRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatchListRes::MergeFrom(const BatchListRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatchListRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchListRes::CopyFrom(const BatchListRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatchListRes::IsInitialized() const {
  
  return true;
}

void BatchListRes::Swap(BatchListRes* other) {
  if (other != this) {
    status_.Swap(&other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatchListRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchListRes_descriptor_;
  metadata.reflection = BatchListRes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Metadata::kInfohashFieldNumber;
const int Metadata::kDataFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  infohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (infohash_ != &::google::protobuf::internal::kEmptyString) {
    delete infohash_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_message_2eproto();  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_infohash()) {
      if (infohash_ != &::google::protobuf::internal::kEmptyString) {
        infohash_->clear();
      }
    }
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string infohash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infohash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->infohash().data(), this->infohash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }
      
      // optional bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string infohash = 1;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->infohash(), output);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string infohash = 1;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->infohash(), target);
  }
  
  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string infohash = 1;
    if (has_infohash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infohash());
    }
    
    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infohash()) {
      set_infohash(from.infohash());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  
  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(infohash_, other->infohash_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
