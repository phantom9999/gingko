// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bbts/TrackerConf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Tracker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Tracker_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TrackerConf_2eproto() {
  protobuf_AddDesc_TrackerConf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TrackerConf.proto");
  GOOGLE_CHECK(file != NULL);
  Tracker_descriptor_ = file->message_type(0);
  static const int Tracker_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker, port_),
  };
  Tracker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Tracker_descriptor_,
      Tracker::default_instance_,
      Tracker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Tracker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Tracker));
  TrackerArea_descriptor_ = file->message_type(1);
  static const int TrackerArea_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerArea, machine_room_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerArea, tracker_),
  };
  TrackerArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerArea_descriptor_,
      TrackerArea::default_instance_,
      TrackerArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerArea));
  TrackerConf_descriptor_ = file->message_type(2);
  static const int TrackerConf_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, area_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, default__),
  };
  TrackerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerConf_descriptor_,
      TrackerConf::default_instance_,
      TrackerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TrackerConf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Tracker_descriptor_, &Tracker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerArea_descriptor_, &TrackerArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerConf_descriptor_, &TrackerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TrackerConf_2eproto() {
  delete Tracker::default_instance_;
  delete Tracker_reflection_;
  delete TrackerArea::default_instance_;
  delete TrackerArea_reflection_;
  delete TrackerConf::default_instance_;
  delete TrackerConf_reflection_;
}

void protobuf_AddDesc_TrackerConf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021TrackerConf.proto\022\014bbts.message\"%\n\007Tra"
    "cker\022\014\n\004host\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"K\n\013Trac"
    "kerArea\022\024\n\014machine_room\030\001 \003(\t\022&\n\007tracker"
    "\030\002 \003(\0132\025.bbts.message.Tracker\"b\n\013Tracker"
    "Conf\022\'\n\004area\030\001 \003(\0132\031.bbts.message.Tracke"
    "rArea\022*\n\007default\030\002 \001(\0132\031.bbts.message.Tr"
    "ackerArea", 249);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TrackerConf.proto", &protobuf_RegisterTypes);
  Tracker::default_instance_ = new Tracker();
  TrackerArea::default_instance_ = new TrackerArea();
  TrackerConf::default_instance_ = new TrackerConf();
  Tracker::default_instance_->InitAsDefaultInstance();
  TrackerArea::default_instance_->InitAsDefaultInstance();
  TrackerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TrackerConf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TrackerConf_2eproto {
  StaticDescriptorInitializer_TrackerConf_2eproto() {
    protobuf_AddDesc_TrackerConf_2eproto();
  }
} static_descriptor_initializer_TrackerConf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Tracker::kHostFieldNumber;
const int Tracker::kPortFieldNumber;
#endif  // !_MSC_VER

Tracker::Tracker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Tracker::InitAsDefaultInstance() {
}

Tracker::Tracker(const Tracker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Tracker::SharedCtor() {
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Tracker::~Tracker() {
  SharedDtor();
}

void Tracker::SharedDtor() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    delete host_;
  }
  if (this != default_instance_) {
  }
}

void Tracker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Tracker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Tracker_descriptor_;
}

const Tracker& Tracker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackerConf_2eproto();  return *default_instance_;
}

Tracker* Tracker::default_instance_ = NULL;

Tracker* Tracker::New() const {
  return new Tracker;
}

void Tracker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::kEmptyString) {
        host_->clear();
      }
    }
    port_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Tracker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }
      
      // optional int32 port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Tracker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->host(), output);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Tracker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }
  
  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Tracker::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }
    
    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Tracker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Tracker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Tracker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Tracker::MergeFrom(const Tracker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Tracker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Tracker::CopyFrom(const Tracker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Tracker::IsInitialized() const {
  
  return true;
}

void Tracker::Swap(Tracker* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Tracker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Tracker_descriptor_;
  metadata.reflection = Tracker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerArea::kMachineRoomFieldNumber;
const int TrackerArea::kTrackerFieldNumber;
#endif  // !_MSC_VER

TrackerArea::TrackerArea()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerArea::InitAsDefaultInstance() {
}

TrackerArea::TrackerArea(const TrackerArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerArea::~TrackerArea() {
  SharedDtor();
}

void TrackerArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrackerArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerArea_descriptor_;
}

const TrackerArea& TrackerArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackerConf_2eproto();  return *default_instance_;
}

TrackerArea* TrackerArea::default_instance_ = NULL;

TrackerArea* TrackerArea::New() const {
  return new TrackerArea;
}

void TrackerArea::Clear() {
  machine_room_.Clear();
  tracker_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string machine_room = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machine_room:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_machine_room()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_room(0).data(), this->machine_room(0).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_machine_room;
        if (input->ExpectTag(18)) goto parse_tracker;
        break;
      }
      
      // repeated .bbts.message.Tracker tracker = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracker()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_tracker;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string machine_room = 1;
  for (int i = 0; i < this->machine_room_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->machine_room(i).data(), this->machine_room(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machine_room(i), output);
  }
  
  // repeated .bbts.message.Tracker tracker = 2;
  for (int i = 0; i < this->tracker_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->tracker(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string machine_room = 1;
  for (int i = 0; i < this->machine_room_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_room(i).data(), this->machine_room(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->machine_room(i), target);
  }
  
  // repeated .bbts.message.Tracker tracker = 2;
  for (int i = 0; i < this->tracker_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->tracker(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerArea::ByteSize() const {
  int total_size = 0;
  
  // repeated string machine_room = 1;
  total_size += 1 * this->machine_room_size();
  for (int i = 0; i < this->machine_room_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->machine_room(i));
  }
  
  // repeated .bbts.message.Tracker tracker = 2;
  total_size += 1 * this->tracker_size();
  for (int i = 0; i < this->tracker_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracker(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerArea::MergeFrom(const TrackerArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  machine_room_.MergeFrom(from.machine_room_);
  tracker_.MergeFrom(from.tracker_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerArea::CopyFrom(const TrackerArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerArea::IsInitialized() const {
  
  return true;
}

void TrackerArea::Swap(TrackerArea* other) {
  if (other != this) {
    machine_room_.Swap(&other->machine_room_);
    tracker_.Swap(&other->tracker_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerArea_descriptor_;
  metadata.reflection = TrackerArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackerConf::kAreaFieldNumber;
const int TrackerConf::kDefaultFieldNumber;
#endif  // !_MSC_VER

TrackerConf::TrackerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerConf::InitAsDefaultInstance() {
  default__ = const_cast< ::bbts::message::TrackerArea*>(&::bbts::message::TrackerArea::default_instance());
}

TrackerConf::TrackerConf(const TrackerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerConf::SharedCtor() {
  _cached_size_ = 0;
  default__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerConf::~TrackerConf() {
  SharedDtor();
}

void TrackerConf::SharedDtor() {
  if (this != default_instance_) {
    delete default__;
  }
}

void TrackerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerConf_descriptor_;
}

const TrackerConf& TrackerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TrackerConf_2eproto();  return *default_instance_;
}

TrackerConf* TrackerConf::default_instance_ = NULL;

TrackerConf* TrackerConf::New() const {
  return new TrackerConf;
}

void TrackerConf::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_default_()) {
      if (default__ != NULL) default__->::bbts::message::TrackerArea::Clear();
    }
  }
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bbts.message.TrackerArea area = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_area;
        if (input->ExpectTag(18)) goto parse_default;
        break;
      }
      
      // optional .bbts.message.TrackerArea default = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_default:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_default_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .bbts.message.TrackerArea area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->area(i), output);
  }
  
  // optional .bbts.message.TrackerArea default = 2;
  if (has_default_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->default_(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .bbts.message.TrackerArea area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->area(i), target);
  }
  
  // optional .bbts.message.TrackerArea default = 2;
  if (has_default_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->default_(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .bbts.message.TrackerArea default = 2;
    if (has_default_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->default_());
    }
    
  }
  // repeated .bbts.message.TrackerArea area = 1;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerConf::MergeFrom(const TrackerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_default_()) {
      mutable_default_()->::bbts::message::TrackerArea::MergeFrom(from.default_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerConf::CopyFrom(const TrackerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerConf::IsInitialized() const {
  
  return true;
}

void TrackerConf::Swap(TrackerConf* other) {
  if (other != this) {
    area_.Swap(&other->area_);
    std::swap(default__, other->default__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerConf_descriptor_;
  metadata.reflection = TrackerConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
