// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class Host;
class TaskOptions;
class AgentOptions;
class TaskStatus;
class Task;
class AddTask;
class BatchCtrl;
class BaseRes;
class TaskRes;
class BatchCtrlRes;
class BatchListRes;
class Metadata;

enum TaskStatus_status_t {
  TaskStatus_status_t_UNKNOW = 0,
  TaskStatus_status_t_ERROR = 1,
  TaskStatus_status_t_CHECKQ = 2,
  TaskStatus_status_t_CHECKING = 3,
  TaskStatus_status_t_DTORRENT = 4,
  TaskStatus_status_t_DOWNLOAD = 5,
  TaskStatus_status_t_PAUSED = 6,
  TaskStatus_status_t_SEEDING = 7,
  TaskStatus_status_t_FINISHED = 8,
  TaskStatus_status_t_CANCELED = 9
};
bool TaskStatus_status_t_IsValid(int value);
const TaskStatus_status_t TaskStatus_status_t_status_t_MIN = TaskStatus_status_t_UNKNOW;
const TaskStatus_status_t TaskStatus_status_t_status_t_MAX = TaskStatus_status_t_CANCELED;
const int TaskStatus_status_t_status_t_ARRAYSIZE = TaskStatus_status_t_status_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor();
inline const ::std::string& TaskStatus_status_t_Name(TaskStatus_status_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_status_t_descriptor(), value);
}
inline bool TaskStatus_status_t_Parse(
    const ::std::string& name, TaskStatus_status_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus_status_t>(
    TaskStatus_status_t_descriptor(), name, value);
}
enum BatchCtrl_ctrl_t {
  BatchCtrl_ctrl_t_CANCEL = 1,
  BatchCtrl_ctrl_t_PAUSE = 2,
  BatchCtrl_ctrl_t_RESUME = 3,
  BatchCtrl_ctrl_t_LIST = 4
};
bool BatchCtrl_ctrl_t_IsValid(int value);
const BatchCtrl_ctrl_t BatchCtrl_ctrl_t_ctrl_t_MIN = BatchCtrl_ctrl_t_CANCEL;
const BatchCtrl_ctrl_t BatchCtrl_ctrl_t_ctrl_t_MAX = BatchCtrl_ctrl_t_LIST;
const int BatchCtrl_ctrl_t_ctrl_t_ARRAYSIZE = BatchCtrl_ctrl_t_ctrl_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor();
inline const ::std::string& BatchCtrl_ctrl_t_Name(BatchCtrl_ctrl_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatchCtrl_ctrl_t_descriptor(), value);
}
inline bool BatchCtrl_ctrl_t_Parse(
    const ::std::string& name, BatchCtrl_ctrl_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatchCtrl_ctrl_t>(
    BatchCtrl_ctrl_t_descriptor(), name, value);
}
enum TaskType {
  SEEDING_TASK = 2,
  NOCHECK_TASK = 3
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = SEEDING_TASK;
const TaskType TaskType_MAX = NOCHECK_TASK;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class Host : public ::google::protobuf::Message {
 public:
  Host();
  virtual ~Host();
  
  Host(const Host& from);
  
  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();
  
  void Swap(Host* other);
  
  // implements Message ----------------------------------------------
  
  Host* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  
  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.Host)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Host* default_instance_;
};
// -------------------------------------------------------------------

class TaskOptions : public ::google::protobuf::Message {
 public:
  TaskOptions();
  virtual ~TaskOptions();
  
  TaskOptions(const TaskOptions& from);
  
  inline TaskOptions& operator=(const TaskOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskOptions& default_instance();
  
  void Swap(TaskOptions* other);
  
  // implements Message ----------------------------------------------
  
  TaskOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskOptions& from);
  void MergeFrom(const TaskOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::int64 taskid() const;
  inline void set_taskid(::google::protobuf::int64 value);
  
  // optional int32 upload_limit = 2;
  inline bool has_upload_limit() const;
  inline void clear_upload_limit();
  static const int kUploadLimitFieldNumber = 2;
  inline ::google::protobuf::int32 upload_limit() const;
  inline void set_upload_limit(::google::protobuf::int32 value);
  
  // optional int32 download_limit = 3;
  inline bool has_download_limit() const;
  inline void clear_download_limit();
  static const int kDownloadLimitFieldNumber = 3;
  inline ::google::protobuf::int32 download_limit() const;
  inline void set_download_limit(::google::protobuf::int32 value);
  
  // optional int32 max_conections = 4;
  inline bool has_max_conections() const;
  inline void clear_max_conections();
  static const int kMaxConectionsFieldNumber = 4;
  inline ::google::protobuf::int32 max_conections() const;
  inline void set_max_conections(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.TaskOptions)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_upload_limit();
  inline void clear_has_upload_limit();
  inline void set_has_download_limit();
  inline void clear_has_download_limit();
  inline void set_has_max_conections();
  inline void clear_has_max_conections();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 taskid_;
  ::google::protobuf::int32 upload_limit_;
  ::google::protobuf::int32 download_limit_;
  ::google::protobuf::int32 max_conections_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static TaskOptions* default_instance_;
};
// -------------------------------------------------------------------

class AgentOptions : public ::google::protobuf::Message {
 public:
  AgentOptions();
  virtual ~AgentOptions();
  
  AgentOptions(const AgentOptions& from);
  
  inline AgentOptions& operator=(const AgentOptions& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentOptions& default_instance();
  
  void Swap(AgentOptions* other);
  
  // implements Message ----------------------------------------------
  
  AgentOptions* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentOptions& from);
  void MergeFrom(const AgentOptions& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 bind_port = 1;
  inline bool has_bind_port() const;
  inline void clear_bind_port();
  static const int kBindPortFieldNumber = 1;
  inline ::google::protobuf::int32 bind_port() const;
  inline void set_bind_port(::google::protobuf::int32 value);
  
  // optional int32 upload_limit = 2;
  inline bool has_upload_limit() const;
  inline void clear_upload_limit();
  static const int kUploadLimitFieldNumber = 2;
  inline ::google::protobuf::int32 upload_limit() const;
  inline void set_upload_limit(::google::protobuf::int32 value);
  
  // optional int32 max_conections = 4;
  inline bool has_max_conections() const;
  inline void clear_max_conections();
  static const int kMaxConectionsFieldNumber = 4;
  inline ::google::protobuf::int32 max_conections() const;
  inline void set_max_conections(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.AgentOptions)
 private:
  inline void set_has_bind_port();
  inline void clear_has_bind_port();
  inline void set_has_upload_limit();
  inline void clear_has_upload_limit();
  inline void set_has_max_conections();
  inline void clear_has_max_conections();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 bind_port_;
  ::google::protobuf::int32 upload_limit_;
  ::google::protobuf::int32 max_conections_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static AgentOptions* default_instance_;
};
// -------------------------------------------------------------------

class TaskStatus : public ::google::protobuf::Message {
 public:
  TaskStatus();
  virtual ~TaskStatus();
  
  TaskStatus(const TaskStatus& from);
  
  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStatus& default_instance();
  
  void Swap(TaskStatus* other);
  
  // implements Message ----------------------------------------------
  
  TaskStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef TaskStatus_status_t status_t;
  static const status_t UNKNOW = TaskStatus_status_t_UNKNOW;
  static const status_t ERROR = TaskStatus_status_t_ERROR;
  static const status_t CHECKQ = TaskStatus_status_t_CHECKQ;
  static const status_t CHECKING = TaskStatus_status_t_CHECKING;
  static const status_t DTORRENT = TaskStatus_status_t_DTORRENT;
  static const status_t DOWNLOAD = TaskStatus_status_t_DOWNLOAD;
  static const status_t PAUSED = TaskStatus_status_t_PAUSED;
  static const status_t SEEDING = TaskStatus_status_t_SEEDING;
  static const status_t FINISHED = TaskStatus_status_t_FINISHED;
  static const status_t CANCELED = TaskStatus_status_t_CANCELED;
  static inline bool status_t_IsValid(int value) {
    return TaskStatus_status_t_IsValid(value);
  }
  static const status_t status_t_MIN =
    TaskStatus_status_t_status_t_MIN;
  static const status_t status_t_MAX =
    TaskStatus_status_t_status_t_MAX;
  static const int status_t_ARRAYSIZE =
    TaskStatus_status_t_status_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_t_descriptor() {
    return TaskStatus_status_t_descriptor();
  }
  static inline const ::std::string& status_t_Name(status_t value) {
    return TaskStatus_status_t_Name(value);
  }
  static inline bool status_t_Parse(const ::std::string& name,
      status_t* value) {
    return TaskStatus_status_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .bbts.message.Task task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::bbts::message::Task& task() const;
  inline ::bbts::message::Task* mutable_task();
  inline ::bbts::message::Task* release_task();
  
  // optional .bbts.message.TaskStatus.status_t status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::bbts::message::TaskStatus_status_t status() const;
  inline void set_status(::bbts::message::TaskStatus_status_t value);
  
  // optional int32 progress = 3;
  inline bool has_progress() const;
  inline void clear_progress();
  static const int kProgressFieldNumber = 3;
  inline ::google::protobuf::int32 progress() const;
  inline void set_progress(::google::protobuf::int32 value);
  
  // optional string error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  
  // optional int64 total_download = 5;
  inline bool has_total_download() const;
  inline void clear_total_download();
  static const int kTotalDownloadFieldNumber = 5;
  inline ::google::protobuf::int64 total_download() const;
  inline void set_total_download(::google::protobuf::int64 value);
  
  // optional int64 total_upload = 6;
  inline bool has_total_upload() const;
  inline void clear_total_upload();
  static const int kTotalUploadFieldNumber = 6;
  inline ::google::protobuf::int64 total_upload() const;
  inline void set_total_upload(::google::protobuf::int64 value);
  
  // optional int32 download_rate = 7;
  inline bool has_download_rate() const;
  inline void clear_download_rate();
  static const int kDownloadRateFieldNumber = 7;
  inline ::google::protobuf::int32 download_rate() const;
  inline void set_download_rate(::google::protobuf::int32 value);
  
  // optional int32 upload_rate = 8;
  inline bool has_upload_rate() const;
  inline void clear_upload_rate();
  static const int kUploadRateFieldNumber = 8;
  inline ::google::protobuf::int32 upload_rate() const;
  inline void set_upload_rate(::google::protobuf::int32 value);
  
  // optional int32 num_peers = 9;
  inline bool has_num_peers() const;
  inline void clear_num_peers();
  static const int kNumPeersFieldNumber = 9;
  inline ::google::protobuf::int32 num_peers() const;
  inline void set_num_peers(::google::protobuf::int32 value);
  
  // optional int32 num_seeds = 10;
  inline bool has_num_seeds() const;
  inline void clear_num_seeds();
  static const int kNumSeedsFieldNumber = 10;
  inline ::google::protobuf::int32 num_seeds() const;
  inline void set_num_seeds(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.TaskStatus)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_download();
  inline void clear_has_total_download();
  inline void set_has_total_upload();
  inline void clear_has_total_upload();
  inline void set_has_download_rate();
  inline void clear_has_download_rate();
  inline void set_has_upload_rate();
  inline void clear_has_upload_rate();
  inline void set_has_num_peers();
  inline void clear_has_num_peers();
  inline void set_has_num_seeds();
  inline void clear_has_num_seeds();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bbts::message::Task* task_;
  int status_;
  ::google::protobuf::int32 progress_;
  ::std::string* error_;
  ::google::protobuf::int64 total_download_;
  ::google::protobuf::int64 total_upload_;
  ::google::protobuf::int32 download_rate_;
  ::google::protobuf::int32 upload_rate_;
  ::google::protobuf::int32 num_peers_;
  ::google::protobuf::int32 num_seeds_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static TaskStatus* default_instance_;
};
// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message {
 public:
  Task();
  virtual ~Task();
  
  Task(const Task& from);
  
  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();
  
  void Swap(Task* other);
  
  // implements Message ----------------------------------------------
  
  Task* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::int64 taskid() const;
  inline void set_taskid(::google::protobuf::int64 value);
  
  // optional .bbts.message.TaskType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline bbts::message::TaskType type() const;
  inline void set_type(bbts::message::TaskType value);
  
  // optional string infohash = 3;
  inline bool has_infohash() const;
  inline void clear_infohash();
  static const int kInfohashFieldNumber = 3;
  inline const ::std::string& infohash() const;
  inline void set_infohash(const ::std::string& value);
  inline void set_infohash(const char* value);
  inline void set_infohash(const char* value, size_t size);
  inline ::std::string* mutable_infohash();
  inline ::std::string* release_infohash();
  
  // optional string torrent_path = 4;
  inline bool has_torrent_path() const;
  inline void clear_torrent_path();
  static const int kTorrentPathFieldNumber = 4;
  inline const ::std::string& torrent_path() const;
  inline void set_torrent_path(const ::std::string& value);
  inline void set_torrent_path(const char* value);
  inline void set_torrent_path(const char* value, size_t size);
  inline ::std::string* mutable_torrent_path();
  inline ::std::string* release_torrent_path();
  
  // optional bytes data = 5;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 5;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // optional string save_path = 6;
  inline bool has_save_path() const;
  inline void clear_save_path();
  static const int kSavePathFieldNumber = 6;
  inline const ::std::string& save_path() const;
  inline void set_save_path(const ::std::string& value);
  inline void set_save_path(const char* value);
  inline void set_save_path(const char* value, size_t size);
  inline ::std::string* mutable_save_path();
  inline ::std::string* release_save_path();
  
  // optional string new_name = 7;
  inline bool has_new_name() const;
  inline void clear_new_name();
  static const int kNewNameFieldNumber = 7;
  inline const ::std::string& new_name() const;
  inline void set_new_name(const ::std::string& value);
  inline void set_new_name(const char* value);
  inline void set_new_name(const char* value, size_t size);
  inline ::std::string* mutable_new_name();
  inline ::std::string* release_new_name();
  
  // repeated .bbts.message.Host trackers = 8;
  inline int trackers_size() const;
  inline void clear_trackers();
  static const int kTrackersFieldNumber = 8;
  inline const ::bbts::message::Host& trackers(int index) const;
  inline ::bbts::message::Host* mutable_trackers(int index);
  inline ::bbts::message::Host* add_trackers();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >&
      trackers() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >*
      mutable_trackers();
  
  // optional string cmd = 20;
  inline bool has_cmd() const;
  inline void clear_cmd();
  static const int kCmdFieldNumber = 20;
  inline const ::std::string& cmd() const;
  inline void set_cmd(const ::std::string& value);
  inline void set_cmd(const char* value);
  inline void set_cmd(const char* value, size_t size);
  inline ::std::string* mutable_cmd();
  inline ::std::string* release_cmd();
  
  // optional int32 uid = 21;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 21;
  inline ::google::protobuf::int32 uid() const;
  inline void set_uid(::google::protobuf::int32 value);
  
  // optional int32 gid = 22;
  inline bool has_gid() const;
  inline void clear_gid();
  static const int kGidFieldNumber = 22;
  inline ::google::protobuf::int32 gid() const;
  inline void set_gid(::google::protobuf::int32 value);
  
  // optional int32 seeding_time = 25;
  inline bool has_seeding_time() const;
  inline void clear_seeding_time();
  static const int kSeedingTimeFieldNumber = 25;
  inline ::google::protobuf::int32 seeding_time() const;
  inline void set_seeding_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.Task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_infohash();
  inline void clear_has_infohash();
  inline void set_has_torrent_path();
  inline void clear_has_torrent_path();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_seeding_time();
  inline void clear_has_seeding_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 taskid_;
  ::std::string* infohash_;
  ::std::string* torrent_path_;
  ::std::string* data_;
  ::std::string* save_path_;
  int type_;
  ::google::protobuf::int32 uid_;
  ::std::string* new_name_;
  ::google::protobuf::RepeatedPtrField< ::bbts::message::Host > trackers_;
  ::std::string* cmd_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 seeding_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Task* default_instance_;
};
// -------------------------------------------------------------------

class AddTask : public ::google::protobuf::Message {
 public:
  AddTask();
  virtual ~AddTask();
  
  AddTask(const AddTask& from);
  
  inline AddTask& operator=(const AddTask& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTask& default_instance();
  
  void Swap(AddTask* other);
  
  // implements Message ----------------------------------------------
  
  AddTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTask& from);
  void MergeFrom(const AddTask& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .bbts.message.Task task = 1;
  inline bool has_task() const;
  inline void clear_task();
  static const int kTaskFieldNumber = 1;
  inline const ::bbts::message::Task& task() const;
  inline ::bbts::message::Task* mutable_task();
  inline ::bbts::message::Task* release_task();
  
  // optional .bbts.message.TaskOptions options = 2;
  inline bool has_options() const;
  inline void clear_options();
  static const int kOptionsFieldNumber = 2;
  inline const ::bbts::message::TaskOptions& options() const;
  inline ::bbts::message::TaskOptions* mutable_options();
  inline ::bbts::message::TaskOptions* release_options();
  
  // @@protoc_insertion_point(class_scope:bbts.message.AddTask)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_options();
  inline void clear_has_options();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::bbts::message::Task* task_;
  ::bbts::message::TaskOptions* options_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static AddTask* default_instance_;
};
// -------------------------------------------------------------------

class BatchCtrl : public ::google::protobuf::Message {
 public:
  BatchCtrl();
  virtual ~BatchCtrl();
  
  BatchCtrl(const BatchCtrl& from);
  
  inline BatchCtrl& operator=(const BatchCtrl& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCtrl& default_instance();
  
  void Swap(BatchCtrl* other);
  
  // implements Message ----------------------------------------------
  
  BatchCtrl* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchCtrl& from);
  void MergeFrom(const BatchCtrl& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef BatchCtrl_ctrl_t ctrl_t;
  static const ctrl_t CANCEL = BatchCtrl_ctrl_t_CANCEL;
  static const ctrl_t PAUSE = BatchCtrl_ctrl_t_PAUSE;
  static const ctrl_t RESUME = BatchCtrl_ctrl_t_RESUME;
  static const ctrl_t LIST = BatchCtrl_ctrl_t_LIST;
  static inline bool ctrl_t_IsValid(int value) {
    return BatchCtrl_ctrl_t_IsValid(value);
  }
  static const ctrl_t ctrl_t_MIN =
    BatchCtrl_ctrl_t_ctrl_t_MIN;
  static const ctrl_t ctrl_t_MAX =
    BatchCtrl_ctrl_t_ctrl_t_MAX;
  static const int ctrl_t_ARRAYSIZE =
    BatchCtrl_ctrl_t_ctrl_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ctrl_t_descriptor() {
    return BatchCtrl_ctrl_t_descriptor();
  }
  static inline const ::std::string& ctrl_t_Name(ctrl_t value) {
    return BatchCtrl_ctrl_t_Name(value);
  }
  static inline bool ctrl_t_Parse(const ::std::string& name,
      ctrl_t* value) {
    return BatchCtrl_ctrl_t_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  inline bool has_ctrl_type() const;
  inline void clear_ctrl_type();
  static const int kCtrlTypeFieldNumber = 1;
  inline ::bbts::message::BatchCtrl_ctrl_t ctrl_type() const;
  inline void set_ctrl_type(::bbts::message::BatchCtrl_ctrl_t value);
  
  // optional bool ctrl_all = 2;
  inline bool has_ctrl_all() const;
  inline void clear_ctrl_all();
  static const int kCtrlAllFieldNumber = 2;
  inline bool ctrl_all() const;
  inline void set_ctrl_all(bool value);
  
  // repeated int64 taskids = 3;
  inline int taskids_size() const;
  inline void clear_taskids();
  static const int kTaskidsFieldNumber = 3;
  inline ::google::protobuf::int64 taskids(int index) const;
  inline void set_taskids(int index, ::google::protobuf::int64 value);
  inline void add_taskids(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      taskids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_taskids();
  
  // repeated string infohashs = 4;
  inline int infohashs_size() const;
  inline void clear_infohashs();
  static const int kInfohashsFieldNumber = 4;
  inline const ::std::string& infohashs(int index) const;
  inline ::std::string* mutable_infohashs(int index);
  inline void set_infohashs(int index, const ::std::string& value);
  inline void set_infohashs(int index, const char* value);
  inline void set_infohashs(int index, const char* value, size_t size);
  inline ::std::string* add_infohashs();
  inline void add_infohashs(const ::std::string& value);
  inline void add_infohashs(const char* value);
  inline void add_infohashs(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& infohashs() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infohashs();
  
  // @@protoc_insertion_point(class_scope:bbts.message.BatchCtrl)
 private:
  inline void set_has_ctrl_type();
  inline void clear_has_ctrl_type();
  inline void set_has_ctrl_all();
  inline void clear_has_ctrl_all();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  int ctrl_type_;
  bool ctrl_all_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > taskids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infohashs_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static BatchCtrl* default_instance_;
};
// -------------------------------------------------------------------

class BaseRes : public ::google::protobuf::Message {
 public:
  BaseRes();
  virtual ~BaseRes();
  
  BaseRes(const BaseRes& from);
  
  inline BaseRes& operator=(const BaseRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseRes& default_instance();
  
  void Swap(BaseRes* other);
  
  // implements Message ----------------------------------------------
  
  BaseRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseRes& from);
  void MergeFrom(const BaseRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 ret_code = 1;
  inline bool has_ret_code() const;
  inline void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::int32 ret_code() const;
  inline void set_ret_code(::google::protobuf::int32 value);
  
  // optional string fail_msg = 2;
  inline bool has_fail_msg() const;
  inline void clear_fail_msg();
  static const int kFailMsgFieldNumber = 2;
  inline const ::std::string& fail_msg() const;
  inline void set_fail_msg(const ::std::string& value);
  inline void set_fail_msg(const char* value);
  inline void set_fail_msg(const char* value, size_t size);
  inline ::std::string* mutable_fail_msg();
  inline ::std::string* release_fail_msg();
  
  // @@protoc_insertion_point(class_scope:bbts.message.BaseRes)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_fail_msg();
  inline void clear_has_fail_msg();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* fail_msg_;
  ::google::protobuf::int32 ret_code_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static BaseRes* default_instance_;
};
// -------------------------------------------------------------------

class TaskRes : public ::google::protobuf::Message {
 public:
  TaskRes();
  virtual ~TaskRes();
  
  TaskRes(const TaskRes& from);
  
  inline TaskRes& operator=(const TaskRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRes& default_instance();
  
  void Swap(TaskRes* other);
  
  // implements Message ----------------------------------------------
  
  TaskRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskRes& from);
  void MergeFrom(const TaskRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 taskid = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  inline ::google::protobuf::int64 taskid() const;
  inline void set_taskid(::google::protobuf::int64 value);
  
  // optional .bbts.message.BaseRes res = 2;
  inline bool has_res() const;
  inline void clear_res();
  static const int kResFieldNumber = 2;
  inline const ::bbts::message::BaseRes& res() const;
  inline ::bbts::message::BaseRes* mutable_res();
  inline ::bbts::message::BaseRes* release_res();
  
  // @@protoc_insertion_point(class_scope:bbts.message.TaskRes)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_res();
  inline void clear_has_res();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int64 taskid_;
  ::bbts::message::BaseRes* res_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static TaskRes* default_instance_;
};
// -------------------------------------------------------------------

class BatchCtrlRes : public ::google::protobuf::Message {
 public:
  BatchCtrlRes();
  virtual ~BatchCtrlRes();
  
  BatchCtrlRes(const BatchCtrlRes& from);
  
  inline BatchCtrlRes& operator=(const BatchCtrlRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCtrlRes& default_instance();
  
  void Swap(BatchCtrlRes* other);
  
  // implements Message ----------------------------------------------
  
  BatchCtrlRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchCtrlRes& from);
  void MergeFrom(const BatchCtrlRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bbts.message.TaskRes tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::bbts::message::TaskRes& tasks(int index) const;
  inline ::bbts::message::TaskRes* mutable_tasks(int index);
  inline ::bbts::message::TaskRes* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >*
      mutable_tasks();
  
  // @@protoc_insertion_point(class_scope:bbts.message.BatchCtrlRes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes > tasks_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static BatchCtrlRes* default_instance_;
};
// -------------------------------------------------------------------

class BatchListRes : public ::google::protobuf::Message {
 public:
  BatchListRes();
  virtual ~BatchListRes();
  
  BatchListRes(const BatchListRes& from);
  
  inline BatchListRes& operator=(const BatchListRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchListRes& default_instance();
  
  void Swap(BatchListRes* other);
  
  // implements Message ----------------------------------------------
  
  BatchListRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchListRes& from);
  void MergeFrom(const BatchListRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bbts.message.TaskStatus status = 1;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline const ::bbts::message::TaskStatus& status(int index) const;
  inline ::bbts::message::TaskStatus* mutable_status(int index);
  inline ::bbts::message::TaskStatus* add_status();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >&
      status() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >*
      mutable_status();
  
  // @@protoc_insertion_point(class_scope:bbts.message.BatchListRes)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus > status_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static BatchListRes* default_instance_;
};
// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message {
 public:
  Metadata();
  virtual ~Metadata();
  
  Metadata(const Metadata& from);
  
  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();
  
  void Swap(Metadata* other);
  
  // implements Message ----------------------------------------------
  
  Metadata* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string infohash = 1;
  inline bool has_infohash() const;
  inline void clear_infohash();
  static const int kInfohashFieldNumber = 1;
  inline const ::std::string& infohash() const;
  inline void set_infohash(const ::std::string& value);
  inline void set_infohash(const char* value);
  inline void set_infohash(const char* value, size_t size);
  inline ::std::string* mutable_infohash();
  inline ::std::string* release_infohash();
  
  // optional bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  
  // @@protoc_insertion_point(class_scope:bbts.message.Metadata)
 private:
  inline void set_has_infohash();
  inline void clear_has_infohash();
  inline void set_has_data();
  inline void clear_has_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* infohash_;
  ::std::string* data_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_message_2eproto();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();
  
  void InitAsDefaultInstance();
  static Metadata* default_instance_;
};
// ===================================================================


// ===================================================================

// Host

// optional string ip = 1;
inline bool Host::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Host::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Host::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Host::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& Host::ip() const {
  return *ip_;
}
inline void Host::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Host::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void Host::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Host::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* Host::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 2;
inline bool Host::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Host::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Host::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Host::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Host::port() const {
  return port_;
}
inline void Host::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// TaskOptions

// optional int64 taskid = 1;
inline bool TaskOptions::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskOptions::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskOptions::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskOptions::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 TaskOptions::taskid() const {
  return taskid_;
}
inline void TaskOptions::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional int32 upload_limit = 2;
inline bool TaskOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
inline ::google::protobuf::int32 TaskOptions::upload_limit() const {
  return upload_limit_;
}
inline void TaskOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
}

// optional int32 download_limit = 3;
inline bool TaskOptions::has_download_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskOptions::set_has_download_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskOptions::clear_has_download_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskOptions::clear_download_limit() {
  download_limit_ = 0;
  clear_has_download_limit();
}
inline ::google::protobuf::int32 TaskOptions::download_limit() const {
  return download_limit_;
}
inline void TaskOptions::set_download_limit(::google::protobuf::int32 value) {
  set_has_download_limit();
  download_limit_ = value;
}

// optional int32 max_conections = 4;
inline bool TaskOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
inline ::google::protobuf::int32 TaskOptions::max_conections() const {
  return max_conections_;
}
inline void TaskOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
}

// -------------------------------------------------------------------

// AgentOptions

// optional int32 bind_port = 1;
inline bool AgentOptions::has_bind_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentOptions::set_has_bind_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentOptions::clear_has_bind_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentOptions::clear_bind_port() {
  bind_port_ = 0;
  clear_has_bind_port();
}
inline ::google::protobuf::int32 AgentOptions::bind_port() const {
  return bind_port_;
}
inline void AgentOptions::set_bind_port(::google::protobuf::int32 value) {
  set_has_bind_port();
  bind_port_ = value;
}

// optional int32 upload_limit = 2;
inline bool AgentOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
inline ::google::protobuf::int32 AgentOptions::upload_limit() const {
  return upload_limit_;
}
inline void AgentOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
}

// optional int32 max_conections = 4;
inline bool AgentOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
inline ::google::protobuf::int32 AgentOptions::max_conections() const {
  return max_conections_;
}
inline void AgentOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
}

// -------------------------------------------------------------------

// TaskStatus

// optional .bbts.message.Task task = 1;
inline bool TaskStatus::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskStatus::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskStatus::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskStatus::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
inline const ::bbts::message::Task& TaskStatus::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::bbts::message::Task* TaskStatus::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::bbts::message::Task;
  return task_;
}
inline ::bbts::message::Task* TaskStatus::release_task() {
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}

// optional .bbts.message.TaskStatus.status_t status = 2;
inline bool TaskStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::bbts::message::TaskStatus_status_t TaskStatus::status() const {
  return static_cast< ::bbts::message::TaskStatus_status_t >(status_);
}
inline void TaskStatus::set_status(::bbts::message::TaskStatus_status_t value) {
  GOOGLE_DCHECK(::bbts::message::TaskStatus_status_t_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional int32 progress = 3;
inline bool TaskStatus::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskStatus::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskStatus::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskStatus::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 TaskStatus::progress() const {
  return progress_;
}
inline void TaskStatus::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
}

// optional string error = 4;
inline bool TaskStatus::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskStatus::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskStatus::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& TaskStatus::error() const {
  return *error_;
}
inline void TaskStatus::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void TaskStatus::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void TaskStatus::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TaskStatus::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* TaskStatus::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int64 total_download = 5;
inline bool TaskStatus::has_total_download() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskStatus::set_has_total_download() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskStatus::clear_has_total_download() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskStatus::clear_total_download() {
  total_download_ = GOOGLE_LONGLONG(0);
  clear_has_total_download();
}
inline ::google::protobuf::int64 TaskStatus::total_download() const {
  return total_download_;
}
inline void TaskStatus::set_total_download(::google::protobuf::int64 value) {
  set_has_total_download();
  total_download_ = value;
}

// optional int64 total_upload = 6;
inline bool TaskStatus::has_total_upload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskStatus::set_has_total_upload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskStatus::clear_has_total_upload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskStatus::clear_total_upload() {
  total_upload_ = GOOGLE_LONGLONG(0);
  clear_has_total_upload();
}
inline ::google::protobuf::int64 TaskStatus::total_upload() const {
  return total_upload_;
}
inline void TaskStatus::set_total_upload(::google::protobuf::int64 value) {
  set_has_total_upload();
  total_upload_ = value;
}

// optional int32 download_rate = 7;
inline bool TaskStatus::has_download_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskStatus::set_has_download_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskStatus::clear_has_download_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskStatus::clear_download_rate() {
  download_rate_ = 0;
  clear_has_download_rate();
}
inline ::google::protobuf::int32 TaskStatus::download_rate() const {
  return download_rate_;
}
inline void TaskStatus::set_download_rate(::google::protobuf::int32 value) {
  set_has_download_rate();
  download_rate_ = value;
}

// optional int32 upload_rate = 8;
inline bool TaskStatus::has_upload_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskStatus::set_has_upload_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskStatus::clear_has_upload_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskStatus::clear_upload_rate() {
  upload_rate_ = 0;
  clear_has_upload_rate();
}
inline ::google::protobuf::int32 TaskStatus::upload_rate() const {
  return upload_rate_;
}
inline void TaskStatus::set_upload_rate(::google::protobuf::int32 value) {
  set_has_upload_rate();
  upload_rate_ = value;
}

// optional int32 num_peers = 9;
inline bool TaskStatus::has_num_peers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskStatus::set_has_num_peers() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TaskStatus::clear_has_num_peers() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TaskStatus::clear_num_peers() {
  num_peers_ = 0;
  clear_has_num_peers();
}
inline ::google::protobuf::int32 TaskStatus::num_peers() const {
  return num_peers_;
}
inline void TaskStatus::set_num_peers(::google::protobuf::int32 value) {
  set_has_num_peers();
  num_peers_ = value;
}

// optional int32 num_seeds = 10;
inline bool TaskStatus::has_num_seeds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskStatus::set_has_num_seeds() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TaskStatus::clear_has_num_seeds() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TaskStatus::clear_num_seeds() {
  num_seeds_ = 0;
  clear_has_num_seeds();
}
inline ::google::protobuf::int32 TaskStatus::num_seeds() const {
  return num_seeds_;
}
inline void TaskStatus::set_num_seeds(::google::protobuf::int32 value) {
  set_has_num_seeds();
  num_seeds_ = value;
}

// -------------------------------------------------------------------

// Task

// optional int64 taskid = 1;
inline bool Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 Task::taskid() const {
  return taskid_;
}
inline void Task::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional .bbts.message.TaskType type = 2;
inline bool Task::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline bbts::message::TaskType Task::type() const {
  return static_cast< bbts::message::TaskType >(type_);
}
inline void Task::set_type(bbts::message::TaskType value) {
  GOOGLE_DCHECK(bbts::message::TaskType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string infohash = 3;
inline bool Task::has_infohash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_infohash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_infohash() {
  if (infohash_ != &::google::protobuf::internal::kEmptyString) {
    infohash_->clear();
  }
  clear_has_infohash();
}
inline const ::std::string& Task::infohash() const {
  return *infohash_;
}
inline void Task::set_infohash(const ::std::string& value) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(value);
}
inline void Task::set_infohash(const char* value) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(value);
}
inline void Task::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_infohash() {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  return infohash_;
}
inline ::std::string* Task::release_infohash() {
  clear_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infohash_;
    infohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string torrent_path = 4;
inline bool Task::has_torrent_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_torrent_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_torrent_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_torrent_path() {
  if (torrent_path_ != &::google::protobuf::internal::kEmptyString) {
    torrent_path_->clear();
  }
  clear_has_torrent_path();
}
inline const ::std::string& Task::torrent_path() const {
  return *torrent_path_;
}
inline void Task::set_torrent_path(const ::std::string& value) {
  set_has_torrent_path();
  if (torrent_path_ == &::google::protobuf::internal::kEmptyString) {
    torrent_path_ = new ::std::string;
  }
  torrent_path_->assign(value);
}
inline void Task::set_torrent_path(const char* value) {
  set_has_torrent_path();
  if (torrent_path_ == &::google::protobuf::internal::kEmptyString) {
    torrent_path_ = new ::std::string;
  }
  torrent_path_->assign(value);
}
inline void Task::set_torrent_path(const char* value, size_t size) {
  set_has_torrent_path();
  if (torrent_path_ == &::google::protobuf::internal::kEmptyString) {
    torrent_path_ = new ::std::string;
  }
  torrent_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_torrent_path() {
  set_has_torrent_path();
  if (torrent_path_ == &::google::protobuf::internal::kEmptyString) {
    torrent_path_ = new ::std::string;
  }
  return torrent_path_;
}
inline ::std::string* Task::release_torrent_path() {
  clear_has_torrent_path();
  if (torrent_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = torrent_path_;
    torrent_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 5;
inline bool Task::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Task::data() const {
  return *data_;
}
inline void Task::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Task::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Task::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Task::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string save_path = 6;
inline bool Task::has_save_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_save_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_save_path() {
  if (save_path_ != &::google::protobuf::internal::kEmptyString) {
    save_path_->clear();
  }
  clear_has_save_path();
}
inline const ::std::string& Task::save_path() const {
  return *save_path_;
}
inline void Task::set_save_path(const ::std::string& value) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::kEmptyString) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(value);
}
inline void Task::set_save_path(const char* value) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::kEmptyString) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(value);
}
inline void Task::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::kEmptyString) {
    save_path_ = new ::std::string;
  }
  save_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_save_path() {
  set_has_save_path();
  if (save_path_ == &::google::protobuf::internal::kEmptyString) {
    save_path_ = new ::std::string;
  }
  return save_path_;
}
inline ::std::string* Task::release_save_path() {
  clear_has_save_path();
  if (save_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = save_path_;
    save_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string new_name = 7;
inline bool Task::has_new_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_new_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_new_name() {
  if (new_name_ != &::google::protobuf::internal::kEmptyString) {
    new_name_->clear();
  }
  clear_has_new_name();
}
inline const ::std::string& Task::new_name() const {
  return *new_name_;
}
inline void Task::set_new_name(const ::std::string& value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void Task::set_new_name(const char* value) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(value);
}
inline void Task::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  new_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_new_name() {
  set_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    new_name_ = new ::std::string;
  }
  return new_name_;
}
inline ::std::string* Task::release_new_name() {
  clear_has_new_name();
  if (new_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = new_name_;
    new_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bbts.message.Host trackers = 8;
inline int Task::trackers_size() const {
  return trackers_.size();
}
inline void Task::clear_trackers() {
  trackers_.Clear();
}
inline const ::bbts::message::Host& Task::trackers(int index) const {
  return trackers_.Get(index);
}
inline ::bbts::message::Host* Task::mutable_trackers(int index) {
  return trackers_.Mutable(index);
}
inline ::bbts::message::Host* Task::add_trackers() {
  return trackers_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >&
Task::trackers() const {
  return trackers_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >*
Task::mutable_trackers() {
  return &trackers_;
}

// optional string cmd = 20;
inline bool Task::has_cmd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_cmd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_cmd() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    cmd_->clear();
  }
  clear_has_cmd();
}
inline const ::std::string& Task::cmd() const {
  return *cmd_;
}
inline void Task::set_cmd(const ::std::string& value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Task::set_cmd(const char* value) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(value);
}
inline void Task::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  cmd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Task::mutable_cmd() {
  set_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    cmd_ = new ::std::string;
  }
  return cmd_;
}
inline ::std::string* Task::release_cmd() {
  clear_has_cmd();
  if (cmd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cmd_;
    cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 uid = 21;
inline bool Task::has_uid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_uid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_uid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Task::uid() const {
  return uid_;
}
inline void Task::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
}

// optional int32 gid = 22;
inline bool Task::has_gid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_gid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_gid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 Task::gid() const {
  return gid_;
}
inline void Task::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
}

// optional int32 seeding_time = 25;
inline bool Task::has_seeding_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Task::set_has_seeding_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Task::clear_has_seeding_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Task::clear_seeding_time() {
  seeding_time_ = 0;
  clear_has_seeding_time();
}
inline ::google::protobuf::int32 Task::seeding_time() const {
  return seeding_time_;
}
inline void Task::set_seeding_time(::google::protobuf::int32 value) {
  set_has_seeding_time();
  seeding_time_ = value;
}

// -------------------------------------------------------------------

// AddTask

// optional .bbts.message.Task task = 1;
inline bool AddTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTask::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
inline const ::bbts::message::Task& AddTask::task() const {
  return task_ != NULL ? *task_ : *default_instance_->task_;
}
inline ::bbts::message::Task* AddTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) task_ = new ::bbts::message::Task;
  return task_;
}
inline ::bbts::message::Task* AddTask::release_task() {
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}

// optional .bbts.message.TaskOptions options = 2;
inline bool AddTask::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTask::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTask::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTask::clear_options() {
  if (options_ != NULL) options_->::bbts::message::TaskOptions::Clear();
  clear_has_options();
}
inline const ::bbts::message::TaskOptions& AddTask::options() const {
  return options_ != NULL ? *options_ : *default_instance_->options_;
}
inline ::bbts::message::TaskOptions* AddTask::mutable_options() {
  set_has_options();
  if (options_ == NULL) options_ = new ::bbts::message::TaskOptions;
  return options_;
}
inline ::bbts::message::TaskOptions* AddTask::release_options() {
  clear_has_options();
  ::bbts::message::TaskOptions* temp = options_;
  options_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BatchCtrl

// optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
inline bool BatchCtrl::has_ctrl_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchCtrl::set_has_ctrl_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchCtrl::clear_has_ctrl_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchCtrl::clear_ctrl_type() {
  ctrl_type_ = 1;
  clear_has_ctrl_type();
}
inline ::bbts::message::BatchCtrl_ctrl_t BatchCtrl::ctrl_type() const {
  return static_cast< ::bbts::message::BatchCtrl_ctrl_t >(ctrl_type_);
}
inline void BatchCtrl::set_ctrl_type(::bbts::message::BatchCtrl_ctrl_t value) {
  GOOGLE_DCHECK(::bbts::message::BatchCtrl_ctrl_t_IsValid(value));
  set_has_ctrl_type();
  ctrl_type_ = value;
}

// optional bool ctrl_all = 2;
inline bool BatchCtrl::has_ctrl_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchCtrl::set_has_ctrl_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchCtrl::clear_has_ctrl_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchCtrl::clear_ctrl_all() {
  ctrl_all_ = false;
  clear_has_ctrl_all();
}
inline bool BatchCtrl::ctrl_all() const {
  return ctrl_all_;
}
inline void BatchCtrl::set_ctrl_all(bool value) {
  set_has_ctrl_all();
  ctrl_all_ = value;
}

// repeated int64 taskids = 3;
inline int BatchCtrl::taskids_size() const {
  return taskids_.size();
}
inline void BatchCtrl::clear_taskids() {
  taskids_.Clear();
}
inline ::google::protobuf::int64 BatchCtrl::taskids(int index) const {
  return taskids_.Get(index);
}
inline void BatchCtrl::set_taskids(int index, ::google::protobuf::int64 value) {
  taskids_.Set(index, value);
}
inline void BatchCtrl::add_taskids(::google::protobuf::int64 value) {
  taskids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BatchCtrl::taskids() const {
  return taskids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BatchCtrl::mutable_taskids() {
  return &taskids_;
}

// repeated string infohashs = 4;
inline int BatchCtrl::infohashs_size() const {
  return infohashs_.size();
}
inline void BatchCtrl::clear_infohashs() {
  infohashs_.Clear();
}
inline const ::std::string& BatchCtrl::infohashs(int index) const {
  return infohashs_.Get(index);
}
inline ::std::string* BatchCtrl::mutable_infohashs(int index) {
  return infohashs_.Mutable(index);
}
inline void BatchCtrl::set_infohashs(int index, const ::std::string& value) {
  infohashs_.Mutable(index)->assign(value);
}
inline void BatchCtrl::set_infohashs(int index, const char* value) {
  infohashs_.Mutable(index)->assign(value);
}
inline void BatchCtrl::set_infohashs(int index, const char* value, size_t size) {
  infohashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BatchCtrl::add_infohashs() {
  return infohashs_.Add();
}
inline void BatchCtrl::add_infohashs(const ::std::string& value) {
  infohashs_.Add()->assign(value);
}
inline void BatchCtrl::add_infohashs(const char* value) {
  infohashs_.Add()->assign(value);
}
inline void BatchCtrl::add_infohashs(const char* value, size_t size) {
  infohashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchCtrl::infohashs() const {
  return infohashs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchCtrl::mutable_infohashs() {
  return &infohashs_;
}

// -------------------------------------------------------------------

// BaseRes

// optional int32 ret_code = 1;
inline bool BaseRes::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseRes::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseRes::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseRes::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 BaseRes::ret_code() const {
  return ret_code_;
}
inline void BaseRes::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
}

// optional string fail_msg = 2;
inline bool BaseRes::has_fail_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseRes::set_has_fail_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseRes::clear_has_fail_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseRes::clear_fail_msg() {
  if (fail_msg_ != &::google::protobuf::internal::kEmptyString) {
    fail_msg_->clear();
  }
  clear_has_fail_msg();
}
inline const ::std::string& BaseRes::fail_msg() const {
  return *fail_msg_;
}
inline void BaseRes::set_fail_msg(const ::std::string& value) {
  set_has_fail_msg();
  if (fail_msg_ == &::google::protobuf::internal::kEmptyString) {
    fail_msg_ = new ::std::string;
  }
  fail_msg_->assign(value);
}
inline void BaseRes::set_fail_msg(const char* value) {
  set_has_fail_msg();
  if (fail_msg_ == &::google::protobuf::internal::kEmptyString) {
    fail_msg_ = new ::std::string;
  }
  fail_msg_->assign(value);
}
inline void BaseRes::set_fail_msg(const char* value, size_t size) {
  set_has_fail_msg();
  if (fail_msg_ == &::google::protobuf::internal::kEmptyString) {
    fail_msg_ = new ::std::string;
  }
  fail_msg_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BaseRes::mutable_fail_msg() {
  set_has_fail_msg();
  if (fail_msg_ == &::google::protobuf::internal::kEmptyString) {
    fail_msg_ = new ::std::string;
  }
  return fail_msg_;
}
inline ::std::string* BaseRes::release_fail_msg() {
  clear_has_fail_msg();
  if (fail_msg_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fail_msg_;
    fail_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// TaskRes

// optional int64 taskid = 1;
inline bool TaskRes::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskRes::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskRes::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskRes::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 TaskRes::taskid() const {
  return taskid_;
}
inline void TaskRes::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional .bbts.message.BaseRes res = 2;
inline bool TaskRes::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskRes::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskRes::clear_res() {
  if (res_ != NULL) res_->::bbts::message::BaseRes::Clear();
  clear_has_res();
}
inline const ::bbts::message::BaseRes& TaskRes::res() const {
  return res_ != NULL ? *res_ : *default_instance_->res_;
}
inline ::bbts::message::BaseRes* TaskRes::mutable_res() {
  set_has_res();
  if (res_ == NULL) res_ = new ::bbts::message::BaseRes;
  return res_;
}
inline ::bbts::message::BaseRes* TaskRes::release_res() {
  clear_has_res();
  ::bbts::message::BaseRes* temp = res_;
  res_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BatchCtrlRes

// repeated .bbts.message.TaskRes tasks = 1;
inline int BatchCtrlRes::tasks_size() const {
  return tasks_.size();
}
inline void BatchCtrlRes::clear_tasks() {
  tasks_.Clear();
}
inline const ::bbts::message::TaskRes& BatchCtrlRes::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::bbts::message::TaskRes* BatchCtrlRes::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::bbts::message::TaskRes* BatchCtrlRes::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >&
BatchCtrlRes::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >*
BatchCtrlRes::mutable_tasks() {
  return &tasks_;
}

// -------------------------------------------------------------------

// BatchListRes

// repeated .bbts.message.TaskStatus status = 1;
inline int BatchListRes::status_size() const {
  return status_.size();
}
inline void BatchListRes::clear_status() {
  status_.Clear();
}
inline const ::bbts::message::TaskStatus& BatchListRes::status(int index) const {
  return status_.Get(index);
}
inline ::bbts::message::TaskStatus* BatchListRes::mutable_status(int index) {
  return status_.Mutable(index);
}
inline ::bbts::message::TaskStatus* BatchListRes::add_status() {
  return status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >&
BatchListRes::status() const {
  return status_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >*
BatchListRes::mutable_status() {
  return &status_;
}

// -------------------------------------------------------------------

// Metadata

// optional string infohash = 1;
inline bool Metadata::has_infohash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_infohash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_infohash() {
  if (infohash_ != &::google::protobuf::internal::kEmptyString) {
    infohash_->clear();
  }
  clear_has_infohash();
}
inline const ::std::string& Metadata::infohash() const {
  return *infohash_;
}
inline void Metadata::set_infohash(const ::std::string& value) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(value);
}
inline void Metadata::set_infohash(const char* value) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(value);
}
inline void Metadata::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  infohash_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Metadata::mutable_infohash() {
  set_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    infohash_ = new ::std::string;
  }
  return infohash_;
}
inline ::std::string* Metadata::release_infohash() {
  clear_has_infohash();
  if (infohash_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = infohash_;
    infohash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional bytes data = 2;
inline bool Metadata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& Metadata::data() const {
  return *data_;
}
inline void Metadata::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Metadata::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void Metadata::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Metadata::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* Metadata::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bbts::message::TaskStatus_status_t>() {
  return ::bbts::message::TaskStatus_status_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bbts::message::BatchCtrl_ctrl_t>() {
  return ::bbts::message::BatchCtrl_ctrl_t_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< bbts::message::TaskType>() {
  return bbts::message::TaskType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
