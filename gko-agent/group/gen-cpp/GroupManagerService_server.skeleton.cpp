// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "GroupManagerService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::bbts::group;

class GroupManagerServiceHandler : virtual public GroupManagerServiceIf {
 public:
  GroupManagerServiceHandler() {
    // Your initialization goes here
  }

  void AddGroupTask(GeneralResponse& _return, const DownloadParam& down_params, const UserCred& cred) {
    // Your implementation goes here
    printf("AddGroupTask\n");
  }

  void GetTaskStatus(std::vector<TaskStatus> & _return, const std::string& infohash, const bool is_full) {
    // Your implementation goes here
    printf("GetTaskStatus\n");
  }

  void ControlTask(GeneralResponse& _return, const std::string& infohash, const bool is_all, const ControlTaskType::type type, const UserCred& cred) {
    // Your implementation goes here
    printf("ControlTask\n");
  }

  void SetTaskOption(GeneralResponse& _return, const TaskOptions& options) {
    // Your implementation goes here
    printf("SetTaskOption\n");
  }

  void GetTaskOption(std::vector<TaskOptions> & _return, const std::string& infohash) {
    // Your implementation goes here
    printf("GetTaskOption\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<GroupManagerServiceHandler> handler(new GroupManagerServiceHandler());
  shared_ptr<TProcessor> processor(new GroupManagerServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

