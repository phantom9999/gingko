// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DownloadConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadConfigure_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentConfigure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configure_2eproto() {
  protobuf_AddDesc_configure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configure.proto");
  GOOGLE_CHECK(file != NULL);
  DownloadConfigure_descriptor_ = file->message_type(0);
  static const int DownloadConfigure_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cluster_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, java_home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, class_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, socket_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, task_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peer_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, tracker_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, connection_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peers_num_want_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cache_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, file_pool_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_metadata_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, seeding_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, min_reconnect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peer_connect_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, read_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, write_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, lock_disk_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, suggest_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_queued_disk_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_out_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_allowed_in_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, whole_pieces_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, request_queue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_buffer_low_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_buffer_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, recv_socket_buffer_size_),
  };
  DownloadConfigure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DownloadConfigure_descriptor_,
      DownloadConfigure::default_instance_,
      DownloadConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DownloadConfigure));
  AgentConfigure_descriptor_ = file->message_type(1);
  static const int AgentConfigure_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, working_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, dynamic_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, resume_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, lock_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, database_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, socket_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, task_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peer_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, download_log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, tracker_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, listen_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, worker_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, db_del_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, active_seeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_total_meta_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_total_meta_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, connection_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peers_num_want_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, disable_os_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, cache_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, file_pool_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_metadata_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, seeding_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, min_reconnect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peer_connect_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, read_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, write_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, lock_disk_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, suggest_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_queued_disk_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_out_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_allowed_in_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, whole_pieces_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, request_queue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_buffer_low_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_buffer_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, recv_socket_buffer_size_),
  };
  AgentConfigure_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AgentConfigure_descriptor_,
      AgentConfigure::default_instance_,
      AgentConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AgentConfigure));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DownloadConfigure_descriptor_, &DownloadConfigure::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AgentConfigure_descriptor_, &AgentConfigure::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configure_2eproto() {
  delete DownloadConfigure::default_instance_;
  delete DownloadConfigure_reflection_;
  delete AgentConfigure::default_instance_;
  delete AgentConfigure_reflection_;
}

void protobuf_AddDesc_configure_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017configure.proto\022\014bbts.message\"\264\007\n\021Down"
    "loadConfigure\022\030\n\020download_timeout\030\001 \001(\005\022"
    "\035\n\025max_announce_interval\030\002 \001(\005\022\032\n\022cluste"
    "r_thread_num\030\003 \001(\005\022\021\n\tjava_home\030\004 \001(\t\022\022\n"
    "\nclass_path\030\005 \001(\t\022\023\n\013socket_file\030\006 \001(\t\022\026"
    "\n\016task_stat_file\030\007 \001(\t\022\026\n\016peer_stat_file"
    "\030\010 \001(\t\022\031\n\021download_log_file\030\t \001(\t\022\031\n\021tra"
    "cker_conf_file\030\n \001(\t\022\024\n\014upload_limit\0303 \001"
    "(\005\022\026\n\016download_limit\0304 \001(\005\022\030\n\020connection"
    "_limit\0305 \001(\005\022\026\n\016peers_num_want\0306 \001(\005\022\022\n\n"
    "cache_size\0308 \001(\005\022\024\n\014cache_expiry\0309 \001(\005\022\026"
    "\n\016file_pool_size\030: \001(\005\022\031\n\021max_metadata_s"
    "ize\030; \001(\005\022!\n\031seeding_announce_interval\030<"
    " \001(\005\022\032\n\022min_reconnect_time\030= \001(\005\022\034\n\024peer"
    "_connect_timeout\030> \001(\005\022\034\n\024read_cache_lin"
    "e_size\030\? \001(\005\022\035\n\025write_cache_line_size\030@ "
    "\001(\005\022\027\n\017lock_disk_cache\030A \001(\010\022\024\n\014suggest_"
    "mode\030B \001(\010\022\035\n\025max_queued_disk_bytes\030C \001("
    "\005\022\035\n\025max_out_request_queue\030D \001(\005\022$\n\034max_"
    "allowed_in_request_queue\030E \001(\005\022\036\n\026whole_"
    "pieces_threshold\030F \001(\005\022\032\n\022request_queue_"
    "time\030G \001(\005\022!\n\031send_buffer_low_watermark\030"
    "H \001(\005\022\035\n\025send_buffer_watermark\030I \001(\005\022\037\n\027"
    "send_socket_buffer_size\030J \001(\005\022\037\n\027recv_so"
    "cket_buffer_size\030K \001(\005\"\325\010\n\016AgentConfigur"
    "e\022\023\n\013working_dir\030\001 \001(\t\022\031\n\021dynamic_conf_f"
    "ile\030\002 \001(\t\022\022\n\nresume_dir\030\003 \001(\t\022\021\n\tlock_fi"
    "le\030\004 \001(\t\022\025\n\rdatabase_file\030\005 \001(\t\022\023\n\013socke"
    "t_file\030\006 \001(\t\022\026\n\016task_stat_file\030\007 \001(\t\022\026\n\016"
    "peer_stat_file\030\010 \001(\t\022\031\n\021download_log_fil"
    "e\030\t \001(\t\022\031\n\021tracker_conf_file\030\n \001(\t\022\023\n\013li"
    "sten_port\030\024 \001(\005\022\031\n\021worker_thread_num\030\025 \001"
    "(\005\022\027\n\017db_del_interval\030\026 \001(\005\022\024\n\014active_se"
    "eds\030\027 \001(\005\022\032\n\022max_total_meta_num\030\030 \001(\005\022\033\n"
    "\023max_total_meta_size\030\031 \001(\005\022\024\n\014upload_lim"
    "it\0303 \001(\005\022\026\n\016download_limit\0304 \001(\005\022\030\n\020conn"
    "ection_limit\0305 \001(\005\022\026\n\016peers_num_want\0306 \001"
    "(\005\022\030\n\020disable_os_cache\0307 \001(\010\022\022\n\ncache_si"
    "ze\0308 \001(\005\022\024\n\014cache_expiry\0309 \001(\005\022\026\n\016file_p"
    "ool_size\030: \001(\005\022\031\n\021max_metadata_size\030; \001("
    "\005\022!\n\031seeding_announce_interval\030< \001(\005\022\032\n\022"
    "min_reconnect_time\030= \001(\005\022\034\n\024peer_connect"
    "_timeout\030> \001(\005\022\034\n\024read_cache_line_size\030\?"
    " \001(\005\022\035\n\025write_cache_line_size\030@ \001(\005\022\027\n\017l"
    "ock_disk_cache\030A \001(\010\022\024\n\014suggest_mode\030B \001"
    "(\010\022\035\n\025max_queued_disk_bytes\030C \001(\005\022\035\n\025max"
    "_out_request_queue\030D \001(\005\022$\n\034max_allowed_"
    "in_request_queue\030E \001(\005\022\036\n\026whole_pieces_t"
    "hreshold\030F \001(\005\022\032\n\022request_queue_time\030G \001"
    "(\005\022!\n\031send_buffer_low_watermark\030H \001(\005\022\035\n"
    "\025send_buffer_watermark\030I \001(\005\022\037\n\027send_soc"
    "ket_buffer_size\030J \001(\005\022\037\n\027recv_socket_buf"
    "fer_size\030K \001(\005", 2094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configure.proto", &protobuf_RegisterTypes);
  DownloadConfigure::default_instance_ = new DownloadConfigure();
  AgentConfigure::default_instance_ = new AgentConfigure();
  DownloadConfigure::default_instance_->InitAsDefaultInstance();
  AgentConfigure::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configure_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configure_2eproto {
  StaticDescriptorInitializer_configure_2eproto() {
    protobuf_AddDesc_configure_2eproto();
  }
} static_descriptor_initializer_configure_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int DownloadConfigure::kDownloadTimeoutFieldNumber;
const int DownloadConfigure::kMaxAnnounceIntervalFieldNumber;
const int DownloadConfigure::kClusterThreadNumFieldNumber;
const int DownloadConfigure::kJavaHomeFieldNumber;
const int DownloadConfigure::kClassPathFieldNumber;
const int DownloadConfigure::kSocketFileFieldNumber;
const int DownloadConfigure::kTaskStatFileFieldNumber;
const int DownloadConfigure::kPeerStatFileFieldNumber;
const int DownloadConfigure::kDownloadLogFileFieldNumber;
const int DownloadConfigure::kTrackerConfFileFieldNumber;
const int DownloadConfigure::kUploadLimitFieldNumber;
const int DownloadConfigure::kDownloadLimitFieldNumber;
const int DownloadConfigure::kConnectionLimitFieldNumber;
const int DownloadConfigure::kPeersNumWantFieldNumber;
const int DownloadConfigure::kCacheSizeFieldNumber;
const int DownloadConfigure::kCacheExpiryFieldNumber;
const int DownloadConfigure::kFilePoolSizeFieldNumber;
const int DownloadConfigure::kMaxMetadataSizeFieldNumber;
const int DownloadConfigure::kSeedingAnnounceIntervalFieldNumber;
const int DownloadConfigure::kMinReconnectTimeFieldNumber;
const int DownloadConfigure::kPeerConnectTimeoutFieldNumber;
const int DownloadConfigure::kReadCacheLineSizeFieldNumber;
const int DownloadConfigure::kWriteCacheLineSizeFieldNumber;
const int DownloadConfigure::kLockDiskCacheFieldNumber;
const int DownloadConfigure::kSuggestModeFieldNumber;
const int DownloadConfigure::kMaxQueuedDiskBytesFieldNumber;
const int DownloadConfigure::kMaxOutRequestQueueFieldNumber;
const int DownloadConfigure::kMaxAllowedInRequestQueueFieldNumber;
const int DownloadConfigure::kWholePiecesThresholdFieldNumber;
const int DownloadConfigure::kRequestQueueTimeFieldNumber;
const int DownloadConfigure::kSendBufferLowWatermarkFieldNumber;
const int DownloadConfigure::kSendBufferWatermarkFieldNumber;
const int DownloadConfigure::kSendSocketBufferSizeFieldNumber;
const int DownloadConfigure::kRecvSocketBufferSizeFieldNumber;
#endif  // !_MSC_VER

DownloadConfigure::DownloadConfigure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DownloadConfigure::InitAsDefaultInstance() {
}

DownloadConfigure::DownloadConfigure(const DownloadConfigure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DownloadConfigure::SharedCtor() {
  _cached_size_ = 0;
  download_timeout_ = 0;
  max_announce_interval_ = 0;
  cluster_thread_num_ = 0;
  java_home_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  class_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  socket_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_stat_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_stat_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_conf_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  upload_limit_ = 0;
  download_limit_ = 0;
  connection_limit_ = 0;
  peers_num_want_ = 0;
  cache_size_ = 0;
  cache_expiry_ = 0;
  file_pool_size_ = 0;
  max_metadata_size_ = 0;
  seeding_announce_interval_ = 0;
  min_reconnect_time_ = 0;
  peer_connect_timeout_ = 0;
  read_cache_line_size_ = 0;
  write_cache_line_size_ = 0;
  lock_disk_cache_ = false;
  suggest_mode_ = false;
  max_queued_disk_bytes_ = 0;
  max_out_request_queue_ = 0;
  max_allowed_in_request_queue_ = 0;
  whole_pieces_threshold_ = 0;
  request_queue_time_ = 0;
  send_buffer_low_watermark_ = 0;
  send_buffer_watermark_ = 0;
  send_socket_buffer_size_ = 0;
  recv_socket_buffer_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DownloadConfigure::~DownloadConfigure() {
  SharedDtor();
}

void DownloadConfigure::SharedDtor() {
  if (java_home_ != &::google::protobuf::internal::kEmptyString) {
    delete java_home_;
  }
  if (class_path_ != &::google::protobuf::internal::kEmptyString) {
    delete class_path_;
  }
  if (socket_file_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_file_;
  }
  if (task_stat_file_ != &::google::protobuf::internal::kEmptyString) {
    delete task_stat_file_;
  }
  if (peer_stat_file_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_stat_file_;
  }
  if (download_log_file_ != &::google::protobuf::internal::kEmptyString) {
    delete download_log_file_;
  }
  if (tracker_conf_file_ != &::google::protobuf::internal::kEmptyString) {
    delete tracker_conf_file_;
  }
  if (this != default_instance_) {
  }
}

void DownloadConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadConfigure_descriptor_;
}

const DownloadConfigure& DownloadConfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();  return *default_instance_;
}

DownloadConfigure* DownloadConfigure::default_instance_ = NULL;

DownloadConfigure* DownloadConfigure::New() const {
  return new DownloadConfigure;
}

void DownloadConfigure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    download_timeout_ = 0;
    max_announce_interval_ = 0;
    cluster_thread_num_ = 0;
    if (has_java_home()) {
      if (java_home_ != &::google::protobuf::internal::kEmptyString) {
        java_home_->clear();
      }
    }
    if (has_class_path()) {
      if (class_path_ != &::google::protobuf::internal::kEmptyString) {
        class_path_->clear();
      }
    }
    if (has_socket_file()) {
      if (socket_file_ != &::google::protobuf::internal::kEmptyString) {
        socket_file_->clear();
      }
    }
    if (has_task_stat_file()) {
      if (task_stat_file_ != &::google::protobuf::internal::kEmptyString) {
        task_stat_file_->clear();
      }
    }
    if (has_peer_stat_file()) {
      if (peer_stat_file_ != &::google::protobuf::internal::kEmptyString) {
        peer_stat_file_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_download_log_file()) {
      if (download_log_file_ != &::google::protobuf::internal::kEmptyString) {
        download_log_file_->clear();
      }
    }
    if (has_tracker_conf_file()) {
      if (tracker_conf_file_ != &::google::protobuf::internal::kEmptyString) {
        tracker_conf_file_->clear();
      }
    }
    upload_limit_ = 0;
    download_limit_ = 0;
    connection_limit_ = 0;
    peers_num_want_ = 0;
    cache_size_ = 0;
    cache_expiry_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    file_pool_size_ = 0;
    max_metadata_size_ = 0;
    seeding_announce_interval_ = 0;
    min_reconnect_time_ = 0;
    peer_connect_timeout_ = 0;
    read_cache_line_size_ = 0;
    write_cache_line_size_ = 0;
    lock_disk_cache_ = false;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    suggest_mode_ = false;
    max_queued_disk_bytes_ = 0;
    max_out_request_queue_ = 0;
    max_allowed_in_request_queue_ = 0;
    whole_pieces_threshold_ = 0;
    request_queue_time_ = 0;
    send_buffer_low_watermark_ = 0;
    send_buffer_watermark_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    send_socket_buffer_size_ = 0;
    recv_socket_buffer_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DownloadConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 download_timeout = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_timeout_)));
          set_has_download_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_max_announce_interval;
        break;
      }
      
      // optional int32 max_announce_interval = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_announce_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_announce_interval_)));
          set_has_max_announce_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cluster_thread_num;
        break;
      }
      
      // optional int32 cluster_thread_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cluster_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_thread_num_)));
          set_has_cluster_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_java_home;
        break;
      }
      
      // optional string java_home = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_java_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_java_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->java_home().data(), this->java_home().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_class_path;
        break;
      }
      
      // optional string class_path = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_class_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->class_path().data(), this->class_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_socket_file;
        break;
      }
      
      // optional string socket_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_file().data(), this->socket_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_stat_file;
        break;
      }
      
      // optional string task_stat_file = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_stat_file().data(), this->task_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_peer_stat_file;
        break;
      }
      
      // optional string peer_stat_file = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_stat_file().data(), this->peer_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_download_log_file;
        break;
      }
      
      // optional string download_log_file = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_log_file().data(), this->download_log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tracker_conf_file;
        break;
      }
      
      // optional string tracker_conf_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tracker_conf_file().data(), this->tracker_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_upload_limit;
        break;
      }
      
      // optional int32 upload_limit = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
          set_has_upload_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_download_limit;
        break;
      }
      
      // optional int32 download_limit = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
          set_has_download_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_connection_limit;
        break;
      }
      
      // optional int32 connection_limit = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_limit_)));
          set_has_connection_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_peers_num_want;
        break;
      }
      
      // optional int32 peers_num_want = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peers_num_want:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peers_num_want_)));
          set_has_peers_num_want();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_cache_size;
        break;
      }
      
      // optional int32 cache_size = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
          set_has_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_cache_expiry;
        break;
      }
      
      // optional int32 cache_expiry = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_expiry_)));
          set_has_cache_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_file_pool_size;
        break;
      }
      
      // optional int32 file_pool_size = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_pool_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_pool_size_)));
          set_has_file_pool_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_max_metadata_size;
        break;
      }
      
      // optional int32 max_metadata_size = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_metadata_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_metadata_size_)));
          set_has_max_metadata_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_seeding_announce_interval;
        break;
      }
      
      // optional int32 seeding_announce_interval = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seeding_announce_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_announce_interval_)));
          set_has_seeding_announce_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_min_reconnect_time;
        break;
      }
      
      // optional int32 min_reconnect_time = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_reconnect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reconnect_time_)));
          set_has_min_reconnect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_peer_connect_timeout;
        break;
      }
      
      // optional int32 peer_connect_timeout = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peer_connect_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_connect_timeout_)));
          set_has_peer_connect_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_read_cache_line_size;
        break;
      }
      
      // optional int32 read_cache_line_size = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_cache_line_size_)));
          set_has_read_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_write_cache_line_size;
        break;
      }
      
      // optional int32 write_cache_line_size = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_cache_line_size_)));
          set_has_write_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_lock_disk_cache;
        break;
      }
      
      // optional bool lock_disk_cache = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_disk_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_disk_cache_)));
          set_has_lock_disk_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_suggest_mode;
        break;
      }
      
      // optional bool suggest_mode = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suggest_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_mode_)));
          set_has_suggest_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_max_queued_disk_bytes;
        break;
      }
      
      // optional int32 max_queued_disk_bytes = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_queued_disk_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queued_disk_bytes_)));
          set_has_max_queued_disk_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_max_out_request_queue;
        break;
      }
      
      // optional int32 max_out_request_queue = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_out_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_out_request_queue_)));
          set_has_max_out_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_max_allowed_in_request_queue;
        break;
      }
      
      // optional int32 max_allowed_in_request_queue = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_allowed_in_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_in_request_queue_)));
          set_has_max_allowed_in_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_whole_pieces_threshold;
        break;
      }
      
      // optional int32 whole_pieces_threshold = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whole_pieces_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whole_pieces_threshold_)));
          set_has_whole_pieces_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_request_queue_time;
        break;
      }
      
      // optional int32 request_queue_time = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_queue_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_queue_time_)));
          set_has_request_queue_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_send_buffer_low_watermark;
        break;
      }
      
      // optional int32 send_buffer_low_watermark = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_low_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_low_watermark_)));
          set_has_send_buffer_low_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_send_buffer_watermark;
        break;
      }
      
      // optional int32 send_buffer_watermark = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_watermark_)));
          set_has_send_buffer_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_send_socket_buffer_size;
        break;
      }
      
      // optional int32 send_socket_buffer_size = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_socket_buffer_size_)));
          set_has_send_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_recv_socket_buffer_size;
        break;
      }
      
      // optional int32 recv_socket_buffer_size = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_socket_buffer_size_)));
          set_has_recv_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DownloadConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 download_timeout = 1;
  if (has_download_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->download_timeout(), output);
  }
  
  // optional int32 max_announce_interval = 2;
  if (has_max_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_announce_interval(), output);
  }
  
  // optional int32 cluster_thread_num = 3;
  if (has_cluster_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cluster_thread_num(), output);
  }
  
  // optional string java_home = 4;
  if (has_java_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->java_home().data(), this->java_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->java_home(), output);
  }
  
  // optional string class_path = 5;
  if (has_class_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_path().data(), this->class_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->class_path(), output);
  }
  
  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->socket_file(), output);
  }
  
  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->task_stat_file(), output);
  }
  
  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->peer_stat_file(), output);
  }
  
  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->download_log_file(), output);
  }
  
  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tracker_conf_file(), output);
  }
  
  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->upload_limit(), output);
  }
  
  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->download_limit(), output);
  }
  
  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->connection_limit(), output);
  }
  
  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->peers_num_want(), output);
  }
  
  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->cache_size(), output);
  }
  
  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->cache_expiry(), output);
  }
  
  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->file_pool_size(), output);
  }
  
  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->max_metadata_size(), output);
  }
  
  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->seeding_announce_interval(), output);
  }
  
  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->min_reconnect_time(), output);
  }
  
  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->peer_connect_timeout(), output);
  }
  
  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->read_cache_line_size(), output);
  }
  
  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->write_cache_line_size(), output);
  }
  
  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->lock_disk_cache(), output);
  }
  
  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->suggest_mode(), output);
  }
  
  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->max_queued_disk_bytes(), output);
  }
  
  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->max_out_request_queue(), output);
  }
  
  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->max_allowed_in_request_queue(), output);
  }
  
  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->whole_pieces_threshold(), output);
  }
  
  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->request_queue_time(), output);
  }
  
  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->send_buffer_low_watermark(), output);
  }
  
  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->send_buffer_watermark(), output);
  }
  
  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->send_socket_buffer_size(), output);
  }
  
  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->recv_socket_buffer_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DownloadConfigure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 download_timeout = 1;
  if (has_download_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->download_timeout(), target);
  }
  
  // optional int32 max_announce_interval = 2;
  if (has_max_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_announce_interval(), target);
  }
  
  // optional int32 cluster_thread_num = 3;
  if (has_cluster_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cluster_thread_num(), target);
  }
  
  // optional string java_home = 4;
  if (has_java_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->java_home().data(), this->java_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->java_home(), target);
  }
  
  // optional string class_path = 5;
  if (has_class_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->class_path().data(), this->class_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->class_path(), target);
  }
  
  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->socket_file(), target);
  }
  
  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_stat_file(), target);
  }
  
  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->peer_stat_file(), target);
  }
  
  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->download_log_file(), target);
  }
  
  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tracker_conf_file(), target);
  }
  
  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->upload_limit(), target);
  }
  
  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->download_limit(), target);
  }
  
  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->connection_limit(), target);
  }
  
  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->peers_num_want(), target);
  }
  
  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->cache_size(), target);
  }
  
  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->cache_expiry(), target);
  }
  
  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->file_pool_size(), target);
  }
  
  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->max_metadata_size(), target);
  }
  
  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->seeding_announce_interval(), target);
  }
  
  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->min_reconnect_time(), target);
  }
  
  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->peer_connect_timeout(), target);
  }
  
  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->read_cache_line_size(), target);
  }
  
  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->write_cache_line_size(), target);
  }
  
  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->lock_disk_cache(), target);
  }
  
  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->suggest_mode(), target);
  }
  
  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->max_queued_disk_bytes(), target);
  }
  
  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->max_out_request_queue(), target);
  }
  
  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->max_allowed_in_request_queue(), target);
  }
  
  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->whole_pieces_threshold(), target);
  }
  
  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->request_queue_time(), target);
  }
  
  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->send_buffer_low_watermark(), target);
  }
  
  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->send_buffer_watermark(), target);
  }
  
  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->send_socket_buffer_size(), target);
  }
  
  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->recv_socket_buffer_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DownloadConfigure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 download_timeout = 1;
    if (has_download_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_timeout());
    }
    
    // optional int32 max_announce_interval = 2;
    if (has_max_announce_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_announce_interval());
    }
    
    // optional int32 cluster_thread_num = 3;
    if (has_cluster_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_thread_num());
    }
    
    // optional string java_home = 4;
    if (has_java_home()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->java_home());
    }
    
    // optional string class_path = 5;
    if (has_class_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_path());
    }
    
    // optional string socket_file = 6;
    if (has_socket_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_file());
    }
    
    // optional string task_stat_file = 7;
    if (has_task_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_stat_file());
    }
    
    // optional string peer_stat_file = 8;
    if (has_peer_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_stat_file());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string download_log_file = 9;
    if (has_download_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_log_file());
    }
    
    // optional string tracker_conf_file = 10;
    if (has_tracker_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_conf_file());
    }
    
    // optional int32 upload_limit = 51;
    if (has_upload_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }
    
    // optional int32 download_limit = 52;
    if (has_download_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }
    
    // optional int32 connection_limit = 53;
    if (has_connection_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_limit());
    }
    
    // optional int32 peers_num_want = 54;
    if (has_peers_num_want()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peers_num_want());
    }
    
    // optional int32 cache_size = 56;
    if (has_cache_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }
    
    // optional int32 cache_expiry = 57;
    if (has_cache_expiry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_expiry());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 file_pool_size = 58;
    if (has_file_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_pool_size());
    }
    
    // optional int32 max_metadata_size = 59;
    if (has_max_metadata_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_metadata_size());
    }
    
    // optional int32 seeding_announce_interval = 60;
    if (has_seeding_announce_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_announce_interval());
    }
    
    // optional int32 min_reconnect_time = 61;
    if (has_min_reconnect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reconnect_time());
    }
    
    // optional int32 peer_connect_timeout = 62;
    if (has_peer_connect_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_connect_timeout());
    }
    
    // optional int32 read_cache_line_size = 63;
    if (has_read_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_cache_line_size());
    }
    
    // optional int32 write_cache_line_size = 64;
    if (has_write_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_cache_line_size());
    }
    
    // optional bool lock_disk_cache = 65;
    if (has_lock_disk_cache()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional bool suggest_mode = 66;
    if (has_suggest_mode()) {
      total_size += 2 + 1;
    }
    
    // optional int32 max_queued_disk_bytes = 67;
    if (has_max_queued_disk_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queued_disk_bytes());
    }
    
    // optional int32 max_out_request_queue = 68;
    if (has_max_out_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_out_request_queue());
    }
    
    // optional int32 max_allowed_in_request_queue = 69;
    if (has_max_allowed_in_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_in_request_queue());
    }
    
    // optional int32 whole_pieces_threshold = 70;
    if (has_whole_pieces_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whole_pieces_threshold());
    }
    
    // optional int32 request_queue_time = 71;
    if (has_request_queue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_queue_time());
    }
    
    // optional int32 send_buffer_low_watermark = 72;
    if (has_send_buffer_low_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_low_watermark());
    }
    
    // optional int32 send_buffer_watermark = 73;
    if (has_send_buffer_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_watermark());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 send_socket_buffer_size = 74;
    if (has_send_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_socket_buffer_size());
    }
    
    // optional int32 recv_socket_buffer_size = 75;
    if (has_recv_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_socket_buffer_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadConfigure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DownloadConfigure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DownloadConfigure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DownloadConfigure::MergeFrom(const DownloadConfigure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_timeout()) {
      set_download_timeout(from.download_timeout());
    }
    if (from.has_max_announce_interval()) {
      set_max_announce_interval(from.max_announce_interval());
    }
    if (from.has_cluster_thread_num()) {
      set_cluster_thread_num(from.cluster_thread_num());
    }
    if (from.has_java_home()) {
      set_java_home(from.java_home());
    }
    if (from.has_class_path()) {
      set_class_path(from.class_path());
    }
    if (from.has_socket_file()) {
      set_socket_file(from.socket_file());
    }
    if (from.has_task_stat_file()) {
      set_task_stat_file(from.task_stat_file());
    }
    if (from.has_peer_stat_file()) {
      set_peer_stat_file(from.peer_stat_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_download_log_file()) {
      set_download_log_file(from.download_log_file());
    }
    if (from.has_tracker_conf_file()) {
      set_tracker_conf_file(from.tracker_conf_file());
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_connection_limit()) {
      set_connection_limit(from.connection_limit());
    }
    if (from.has_peers_num_want()) {
      set_peers_num_want(from.peers_num_want());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_cache_expiry()) {
      set_cache_expiry(from.cache_expiry());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_file_pool_size()) {
      set_file_pool_size(from.file_pool_size());
    }
    if (from.has_max_metadata_size()) {
      set_max_metadata_size(from.max_metadata_size());
    }
    if (from.has_seeding_announce_interval()) {
      set_seeding_announce_interval(from.seeding_announce_interval());
    }
    if (from.has_min_reconnect_time()) {
      set_min_reconnect_time(from.min_reconnect_time());
    }
    if (from.has_peer_connect_timeout()) {
      set_peer_connect_timeout(from.peer_connect_timeout());
    }
    if (from.has_read_cache_line_size()) {
      set_read_cache_line_size(from.read_cache_line_size());
    }
    if (from.has_write_cache_line_size()) {
      set_write_cache_line_size(from.write_cache_line_size());
    }
    if (from.has_lock_disk_cache()) {
      set_lock_disk_cache(from.lock_disk_cache());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_suggest_mode()) {
      set_suggest_mode(from.suggest_mode());
    }
    if (from.has_max_queued_disk_bytes()) {
      set_max_queued_disk_bytes(from.max_queued_disk_bytes());
    }
    if (from.has_max_out_request_queue()) {
      set_max_out_request_queue(from.max_out_request_queue());
    }
    if (from.has_max_allowed_in_request_queue()) {
      set_max_allowed_in_request_queue(from.max_allowed_in_request_queue());
    }
    if (from.has_whole_pieces_threshold()) {
      set_whole_pieces_threshold(from.whole_pieces_threshold());
    }
    if (from.has_request_queue_time()) {
      set_request_queue_time(from.request_queue_time());
    }
    if (from.has_send_buffer_low_watermark()) {
      set_send_buffer_low_watermark(from.send_buffer_low_watermark());
    }
    if (from.has_send_buffer_watermark()) {
      set_send_buffer_watermark(from.send_buffer_watermark());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_send_socket_buffer_size()) {
      set_send_socket_buffer_size(from.send_socket_buffer_size());
    }
    if (from.has_recv_socket_buffer_size()) {
      set_recv_socket_buffer_size(from.recv_socket_buffer_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DownloadConfigure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadConfigure::CopyFrom(const DownloadConfigure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadConfigure::IsInitialized() const {
  
  return true;
}

void DownloadConfigure::Swap(DownloadConfigure* other) {
  if (other != this) {
    std::swap(download_timeout_, other->download_timeout_);
    std::swap(max_announce_interval_, other->max_announce_interval_);
    std::swap(cluster_thread_num_, other->cluster_thread_num_);
    std::swap(java_home_, other->java_home_);
    std::swap(class_path_, other->class_path_);
    std::swap(socket_file_, other->socket_file_);
    std::swap(task_stat_file_, other->task_stat_file_);
    std::swap(peer_stat_file_, other->peer_stat_file_);
    std::swap(download_log_file_, other->download_log_file_);
    std::swap(tracker_conf_file_, other->tracker_conf_file_);
    std::swap(upload_limit_, other->upload_limit_);
    std::swap(download_limit_, other->download_limit_);
    std::swap(connection_limit_, other->connection_limit_);
    std::swap(peers_num_want_, other->peers_num_want_);
    std::swap(cache_size_, other->cache_size_);
    std::swap(cache_expiry_, other->cache_expiry_);
    std::swap(file_pool_size_, other->file_pool_size_);
    std::swap(max_metadata_size_, other->max_metadata_size_);
    std::swap(seeding_announce_interval_, other->seeding_announce_interval_);
    std::swap(min_reconnect_time_, other->min_reconnect_time_);
    std::swap(peer_connect_timeout_, other->peer_connect_timeout_);
    std::swap(read_cache_line_size_, other->read_cache_line_size_);
    std::swap(write_cache_line_size_, other->write_cache_line_size_);
    std::swap(lock_disk_cache_, other->lock_disk_cache_);
    std::swap(suggest_mode_, other->suggest_mode_);
    std::swap(max_queued_disk_bytes_, other->max_queued_disk_bytes_);
    std::swap(max_out_request_queue_, other->max_out_request_queue_);
    std::swap(max_allowed_in_request_queue_, other->max_allowed_in_request_queue_);
    std::swap(whole_pieces_threshold_, other->whole_pieces_threshold_);
    std::swap(request_queue_time_, other->request_queue_time_);
    std::swap(send_buffer_low_watermark_, other->send_buffer_low_watermark_);
    std::swap(send_buffer_watermark_, other->send_buffer_watermark_);
    std::swap(send_socket_buffer_size_, other->send_socket_buffer_size_);
    std::swap(recv_socket_buffer_size_, other->recv_socket_buffer_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DownloadConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadConfigure_descriptor_;
  metadata.reflection = DownloadConfigure_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AgentConfigure::kWorkingDirFieldNumber;
const int AgentConfigure::kDynamicConfFileFieldNumber;
const int AgentConfigure::kResumeDirFieldNumber;
const int AgentConfigure::kLockFileFieldNumber;
const int AgentConfigure::kDatabaseFileFieldNumber;
const int AgentConfigure::kSocketFileFieldNumber;
const int AgentConfigure::kTaskStatFileFieldNumber;
const int AgentConfigure::kPeerStatFileFieldNumber;
const int AgentConfigure::kDownloadLogFileFieldNumber;
const int AgentConfigure::kTrackerConfFileFieldNumber;
const int AgentConfigure::kListenPortFieldNumber;
const int AgentConfigure::kWorkerThreadNumFieldNumber;
const int AgentConfigure::kDbDelIntervalFieldNumber;
const int AgentConfigure::kActiveSeedsFieldNumber;
const int AgentConfigure::kMaxTotalMetaNumFieldNumber;
const int AgentConfigure::kMaxTotalMetaSizeFieldNumber;
const int AgentConfigure::kUploadLimitFieldNumber;
const int AgentConfigure::kDownloadLimitFieldNumber;
const int AgentConfigure::kConnectionLimitFieldNumber;
const int AgentConfigure::kPeersNumWantFieldNumber;
const int AgentConfigure::kDisableOsCacheFieldNumber;
const int AgentConfigure::kCacheSizeFieldNumber;
const int AgentConfigure::kCacheExpiryFieldNumber;
const int AgentConfigure::kFilePoolSizeFieldNumber;
const int AgentConfigure::kMaxMetadataSizeFieldNumber;
const int AgentConfigure::kSeedingAnnounceIntervalFieldNumber;
const int AgentConfigure::kMinReconnectTimeFieldNumber;
const int AgentConfigure::kPeerConnectTimeoutFieldNumber;
const int AgentConfigure::kReadCacheLineSizeFieldNumber;
const int AgentConfigure::kWriteCacheLineSizeFieldNumber;
const int AgentConfigure::kLockDiskCacheFieldNumber;
const int AgentConfigure::kSuggestModeFieldNumber;
const int AgentConfigure::kMaxQueuedDiskBytesFieldNumber;
const int AgentConfigure::kMaxOutRequestQueueFieldNumber;
const int AgentConfigure::kMaxAllowedInRequestQueueFieldNumber;
const int AgentConfigure::kWholePiecesThresholdFieldNumber;
const int AgentConfigure::kRequestQueueTimeFieldNumber;
const int AgentConfigure::kSendBufferLowWatermarkFieldNumber;
const int AgentConfigure::kSendBufferWatermarkFieldNumber;
const int AgentConfigure::kSendSocketBufferSizeFieldNumber;
const int AgentConfigure::kRecvSocketBufferSizeFieldNumber;
#endif  // !_MSC_VER

AgentConfigure::AgentConfigure()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AgentConfigure::InitAsDefaultInstance() {
}

AgentConfigure::AgentConfigure(const AgentConfigure& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AgentConfigure::SharedCtor() {
  _cached_size_ = 0;
  working_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dynamic_conf_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resume_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lock_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  socket_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  task_stat_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  peer_stat_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  download_log_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tracker_conf_file_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  listen_port_ = 0;
  worker_thread_num_ = 0;
  db_del_interval_ = 0;
  active_seeds_ = 0;
  max_total_meta_num_ = 0;
  max_total_meta_size_ = 0;
  upload_limit_ = 0;
  download_limit_ = 0;
  connection_limit_ = 0;
  peers_num_want_ = 0;
  disable_os_cache_ = false;
  cache_size_ = 0;
  cache_expiry_ = 0;
  file_pool_size_ = 0;
  max_metadata_size_ = 0;
  seeding_announce_interval_ = 0;
  min_reconnect_time_ = 0;
  peer_connect_timeout_ = 0;
  read_cache_line_size_ = 0;
  write_cache_line_size_ = 0;
  lock_disk_cache_ = false;
  suggest_mode_ = false;
  max_queued_disk_bytes_ = 0;
  max_out_request_queue_ = 0;
  max_allowed_in_request_queue_ = 0;
  whole_pieces_threshold_ = 0;
  request_queue_time_ = 0;
  send_buffer_low_watermark_ = 0;
  send_buffer_watermark_ = 0;
  send_socket_buffer_size_ = 0;
  recv_socket_buffer_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AgentConfigure::~AgentConfigure() {
  SharedDtor();
}

void AgentConfigure::SharedDtor() {
  if (working_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete working_dir_;
  }
  if (dynamic_conf_file_ != &::google::protobuf::internal::kEmptyString) {
    delete dynamic_conf_file_;
  }
  if (resume_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete resume_dir_;
  }
  if (lock_file_ != &::google::protobuf::internal::kEmptyString) {
    delete lock_file_;
  }
  if (database_file_ != &::google::protobuf::internal::kEmptyString) {
    delete database_file_;
  }
  if (socket_file_ != &::google::protobuf::internal::kEmptyString) {
    delete socket_file_;
  }
  if (task_stat_file_ != &::google::protobuf::internal::kEmptyString) {
    delete task_stat_file_;
  }
  if (peer_stat_file_ != &::google::protobuf::internal::kEmptyString) {
    delete peer_stat_file_;
  }
  if (download_log_file_ != &::google::protobuf::internal::kEmptyString) {
    delete download_log_file_;
  }
  if (tracker_conf_file_ != &::google::protobuf::internal::kEmptyString) {
    delete tracker_conf_file_;
  }
  if (this != default_instance_) {
  }
}

void AgentConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentConfigure_descriptor_;
}

const AgentConfigure& AgentConfigure::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_configure_2eproto();  return *default_instance_;
}

AgentConfigure* AgentConfigure::default_instance_ = NULL;

AgentConfigure* AgentConfigure::New() const {
  return new AgentConfigure;
}

void AgentConfigure::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_working_dir()) {
      if (working_dir_ != &::google::protobuf::internal::kEmptyString) {
        working_dir_->clear();
      }
    }
    if (has_dynamic_conf_file()) {
      if (dynamic_conf_file_ != &::google::protobuf::internal::kEmptyString) {
        dynamic_conf_file_->clear();
      }
    }
    if (has_resume_dir()) {
      if (resume_dir_ != &::google::protobuf::internal::kEmptyString) {
        resume_dir_->clear();
      }
    }
    if (has_lock_file()) {
      if (lock_file_ != &::google::protobuf::internal::kEmptyString) {
        lock_file_->clear();
      }
    }
    if (has_database_file()) {
      if (database_file_ != &::google::protobuf::internal::kEmptyString) {
        database_file_->clear();
      }
    }
    if (has_socket_file()) {
      if (socket_file_ != &::google::protobuf::internal::kEmptyString) {
        socket_file_->clear();
      }
    }
    if (has_task_stat_file()) {
      if (task_stat_file_ != &::google::protobuf::internal::kEmptyString) {
        task_stat_file_->clear();
      }
    }
    if (has_peer_stat_file()) {
      if (peer_stat_file_ != &::google::protobuf::internal::kEmptyString) {
        peer_stat_file_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_download_log_file()) {
      if (download_log_file_ != &::google::protobuf::internal::kEmptyString) {
        download_log_file_->clear();
      }
    }
    if (has_tracker_conf_file()) {
      if (tracker_conf_file_ != &::google::protobuf::internal::kEmptyString) {
        tracker_conf_file_->clear();
      }
    }
    listen_port_ = 0;
    worker_thread_num_ = 0;
    db_del_interval_ = 0;
    active_seeds_ = 0;
    max_total_meta_num_ = 0;
    max_total_meta_size_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    upload_limit_ = 0;
    download_limit_ = 0;
    connection_limit_ = 0;
    peers_num_want_ = 0;
    disable_os_cache_ = false;
    cache_size_ = 0;
    cache_expiry_ = 0;
    file_pool_size_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    max_metadata_size_ = 0;
    seeding_announce_interval_ = 0;
    min_reconnect_time_ = 0;
    peer_connect_timeout_ = 0;
    read_cache_line_size_ = 0;
    write_cache_line_size_ = 0;
    lock_disk_cache_ = false;
    suggest_mode_ = false;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    max_queued_disk_bytes_ = 0;
    max_out_request_queue_ = 0;
    max_allowed_in_request_queue_ = 0;
    whole_pieces_threshold_ = 0;
    request_queue_time_ = 0;
    send_buffer_low_watermark_ = 0;
    send_buffer_watermark_ = 0;
    send_socket_buffer_size_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    recv_socket_buffer_size_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AgentConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string working_dir = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_working_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->working_dir().data(), this->working_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_dynamic_conf_file;
        break;
      }
      
      // optional string dynamic_conf_file = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dynamic_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_resume_dir;
        break;
      }
      
      // optional string resume_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resume_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resume_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resume_dir().data(), this->resume_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_lock_file;
        break;
      }
      
      // optional string lock_file = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lock_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lock_file().data(), this->lock_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_database_file;
        break;
      }
      
      // optional string database_file = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database_file().data(), this->database_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_socket_file;
        break;
      }
      
      // optional string socket_file = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_socket_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->socket_file().data(), this->socket_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_task_stat_file;
        break;
      }
      
      // optional string task_stat_file = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_task_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->task_stat_file().data(), this->task_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_peer_stat_file;
        break;
      }
      
      // optional string peer_stat_file = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_stat_file().data(), this->peer_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_download_log_file;
        break;
      }
      
      // optional string download_log_file = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_download_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->download_log_file().data(), this->download_log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_tracker_conf_file;
        break;
      }
      
      // optional string tracker_conf_file = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tracker_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tracker_conf_file().data(), this->tracker_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_listen_port;
        break;
      }
      
      // optional int32 listen_port = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_worker_thread_num;
        break;
      }
      
      // optional int32 worker_thread_num = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worker_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_thread_num_)));
          set_has_worker_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_db_del_interval;
        break;
      }
      
      // optional int32 db_del_interval = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_db_del_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_del_interval_)));
          set_has_db_del_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_active_seeds;
        break;
      }
      
      // optional int32 active_seeds = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_seeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_seeds_)));
          set_has_active_seeds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_max_total_meta_num;
        break;
      }
      
      // optional int32 max_total_meta_num = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_total_meta_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_meta_num_)));
          set_has_max_total_meta_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_max_total_meta_size;
        break;
      }
      
      // optional int32 max_total_meta_size = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_total_meta_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_meta_size_)));
          set_has_max_total_meta_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_upload_limit;
        break;
      }
      
      // optional int32 upload_limit = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
          set_has_upload_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_download_limit;
        break;
      }
      
      // optional int32 download_limit = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
          set_has_download_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_connection_limit;
        break;
      }
      
      // optional int32 connection_limit = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_limit_)));
          set_has_connection_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_peers_num_want;
        break;
      }
      
      // optional int32 peers_num_want = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peers_num_want:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peers_num_want_)));
          set_has_peers_num_want();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_disable_os_cache;
        break;
      }
      
      // optional bool disable_os_cache = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_os_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_os_cache_)));
          set_has_disable_os_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_cache_size;
        break;
      }
      
      // optional int32 cache_size = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
          set_has_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_cache_expiry;
        break;
      }
      
      // optional int32 cache_expiry = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_expiry_)));
          set_has_cache_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_file_pool_size;
        break;
      }
      
      // optional int32 file_pool_size = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_pool_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_pool_size_)));
          set_has_file_pool_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_max_metadata_size;
        break;
      }
      
      // optional int32 max_metadata_size = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_metadata_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_metadata_size_)));
          set_has_max_metadata_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_seeding_announce_interval;
        break;
      }
      
      // optional int32 seeding_announce_interval = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seeding_announce_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_announce_interval_)));
          set_has_seeding_announce_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_min_reconnect_time;
        break;
      }
      
      // optional int32 min_reconnect_time = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_reconnect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reconnect_time_)));
          set_has_min_reconnect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_peer_connect_timeout;
        break;
      }
      
      // optional int32 peer_connect_timeout = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peer_connect_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_connect_timeout_)));
          set_has_peer_connect_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_read_cache_line_size;
        break;
      }
      
      // optional int32 read_cache_line_size = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_cache_line_size_)));
          set_has_read_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_write_cache_line_size;
        break;
      }
      
      // optional int32 write_cache_line_size = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_cache_line_size_)));
          set_has_write_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_lock_disk_cache;
        break;
      }
      
      // optional bool lock_disk_cache = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lock_disk_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_disk_cache_)));
          set_has_lock_disk_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_suggest_mode;
        break;
      }
      
      // optional bool suggest_mode = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suggest_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_mode_)));
          set_has_suggest_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_max_queued_disk_bytes;
        break;
      }
      
      // optional int32 max_queued_disk_bytes = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_queued_disk_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queued_disk_bytes_)));
          set_has_max_queued_disk_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_max_out_request_queue;
        break;
      }
      
      // optional int32 max_out_request_queue = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_out_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_out_request_queue_)));
          set_has_max_out_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_max_allowed_in_request_queue;
        break;
      }
      
      // optional int32 max_allowed_in_request_queue = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_allowed_in_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_in_request_queue_)));
          set_has_max_allowed_in_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_whole_pieces_threshold;
        break;
      }
      
      // optional int32 whole_pieces_threshold = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whole_pieces_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whole_pieces_threshold_)));
          set_has_whole_pieces_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_request_queue_time;
        break;
      }
      
      // optional int32 request_queue_time = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_queue_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_queue_time_)));
          set_has_request_queue_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_send_buffer_low_watermark;
        break;
      }
      
      // optional int32 send_buffer_low_watermark = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_low_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_low_watermark_)));
          set_has_send_buffer_low_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(584)) goto parse_send_buffer_watermark;
        break;
      }
      
      // optional int32 send_buffer_watermark = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_watermark_)));
          set_has_send_buffer_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(592)) goto parse_send_socket_buffer_size;
        break;
      }
      
      // optional int32 send_socket_buffer_size = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_socket_buffer_size_)));
          set_has_send_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(600)) goto parse_recv_socket_buffer_size;
        break;
      }
      
      // optional int32 recv_socket_buffer_size = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_socket_buffer_size_)));
          set_has_recv_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AgentConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string working_dir = 1;
  if (has_working_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->working_dir().data(), this->working_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->working_dir(), output);
  }
  
  // optional string dynamic_conf_file = 2;
  if (has_dynamic_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->dynamic_conf_file(), output);
  }
  
  // optional string resume_dir = 3;
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->resume_dir(), output);
  }
  
  // optional string lock_file = 4;
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->lock_file(), output);
  }
  
  // optional string database_file = 5;
  if (has_database_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_file().data(), this->database_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->database_file(), output);
  }
  
  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->socket_file(), output);
  }
  
  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->task_stat_file(), output);
  }
  
  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->peer_stat_file(), output);
  }
  
  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->download_log_file(), output);
  }
  
  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->tracker_conf_file(), output);
  }
  
  // optional int32 listen_port = 20;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->listen_port(), output);
  }
  
  // optional int32 worker_thread_num = 21;
  if (has_worker_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->worker_thread_num(), output);
  }
  
  // optional int32 db_del_interval = 22;
  if (has_db_del_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->db_del_interval(), output);
  }
  
  // optional int32 active_seeds = 23;
  if (has_active_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->active_seeds(), output);
  }
  
  // optional int32 max_total_meta_num = 24;
  if (has_max_total_meta_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->max_total_meta_num(), output);
  }
  
  // optional int32 max_total_meta_size = 25;
  if (has_max_total_meta_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->max_total_meta_size(), output);
  }
  
  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->upload_limit(), output);
  }
  
  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->download_limit(), output);
  }
  
  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->connection_limit(), output);
  }
  
  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->peers_num_want(), output);
  }
  
  // optional bool disable_os_cache = 55;
  if (has_disable_os_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->disable_os_cache(), output);
  }
  
  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->cache_size(), output);
  }
  
  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->cache_expiry(), output);
  }
  
  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->file_pool_size(), output);
  }
  
  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->max_metadata_size(), output);
  }
  
  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->seeding_announce_interval(), output);
  }
  
  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->min_reconnect_time(), output);
  }
  
  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->peer_connect_timeout(), output);
  }
  
  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->read_cache_line_size(), output);
  }
  
  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->write_cache_line_size(), output);
  }
  
  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->lock_disk_cache(), output);
  }
  
  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->suggest_mode(), output);
  }
  
  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->max_queued_disk_bytes(), output);
  }
  
  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->max_out_request_queue(), output);
  }
  
  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->max_allowed_in_request_queue(), output);
  }
  
  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->whole_pieces_threshold(), output);
  }
  
  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->request_queue_time(), output);
  }
  
  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->send_buffer_low_watermark(), output);
  }
  
  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->send_buffer_watermark(), output);
  }
  
  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->send_socket_buffer_size(), output);
  }
  
  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->recv_socket_buffer_size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AgentConfigure::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string working_dir = 1;
  if (has_working_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->working_dir().data(), this->working_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->working_dir(), target);
  }
  
  // optional string dynamic_conf_file = 2;
  if (has_dynamic_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dynamic_conf_file(), target);
  }
  
  // optional string resume_dir = 3;
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resume_dir(), target);
  }
  
  // optional string lock_file = 4;
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lock_file(), target);
  }
  
  // optional string database_file = 5;
  if (has_database_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database_file().data(), this->database_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->database_file(), target);
  }
  
  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->socket_file(), target);
  }
  
  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_stat_file(), target);
  }
  
  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->peer_stat_file(), target);
  }
  
  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->download_log_file(), target);
  }
  
  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tracker_conf_file(), target);
  }
  
  // optional int32 listen_port = 20;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->listen_port(), target);
  }
  
  // optional int32 worker_thread_num = 21;
  if (has_worker_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->worker_thread_num(), target);
  }
  
  // optional int32 db_del_interval = 22;
  if (has_db_del_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->db_del_interval(), target);
  }
  
  // optional int32 active_seeds = 23;
  if (has_active_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->active_seeds(), target);
  }
  
  // optional int32 max_total_meta_num = 24;
  if (has_max_total_meta_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->max_total_meta_num(), target);
  }
  
  // optional int32 max_total_meta_size = 25;
  if (has_max_total_meta_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->max_total_meta_size(), target);
  }
  
  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->upload_limit(), target);
  }
  
  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->download_limit(), target);
  }
  
  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->connection_limit(), target);
  }
  
  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->peers_num_want(), target);
  }
  
  // optional bool disable_os_cache = 55;
  if (has_disable_os_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->disable_os_cache(), target);
  }
  
  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->cache_size(), target);
  }
  
  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->cache_expiry(), target);
  }
  
  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->file_pool_size(), target);
  }
  
  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->max_metadata_size(), target);
  }
  
  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->seeding_announce_interval(), target);
  }
  
  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->min_reconnect_time(), target);
  }
  
  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->peer_connect_timeout(), target);
  }
  
  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->read_cache_line_size(), target);
  }
  
  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->write_cache_line_size(), target);
  }
  
  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->lock_disk_cache(), target);
  }
  
  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->suggest_mode(), target);
  }
  
  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->max_queued_disk_bytes(), target);
  }
  
  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->max_out_request_queue(), target);
  }
  
  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->max_allowed_in_request_queue(), target);
  }
  
  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->whole_pieces_threshold(), target);
  }
  
  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->request_queue_time(), target);
  }
  
  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->send_buffer_low_watermark(), target);
  }
  
  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->send_buffer_watermark(), target);
  }
  
  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->send_socket_buffer_size(), target);
  }
  
  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->recv_socket_buffer_size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AgentConfigure::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string working_dir = 1;
    if (has_working_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->working_dir());
    }
    
    // optional string dynamic_conf_file = 2;
    if (has_dynamic_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dynamic_conf_file());
    }
    
    // optional string resume_dir = 3;
    if (has_resume_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resume_dir());
    }
    
    // optional string lock_file = 4;
    if (has_lock_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lock_file());
    }
    
    // optional string database_file = 5;
    if (has_database_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_file());
    }
    
    // optional string socket_file = 6;
    if (has_socket_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_file());
    }
    
    // optional string task_stat_file = 7;
    if (has_task_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_stat_file());
    }
    
    // optional string peer_stat_file = 8;
    if (has_peer_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_stat_file());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string download_log_file = 9;
    if (has_download_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_log_file());
    }
    
    // optional string tracker_conf_file = 10;
    if (has_tracker_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_conf_file());
    }
    
    // optional int32 listen_port = 20;
    if (has_listen_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listen_port());
    }
    
    // optional int32 worker_thread_num = 21;
    if (has_worker_thread_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_thread_num());
    }
    
    // optional int32 db_del_interval = 22;
    if (has_db_del_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_del_interval());
    }
    
    // optional int32 active_seeds = 23;
    if (has_active_seeds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_seeds());
    }
    
    // optional int32 max_total_meta_num = 24;
    if (has_max_total_meta_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_total_meta_num());
    }
    
    // optional int32 max_total_meta_size = 25;
    if (has_max_total_meta_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_total_meta_size());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 upload_limit = 51;
    if (has_upload_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }
    
    // optional int32 download_limit = 52;
    if (has_download_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }
    
    // optional int32 connection_limit = 53;
    if (has_connection_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_limit());
    }
    
    // optional int32 peers_num_want = 54;
    if (has_peers_num_want()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peers_num_want());
    }
    
    // optional bool disable_os_cache = 55;
    if (has_disable_os_cache()) {
      total_size += 2 + 1;
    }
    
    // optional int32 cache_size = 56;
    if (has_cache_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }
    
    // optional int32 cache_expiry = 57;
    if (has_cache_expiry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_expiry());
    }
    
    // optional int32 file_pool_size = 58;
    if (has_file_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_pool_size());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 max_metadata_size = 59;
    if (has_max_metadata_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_metadata_size());
    }
    
    // optional int32 seeding_announce_interval = 60;
    if (has_seeding_announce_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_announce_interval());
    }
    
    // optional int32 min_reconnect_time = 61;
    if (has_min_reconnect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reconnect_time());
    }
    
    // optional int32 peer_connect_timeout = 62;
    if (has_peer_connect_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_connect_timeout());
    }
    
    // optional int32 read_cache_line_size = 63;
    if (has_read_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_cache_line_size());
    }
    
    // optional int32 write_cache_line_size = 64;
    if (has_write_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_cache_line_size());
    }
    
    // optional bool lock_disk_cache = 65;
    if (has_lock_disk_cache()) {
      total_size += 2 + 1;
    }
    
    // optional bool suggest_mode = 66;
    if (has_suggest_mode()) {
      total_size += 2 + 1;
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 max_queued_disk_bytes = 67;
    if (has_max_queued_disk_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queued_disk_bytes());
    }
    
    // optional int32 max_out_request_queue = 68;
    if (has_max_out_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_out_request_queue());
    }
    
    // optional int32 max_allowed_in_request_queue = 69;
    if (has_max_allowed_in_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_in_request_queue());
    }
    
    // optional int32 whole_pieces_threshold = 70;
    if (has_whole_pieces_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whole_pieces_threshold());
    }
    
    // optional int32 request_queue_time = 71;
    if (has_request_queue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_queue_time());
    }
    
    // optional int32 send_buffer_low_watermark = 72;
    if (has_send_buffer_low_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_low_watermark());
    }
    
    // optional int32 send_buffer_watermark = 73;
    if (has_send_buffer_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_watermark());
    }
    
    // optional int32 send_socket_buffer_size = 74;
    if (has_send_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_socket_buffer_size());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 recv_socket_buffer_size = 75;
    if (has_recv_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_socket_buffer_size());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentConfigure::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AgentConfigure* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AgentConfigure*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AgentConfigure::MergeFrom(const AgentConfigure& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_working_dir()) {
      set_working_dir(from.working_dir());
    }
    if (from.has_dynamic_conf_file()) {
      set_dynamic_conf_file(from.dynamic_conf_file());
    }
    if (from.has_resume_dir()) {
      set_resume_dir(from.resume_dir());
    }
    if (from.has_lock_file()) {
      set_lock_file(from.lock_file());
    }
    if (from.has_database_file()) {
      set_database_file(from.database_file());
    }
    if (from.has_socket_file()) {
      set_socket_file(from.socket_file());
    }
    if (from.has_task_stat_file()) {
      set_task_stat_file(from.task_stat_file());
    }
    if (from.has_peer_stat_file()) {
      set_peer_stat_file(from.peer_stat_file());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_download_log_file()) {
      set_download_log_file(from.download_log_file());
    }
    if (from.has_tracker_conf_file()) {
      set_tracker_conf_file(from.tracker_conf_file());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
    if (from.has_worker_thread_num()) {
      set_worker_thread_num(from.worker_thread_num());
    }
    if (from.has_db_del_interval()) {
      set_db_del_interval(from.db_del_interval());
    }
    if (from.has_active_seeds()) {
      set_active_seeds(from.active_seeds());
    }
    if (from.has_max_total_meta_num()) {
      set_max_total_meta_num(from.max_total_meta_num());
    }
    if (from.has_max_total_meta_size()) {
      set_max_total_meta_size(from.max_total_meta_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_connection_limit()) {
      set_connection_limit(from.connection_limit());
    }
    if (from.has_peers_num_want()) {
      set_peers_num_want(from.peers_num_want());
    }
    if (from.has_disable_os_cache()) {
      set_disable_os_cache(from.disable_os_cache());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_cache_expiry()) {
      set_cache_expiry(from.cache_expiry());
    }
    if (from.has_file_pool_size()) {
      set_file_pool_size(from.file_pool_size());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_metadata_size()) {
      set_max_metadata_size(from.max_metadata_size());
    }
    if (from.has_seeding_announce_interval()) {
      set_seeding_announce_interval(from.seeding_announce_interval());
    }
    if (from.has_min_reconnect_time()) {
      set_min_reconnect_time(from.min_reconnect_time());
    }
    if (from.has_peer_connect_timeout()) {
      set_peer_connect_timeout(from.peer_connect_timeout());
    }
    if (from.has_read_cache_line_size()) {
      set_read_cache_line_size(from.read_cache_line_size());
    }
    if (from.has_write_cache_line_size()) {
      set_write_cache_line_size(from.write_cache_line_size());
    }
    if (from.has_lock_disk_cache()) {
      set_lock_disk_cache(from.lock_disk_cache());
    }
    if (from.has_suggest_mode()) {
      set_suggest_mode(from.suggest_mode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_queued_disk_bytes()) {
      set_max_queued_disk_bytes(from.max_queued_disk_bytes());
    }
    if (from.has_max_out_request_queue()) {
      set_max_out_request_queue(from.max_out_request_queue());
    }
    if (from.has_max_allowed_in_request_queue()) {
      set_max_allowed_in_request_queue(from.max_allowed_in_request_queue());
    }
    if (from.has_whole_pieces_threshold()) {
      set_whole_pieces_threshold(from.whole_pieces_threshold());
    }
    if (from.has_request_queue_time()) {
      set_request_queue_time(from.request_queue_time());
    }
    if (from.has_send_buffer_low_watermark()) {
      set_send_buffer_low_watermark(from.send_buffer_low_watermark());
    }
    if (from.has_send_buffer_watermark()) {
      set_send_buffer_watermark(from.send_buffer_watermark());
    }
    if (from.has_send_socket_buffer_size()) {
      set_send_socket_buffer_size(from.send_socket_buffer_size());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_recv_socket_buffer_size()) {
      set_recv_socket_buffer_size(from.recv_socket_buffer_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AgentConfigure::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfigure::CopyFrom(const AgentConfigure& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AgentConfigure::IsInitialized() const {
  
  return true;
}

void AgentConfigure::Swap(AgentConfigure* other) {
  if (other != this) {
    std::swap(working_dir_, other->working_dir_);
    std::swap(dynamic_conf_file_, other->dynamic_conf_file_);
    std::swap(resume_dir_, other->resume_dir_);
    std::swap(lock_file_, other->lock_file_);
    std::swap(database_file_, other->database_file_);
    std::swap(socket_file_, other->socket_file_);
    std::swap(task_stat_file_, other->task_stat_file_);
    std::swap(peer_stat_file_, other->peer_stat_file_);
    std::swap(download_log_file_, other->download_log_file_);
    std::swap(tracker_conf_file_, other->tracker_conf_file_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(worker_thread_num_, other->worker_thread_num_);
    std::swap(db_del_interval_, other->db_del_interval_);
    std::swap(active_seeds_, other->active_seeds_);
    std::swap(max_total_meta_num_, other->max_total_meta_num_);
    std::swap(max_total_meta_size_, other->max_total_meta_size_);
    std::swap(upload_limit_, other->upload_limit_);
    std::swap(download_limit_, other->download_limit_);
    std::swap(connection_limit_, other->connection_limit_);
    std::swap(peers_num_want_, other->peers_num_want_);
    std::swap(disable_os_cache_, other->disable_os_cache_);
    std::swap(cache_size_, other->cache_size_);
    std::swap(cache_expiry_, other->cache_expiry_);
    std::swap(file_pool_size_, other->file_pool_size_);
    std::swap(max_metadata_size_, other->max_metadata_size_);
    std::swap(seeding_announce_interval_, other->seeding_announce_interval_);
    std::swap(min_reconnect_time_, other->min_reconnect_time_);
    std::swap(peer_connect_timeout_, other->peer_connect_timeout_);
    std::swap(read_cache_line_size_, other->read_cache_line_size_);
    std::swap(write_cache_line_size_, other->write_cache_line_size_);
    std::swap(lock_disk_cache_, other->lock_disk_cache_);
    std::swap(suggest_mode_, other->suggest_mode_);
    std::swap(max_queued_disk_bytes_, other->max_queued_disk_bytes_);
    std::swap(max_out_request_queue_, other->max_out_request_queue_);
    std::swap(max_allowed_in_request_queue_, other->max_allowed_in_request_queue_);
    std::swap(whole_pieces_threshold_, other->whole_pieces_threshold_);
    std::swap(request_queue_time_, other->request_queue_time_);
    std::swap(send_buffer_low_watermark_, other->send_buffer_low_watermark_);
    std::swap(send_buffer_watermark_, other->send_buffer_watermark_);
    std::swap(send_socket_buffer_size_, other->send_socket_buffer_size_);
    std::swap(recv_socket_buffer_size_, other->recv_socket_buffer_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AgentConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentConfigure_descriptor_;
  metadata.reflection = AgentConfigure_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
