// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef PROTOBUF_message_2eproto__INCLUDED
#define PROTOBUF_message_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_message_2eproto();
void protobuf_InitDefaults_message_2eproto();
void protobuf_AssignDesc_message_2eproto();
void protobuf_ShutdownFile_message_2eproto();

class AddTask;
class AgentOptions;
class BaseRes;
class BatchCtrl;
class BatchCtrlRes;
class BatchListRes;
class Host;
class Metadata;
class Task;
class TaskOptions;
class TaskRes;
class TaskStatus;

enum TaskStatus_status_t {
  TaskStatus_status_t_UNKNOW = 0,
  TaskStatus_status_t_ERROR = 1,
  TaskStatus_status_t_CHECKQ = 2,
  TaskStatus_status_t_CHECKING = 3,
  TaskStatus_status_t_DTORRENT = 4,
  TaskStatus_status_t_DOWNLOAD = 5,
  TaskStatus_status_t_PAUSED = 6,
  TaskStatus_status_t_SEEDING = 7,
  TaskStatus_status_t_FINISHED = 8,
  TaskStatus_status_t_CANCELED = 9
};
bool TaskStatus_status_t_IsValid(int value);
const TaskStatus_status_t TaskStatus_status_t_status_t_MIN = TaskStatus_status_t_UNKNOW;
const TaskStatus_status_t TaskStatus_status_t_status_t_MAX = TaskStatus_status_t_CANCELED;
const int TaskStatus_status_t_status_t_ARRAYSIZE = TaskStatus_status_t_status_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor();
inline const ::std::string& TaskStatus_status_t_Name(TaskStatus_status_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskStatus_status_t_descriptor(), value);
}
inline bool TaskStatus_status_t_Parse(
    const ::std::string& name, TaskStatus_status_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskStatus_status_t>(
    TaskStatus_status_t_descriptor(), name, value);
}
enum BatchCtrl_ctrl_t {
  BatchCtrl_ctrl_t_CANCEL = 1,
  BatchCtrl_ctrl_t_PAUSE = 2,
  BatchCtrl_ctrl_t_RESUME = 3,
  BatchCtrl_ctrl_t_LIST = 4
};
bool BatchCtrl_ctrl_t_IsValid(int value);
const BatchCtrl_ctrl_t BatchCtrl_ctrl_t_ctrl_t_MIN = BatchCtrl_ctrl_t_CANCEL;
const BatchCtrl_ctrl_t BatchCtrl_ctrl_t_ctrl_t_MAX = BatchCtrl_ctrl_t_LIST;
const int BatchCtrl_ctrl_t_ctrl_t_ARRAYSIZE = BatchCtrl_ctrl_t_ctrl_t_MAX + 1;

const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor();
inline const ::std::string& BatchCtrl_ctrl_t_Name(BatchCtrl_ctrl_t value) {
  return ::google::protobuf::internal::NameOfEnum(
    BatchCtrl_ctrl_t_descriptor(), value);
}
inline bool BatchCtrl_ctrl_t_Parse(
    const ::std::string& name, BatchCtrl_ctrl_t* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BatchCtrl_ctrl_t>(
    BatchCtrl_ctrl_t_descriptor(), name, value);
}
enum TaskType {
  SEEDING_TASK = 2,
  NOCHECK_TASK = 3
};
bool TaskType_IsValid(int value);
const TaskType TaskType_MIN = SEEDING_TASK;
const TaskType TaskType_MAX = NOCHECK_TASK;
const int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TaskType_descriptor();
inline const ::std::string& TaskType_Name(TaskType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TaskType_descriptor(), value);
}
inline bool TaskType_Parse(
    const ::std::string& name, TaskType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class Host : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.Host) */ {
 public:
  Host();
  virtual ~Host();

  Host(const Host& from);

  inline Host& operator=(const Host& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Host& default_instance();

  static const Host* internal_default_instance();

  void Swap(Host* other);

  // implements Message ----------------------------------------------

  inline Host* New() const { return New(NULL); }

  Host* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Host& from);
  void MergeFrom(const Host& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Host* other);
  void UnsafeMergeFrom(const Host& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string ip = 1;
  bool has_ip() const;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // optional int32 port = 2;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.message.Host)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Host> Host_default_instance_;

// -------------------------------------------------------------------

class TaskOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.TaskOptions) */ {
 public:
  TaskOptions();
  virtual ~TaskOptions();

  TaskOptions(const TaskOptions& from);

  inline TaskOptions& operator=(const TaskOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskOptions& default_instance();

  static const TaskOptions* internal_default_instance();

  void Swap(TaskOptions* other);

  // implements Message ----------------------------------------------

  inline TaskOptions* New() const { return New(NULL); }

  TaskOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskOptions& from);
  void MergeFrom(const TaskOptions& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskOptions* other);
  void UnsafeMergeFrom(const TaskOptions& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 taskid = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  ::google::protobuf::int64 taskid() const;
  void set_taskid(::google::protobuf::int64 value);

  // optional int32 upload_limit = 2;
  bool has_upload_limit() const;
  void clear_upload_limit();
  static const int kUploadLimitFieldNumber = 2;
  ::google::protobuf::int32 upload_limit() const;
  void set_upload_limit(::google::protobuf::int32 value);

  // optional int32 download_limit = 3;
  bool has_download_limit() const;
  void clear_download_limit();
  static const int kDownloadLimitFieldNumber = 3;
  ::google::protobuf::int32 download_limit() const;
  void set_download_limit(::google::protobuf::int32 value);

  // optional int32 max_conections = 4;
  bool has_max_conections() const;
  void clear_max_conections();
  static const int kMaxConectionsFieldNumber = 4;
  ::google::protobuf::int32 max_conections() const;
  void set_max_conections(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.message.TaskOptions)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_upload_limit();
  inline void clear_has_upload_limit();
  inline void set_has_download_limit();
  inline void clear_has_download_limit();
  inline void set_has_max_conections();
  inline void clear_has_max_conections();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int64 taskid_;
  ::google::protobuf::int32 upload_limit_;
  ::google::protobuf::int32 download_limit_;
  ::google::protobuf::int32 max_conections_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskOptions> TaskOptions_default_instance_;

// -------------------------------------------------------------------

class AgentOptions : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.AgentOptions) */ {
 public:
  AgentOptions();
  virtual ~AgentOptions();

  AgentOptions(const AgentOptions& from);

  inline AgentOptions& operator=(const AgentOptions& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AgentOptions& default_instance();

  static const AgentOptions* internal_default_instance();

  void Swap(AgentOptions* other);

  // implements Message ----------------------------------------------

  inline AgentOptions* New() const { return New(NULL); }

  AgentOptions* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AgentOptions& from);
  void MergeFrom(const AgentOptions& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AgentOptions* other);
  void UnsafeMergeFrom(const AgentOptions& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bind_port = 1;
  bool has_bind_port() const;
  void clear_bind_port();
  static const int kBindPortFieldNumber = 1;
  ::google::protobuf::int32 bind_port() const;
  void set_bind_port(::google::protobuf::int32 value);

  // optional int32 upload_limit = 2;
  bool has_upload_limit() const;
  void clear_upload_limit();
  static const int kUploadLimitFieldNumber = 2;
  ::google::protobuf::int32 upload_limit() const;
  void set_upload_limit(::google::protobuf::int32 value);

  // optional int32 max_conections = 4;
  bool has_max_conections() const;
  void clear_max_conections();
  static const int kMaxConectionsFieldNumber = 4;
  ::google::protobuf::int32 max_conections() const;
  void set_max_conections(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.message.AgentOptions)
 private:
  inline void set_has_bind_port();
  inline void clear_has_bind_port();
  inline void set_has_upload_limit();
  inline void clear_has_upload_limit();
  inline void set_has_max_conections();
  inline void clear_has_max_conections();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 bind_port_;
  ::google::protobuf::int32 upload_limit_;
  ::google::protobuf::int32 max_conections_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AgentOptions> AgentOptions_default_instance_;

// -------------------------------------------------------------------

class TaskStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.TaskStatus) */ {
 public:
  TaskStatus();
  virtual ~TaskStatus();

  TaskStatus(const TaskStatus& from);

  inline TaskStatus& operator=(const TaskStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskStatus& default_instance();

  static const TaskStatus* internal_default_instance();

  void Swap(TaskStatus* other);

  // implements Message ----------------------------------------------

  inline TaskStatus* New() const { return New(NULL); }

  TaskStatus* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskStatus& from);
  void MergeFrom(const TaskStatus& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskStatus* other);
  void UnsafeMergeFrom(const TaskStatus& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef TaskStatus_status_t status_t;
  static const status_t UNKNOW =
    TaskStatus_status_t_UNKNOW;
  static const status_t ERROR =
    TaskStatus_status_t_ERROR;
  static const status_t CHECKQ =
    TaskStatus_status_t_CHECKQ;
  static const status_t CHECKING =
    TaskStatus_status_t_CHECKING;
  static const status_t DTORRENT =
    TaskStatus_status_t_DTORRENT;
  static const status_t DOWNLOAD =
    TaskStatus_status_t_DOWNLOAD;
  static const status_t PAUSED =
    TaskStatus_status_t_PAUSED;
  static const status_t SEEDING =
    TaskStatus_status_t_SEEDING;
  static const status_t FINISHED =
    TaskStatus_status_t_FINISHED;
  static const status_t CANCELED =
    TaskStatus_status_t_CANCELED;
  static inline bool status_t_IsValid(int value) {
    return TaskStatus_status_t_IsValid(value);
  }
  static const status_t status_t_MIN =
    TaskStatus_status_t_status_t_MIN;
  static const status_t status_t_MAX =
    TaskStatus_status_t_status_t_MAX;
  static const int status_t_ARRAYSIZE =
    TaskStatus_status_t_status_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_t_descriptor() {
    return TaskStatus_status_t_descriptor();
  }
  static inline const ::std::string& status_t_Name(status_t value) {
    return TaskStatus_status_t_Name(value);
  }
  static inline bool status_t_Parse(const ::std::string& name,
      status_t* value) {
    return TaskStatus_status_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bbts.message.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::bbts::message::Task& task() const;
  ::bbts::message::Task* mutable_task();
  ::bbts::message::Task* release_task();
  void set_allocated_task(::bbts::message::Task* task);

  // optional .bbts.message.TaskStatus.status_t status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::bbts::message::TaskStatus_status_t status() const;
  void set_status(::bbts::message::TaskStatus_status_t value);

  // optional int32 progress = 3;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 3;
  ::google::protobuf::int32 progress() const;
  void set_progress(::google::protobuf::int32 value);

  // optional string error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional int64 total_download = 5;
  bool has_total_download() const;
  void clear_total_download();
  static const int kTotalDownloadFieldNumber = 5;
  ::google::protobuf::int64 total_download() const;
  void set_total_download(::google::protobuf::int64 value);

  // optional int64 total_upload = 6;
  bool has_total_upload() const;
  void clear_total_upload();
  static const int kTotalUploadFieldNumber = 6;
  ::google::protobuf::int64 total_upload() const;
  void set_total_upload(::google::protobuf::int64 value);

  // optional int32 download_rate = 7;
  bool has_download_rate() const;
  void clear_download_rate();
  static const int kDownloadRateFieldNumber = 7;
  ::google::protobuf::int32 download_rate() const;
  void set_download_rate(::google::protobuf::int32 value);

  // optional int32 upload_rate = 8;
  bool has_upload_rate() const;
  void clear_upload_rate();
  static const int kUploadRateFieldNumber = 8;
  ::google::protobuf::int32 upload_rate() const;
  void set_upload_rate(::google::protobuf::int32 value);

  // optional int32 num_peers = 9;
  bool has_num_peers() const;
  void clear_num_peers();
  static const int kNumPeersFieldNumber = 9;
  ::google::protobuf::int32 num_peers() const;
  void set_num_peers(::google::protobuf::int32 value);

  // optional int32 num_seeds = 10;
  bool has_num_seeds() const;
  void clear_num_seeds();
  static const int kNumSeedsFieldNumber = 10;
  ::google::protobuf::int32 num_seeds() const;
  void set_num_seeds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.message.TaskStatus)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_progress();
  inline void clear_has_progress();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_total_download();
  inline void clear_has_total_download();
  inline void set_has_total_upload();
  inline void clear_has_total_upload();
  inline void set_has_download_rate();
  inline void clear_has_download_rate();
  inline void set_has_upload_rate();
  inline void clear_has_upload_rate();
  inline void set_has_num_peers();
  inline void clear_has_num_peers();
  inline void set_has_num_seeds();
  inline void clear_has_num_seeds();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::bbts::message::Task* task_;
  int status_;
  ::google::protobuf::int32 progress_;
  ::google::protobuf::int64 total_download_;
  ::google::protobuf::int64 total_upload_;
  ::google::protobuf::int32 download_rate_;
  ::google::protobuf::int32 upload_rate_;
  ::google::protobuf::int32 num_peers_;
  ::google::protobuf::int32 num_seeds_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskStatus> TaskStatus_default_instance_;

// -------------------------------------------------------------------

class Task : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.Task) */ {
 public:
  Task();
  virtual ~Task();

  Task(const Task& from);

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Task& default_instance();

  static const Task* internal_default_instance();

  void Swap(Task* other);

  // implements Message ----------------------------------------------

  inline Task* New() const { return New(NULL); }

  Task* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Task& from);
  void MergeFrom(const Task& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Task* other);
  void UnsafeMergeFrom(const Task& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 taskid = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  ::google::protobuf::int64 taskid() const;
  void set_taskid(::google::protobuf::int64 value);

  // optional .bbts.message.TaskType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::bbts::message::TaskType type() const;
  void set_type(::bbts::message::TaskType value);

  // optional string infohash = 3;
  bool has_infohash() const;
  void clear_infohash();
  static const int kInfohashFieldNumber = 3;
  const ::std::string& infohash() const;
  void set_infohash(const ::std::string& value);
  void set_infohash(const char* value);
  void set_infohash(const char* value, size_t size);
  ::std::string* mutable_infohash();
  ::std::string* release_infohash();
  void set_allocated_infohash(::std::string* infohash);

  // optional string torrent_path = 4;
  bool has_torrent_path() const;
  void clear_torrent_path();
  static const int kTorrentPathFieldNumber = 4;
  const ::std::string& torrent_path() const;
  void set_torrent_path(const ::std::string& value);
  void set_torrent_path(const char* value);
  void set_torrent_path(const char* value, size_t size);
  ::std::string* mutable_torrent_path();
  ::std::string* release_torrent_path();
  void set_allocated_torrent_path(::std::string* torrent_path);

  // optional bytes data = 5;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 5;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // optional string save_path = 6;
  bool has_save_path() const;
  void clear_save_path();
  static const int kSavePathFieldNumber = 6;
  const ::std::string& save_path() const;
  void set_save_path(const ::std::string& value);
  void set_save_path(const char* value);
  void set_save_path(const char* value, size_t size);
  ::std::string* mutable_save_path();
  ::std::string* release_save_path();
  void set_allocated_save_path(::std::string* save_path);

  // optional string new_name = 7;
  bool has_new_name() const;
  void clear_new_name();
  static const int kNewNameFieldNumber = 7;
  const ::std::string& new_name() const;
  void set_new_name(const ::std::string& value);
  void set_new_name(const char* value);
  void set_new_name(const char* value, size_t size);
  ::std::string* mutable_new_name();
  ::std::string* release_new_name();
  void set_allocated_new_name(::std::string* new_name);

  // repeated .bbts.message.Host trackers = 8;
  int trackers_size() const;
  void clear_trackers();
  static const int kTrackersFieldNumber = 8;
  const ::bbts::message::Host& trackers(int index) const;
  ::bbts::message::Host* mutable_trackers(int index);
  ::bbts::message::Host* add_trackers();
  ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >*
      mutable_trackers();
  const ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >&
      trackers() const;

  // optional string cmd = 20;
  bool has_cmd() const;
  void clear_cmd();
  static const int kCmdFieldNumber = 20;
  const ::std::string& cmd() const;
  void set_cmd(const ::std::string& value);
  void set_cmd(const char* value);
  void set_cmd(const char* value, size_t size);
  ::std::string* mutable_cmd();
  ::std::string* release_cmd();
  void set_allocated_cmd(::std::string* cmd);

  // optional int32 uid = 21;
  bool has_uid() const;
  void clear_uid();
  static const int kUidFieldNumber = 21;
  ::google::protobuf::int32 uid() const;
  void set_uid(::google::protobuf::int32 value);

  // optional int32 gid = 22;
  bool has_gid() const;
  void clear_gid();
  static const int kGidFieldNumber = 22;
  ::google::protobuf::int32 gid() const;
  void set_gid(::google::protobuf::int32 value);

  // optional int32 seeding_time = 25;
  bool has_seeding_time() const;
  void clear_seeding_time();
  static const int kSeedingTimeFieldNumber = 25;
  ::google::protobuf::int32 seeding_time() const;
  void set_seeding_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.message.Task)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_infohash();
  inline void clear_has_infohash();
  inline void set_has_torrent_path();
  inline void clear_has_torrent_path();
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_save_path();
  inline void clear_has_save_path();
  inline void set_has_new_name();
  inline void clear_has_new_name();
  inline void set_has_cmd();
  inline void clear_has_cmd();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_gid();
  inline void clear_has_gid();
  inline void set_has_seeding_time();
  inline void clear_has_seeding_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bbts::message::Host > trackers_;
  ::google::protobuf::internal::ArenaStringPtr infohash_;
  ::google::protobuf::internal::ArenaStringPtr torrent_path_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::internal::ArenaStringPtr save_path_;
  ::google::protobuf::internal::ArenaStringPtr new_name_;
  ::google::protobuf::internal::ArenaStringPtr cmd_;
  ::google::protobuf::int64 taskid_;
  ::google::protobuf::int32 uid_;
  ::google::protobuf::int32 gid_;
  ::google::protobuf::int32 seeding_time_;
  int type_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Task> Task_default_instance_;

// -------------------------------------------------------------------

class AddTask : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.AddTask) */ {
 public:
  AddTask();
  virtual ~AddTask();

  AddTask(const AddTask& from);

  inline AddTask& operator=(const AddTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTask& default_instance();

  static const AddTask* internal_default_instance();

  void Swap(AddTask* other);

  // implements Message ----------------------------------------------

  inline AddTask* New() const { return New(NULL); }

  AddTask* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddTask& from);
  void MergeFrom(const AddTask& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AddTask* other);
  void UnsafeMergeFrom(const AddTask& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .bbts.message.Task task = 1;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 1;
  const ::bbts::message::Task& task() const;
  ::bbts::message::Task* mutable_task();
  ::bbts::message::Task* release_task();
  void set_allocated_task(::bbts::message::Task* task);

  // optional .bbts.message.TaskOptions options = 2;
  bool has_options() const;
  void clear_options();
  static const int kOptionsFieldNumber = 2;
  const ::bbts::message::TaskOptions& options() const;
  ::bbts::message::TaskOptions* mutable_options();
  ::bbts::message::TaskOptions* release_options();
  void set_allocated_options(::bbts::message::TaskOptions* options);

  // @@protoc_insertion_point(class_scope:bbts.message.AddTask)
 private:
  inline void set_has_task();
  inline void clear_has_task();
  inline void set_has_options();
  inline void clear_has_options();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::bbts::message::Task* task_;
  ::bbts::message::TaskOptions* options_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<AddTask> AddTask_default_instance_;

// -------------------------------------------------------------------

class BatchCtrl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.BatchCtrl) */ {
 public:
  BatchCtrl();
  virtual ~BatchCtrl();

  BatchCtrl(const BatchCtrl& from);

  inline BatchCtrl& operator=(const BatchCtrl& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCtrl& default_instance();

  static const BatchCtrl* internal_default_instance();

  void Swap(BatchCtrl* other);

  // implements Message ----------------------------------------------

  inline BatchCtrl* New() const { return New(NULL); }

  BatchCtrl* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchCtrl& from);
  void MergeFrom(const BatchCtrl& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchCtrl* other);
  void UnsafeMergeFrom(const BatchCtrl& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BatchCtrl_ctrl_t ctrl_t;
  static const ctrl_t CANCEL =
    BatchCtrl_ctrl_t_CANCEL;
  static const ctrl_t PAUSE =
    BatchCtrl_ctrl_t_PAUSE;
  static const ctrl_t RESUME =
    BatchCtrl_ctrl_t_RESUME;
  static const ctrl_t LIST =
    BatchCtrl_ctrl_t_LIST;
  static inline bool ctrl_t_IsValid(int value) {
    return BatchCtrl_ctrl_t_IsValid(value);
  }
  static const ctrl_t ctrl_t_MIN =
    BatchCtrl_ctrl_t_ctrl_t_MIN;
  static const ctrl_t ctrl_t_MAX =
    BatchCtrl_ctrl_t_ctrl_t_MAX;
  static const int ctrl_t_ARRAYSIZE =
    BatchCtrl_ctrl_t_ctrl_t_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ctrl_t_descriptor() {
    return BatchCtrl_ctrl_t_descriptor();
  }
  static inline const ::std::string& ctrl_t_Name(ctrl_t value) {
    return BatchCtrl_ctrl_t_Name(value);
  }
  static inline bool ctrl_t_Parse(const ::std::string& name,
      ctrl_t* value) {
    return BatchCtrl_ctrl_t_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  bool has_ctrl_type() const;
  void clear_ctrl_type();
  static const int kCtrlTypeFieldNumber = 1;
  ::bbts::message::BatchCtrl_ctrl_t ctrl_type() const;
  void set_ctrl_type(::bbts::message::BatchCtrl_ctrl_t value);

  // optional bool ctrl_all = 2;
  bool has_ctrl_all() const;
  void clear_ctrl_all();
  static const int kCtrlAllFieldNumber = 2;
  bool ctrl_all() const;
  void set_ctrl_all(bool value);

  // repeated int64 taskids = 3;
  int taskids_size() const;
  void clear_taskids();
  static const int kTaskidsFieldNumber = 3;
  ::google::protobuf::int64 taskids(int index) const;
  void set_taskids(int index, ::google::protobuf::int64 value);
  void add_taskids(::google::protobuf::int64 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      taskids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_taskids();

  // repeated string infohashs = 4;
  int infohashs_size() const;
  void clear_infohashs();
  static const int kInfohashsFieldNumber = 4;
  const ::std::string& infohashs(int index) const;
  ::std::string* mutable_infohashs(int index);
  void set_infohashs(int index, const ::std::string& value);
  void set_infohashs(int index, const char* value);
  void set_infohashs(int index, const char* value, size_t size);
  ::std::string* add_infohashs();
  void add_infohashs(const ::std::string& value);
  void add_infohashs(const char* value);
  void add_infohashs(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& infohashs() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_infohashs();

  // @@protoc_insertion_point(class_scope:bbts.message.BatchCtrl)
 private:
  inline void set_has_ctrl_type();
  inline void clear_has_ctrl_type();
  inline void set_has_ctrl_all();
  inline void clear_has_ctrl_all();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > taskids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> infohashs_;
  bool ctrl_all_;
  int ctrl_type_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BatchCtrl> BatchCtrl_default_instance_;

// -------------------------------------------------------------------

class BaseRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.BaseRes) */ {
 public:
  BaseRes();
  virtual ~BaseRes();

  BaseRes(const BaseRes& from);

  inline BaseRes& operator=(const BaseRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BaseRes& default_instance();

  static const BaseRes* internal_default_instance();

  void Swap(BaseRes* other);

  // implements Message ----------------------------------------------

  inline BaseRes* New() const { return New(NULL); }

  BaseRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BaseRes& from);
  void MergeFrom(const BaseRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BaseRes* other);
  void UnsafeMergeFrom(const BaseRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ret_code = 1;
  bool has_ret_code() const;
  void clear_ret_code();
  static const int kRetCodeFieldNumber = 1;
  ::google::protobuf::int32 ret_code() const;
  void set_ret_code(::google::protobuf::int32 value);

  // optional string fail_msg = 2;
  bool has_fail_msg() const;
  void clear_fail_msg();
  static const int kFailMsgFieldNumber = 2;
  const ::std::string& fail_msg() const;
  void set_fail_msg(const ::std::string& value);
  void set_fail_msg(const char* value);
  void set_fail_msg(const char* value, size_t size);
  ::std::string* mutable_fail_msg();
  ::std::string* release_fail_msg();
  void set_allocated_fail_msg(::std::string* fail_msg);

  // @@protoc_insertion_point(class_scope:bbts.message.BaseRes)
 private:
  inline void set_has_ret_code();
  inline void clear_has_ret_code();
  inline void set_has_fail_msg();
  inline void clear_has_fail_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr fail_msg_;
  ::google::protobuf::int32 ret_code_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BaseRes> BaseRes_default_instance_;

// -------------------------------------------------------------------

class TaskRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.TaskRes) */ {
 public:
  TaskRes();
  virtual ~TaskRes();

  TaskRes(const TaskRes& from);

  inline TaskRes& operator=(const TaskRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskRes& default_instance();

  static const TaskRes* internal_default_instance();

  void Swap(TaskRes* other);

  // implements Message ----------------------------------------------

  inline TaskRes* New() const { return New(NULL); }

  TaskRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TaskRes& from);
  void MergeFrom(const TaskRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TaskRes* other);
  void UnsafeMergeFrom(const TaskRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 taskid = 1;
  bool has_taskid() const;
  void clear_taskid();
  static const int kTaskidFieldNumber = 1;
  ::google::protobuf::int64 taskid() const;
  void set_taskid(::google::protobuf::int64 value);

  // optional .bbts.message.BaseRes res = 2;
  bool has_res() const;
  void clear_res();
  static const int kResFieldNumber = 2;
  const ::bbts::message::BaseRes& res() const;
  ::bbts::message::BaseRes* mutable_res();
  ::bbts::message::BaseRes* release_res();
  void set_allocated_res(::bbts::message::BaseRes* res);

  // @@protoc_insertion_point(class_scope:bbts.message.TaskRes)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_res();
  inline void clear_has_res();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::bbts::message::BaseRes* res_;
  ::google::protobuf::int64 taskid_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TaskRes> TaskRes_default_instance_;

// -------------------------------------------------------------------

class BatchCtrlRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.BatchCtrlRes) */ {
 public:
  BatchCtrlRes();
  virtual ~BatchCtrlRes();

  BatchCtrlRes(const BatchCtrlRes& from);

  inline BatchCtrlRes& operator=(const BatchCtrlRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchCtrlRes& default_instance();

  static const BatchCtrlRes* internal_default_instance();

  void Swap(BatchCtrlRes* other);

  // implements Message ----------------------------------------------

  inline BatchCtrlRes* New() const { return New(NULL); }

  BatchCtrlRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchCtrlRes& from);
  void MergeFrom(const BatchCtrlRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchCtrlRes* other);
  void UnsafeMergeFrom(const BatchCtrlRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bbts.message.TaskRes tasks = 1;
  int tasks_size() const;
  void clear_tasks();
  static const int kTasksFieldNumber = 1;
  const ::bbts::message::TaskRes& tasks(int index) const;
  ::bbts::message::TaskRes* mutable_tasks(int index);
  ::bbts::message::TaskRes* add_tasks();
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >*
      mutable_tasks();
  const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >&
      tasks() const;

  // @@protoc_insertion_point(class_scope:bbts.message.BatchCtrlRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes > tasks_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BatchCtrlRes> BatchCtrlRes_default_instance_;

// -------------------------------------------------------------------

class BatchListRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.BatchListRes) */ {
 public:
  BatchListRes();
  virtual ~BatchListRes();

  BatchListRes(const BatchListRes& from);

  inline BatchListRes& operator=(const BatchListRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BatchListRes& default_instance();

  static const BatchListRes* internal_default_instance();

  void Swap(BatchListRes* other);

  // implements Message ----------------------------------------------

  inline BatchListRes* New() const { return New(NULL); }

  BatchListRes* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BatchListRes& from);
  void MergeFrom(const BatchListRes& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BatchListRes* other);
  void UnsafeMergeFrom(const BatchListRes& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .bbts.message.TaskStatus status = 1;
  int status_size() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  const ::bbts::message::TaskStatus& status(int index) const;
  ::bbts::message::TaskStatus* mutable_status(int index);
  ::bbts::message::TaskStatus* add_status();
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >*
      mutable_status();
  const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >&
      status() const;

  // @@protoc_insertion_point(class_scope:bbts.message.BatchListRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus > status_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<BatchListRes> BatchListRes_default_instance_;

// -------------------------------------------------------------------

class Metadata : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.message.Metadata) */ {
 public:
  Metadata();
  virtual ~Metadata();

  Metadata(const Metadata& from);

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Metadata& default_instance();

  static const Metadata* internal_default_instance();

  void Swap(Metadata* other);

  // implements Message ----------------------------------------------

  inline Metadata* New() const { return New(NULL); }

  Metadata* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metadata* other);
  void UnsafeMergeFrom(const Metadata& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string infohash = 1;
  bool has_infohash() const;
  void clear_infohash();
  static const int kInfohashFieldNumber = 1;
  const ::std::string& infohash() const;
  void set_infohash(const ::std::string& value);
  void set_infohash(const char* value);
  void set_infohash(const char* value, size_t size);
  ::std::string* mutable_infohash();
  ::std::string* release_infohash();
  void set_allocated_infohash(::std::string* infohash);

  // optional bytes data = 2;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:bbts.message.Metadata)
 private:
  inline void set_has_infohash();
  inline void clear_has_infohash();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr infohash_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  friend void  protobuf_InitDefaults_message_2eproto_impl();
  friend void  protobuf_AddDesc_message_2eproto_impl();
  friend void protobuf_AssignDesc_message_2eproto();
  friend void protobuf_ShutdownFile_message_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<Metadata> Metadata_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Host

// optional string ip = 1;
inline bool Host::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Host::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Host::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Host::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
inline const ::std::string& Host::ip() const {
  // @@protoc_insertion_point(field_get:bbts.message.Host.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Host.ip)
}
inline void Host::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Host.ip)
}
inline void Host::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Host.ip)
}
inline ::std::string* Host::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:bbts.message.Host.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Host::release_ip() {
  // @@protoc_insertion_point(field_release:bbts.message.Host.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Host::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Host.ip)
}

// optional int32 port = 2;
inline bool Host::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Host::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Host::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Host::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Host::port() const {
  // @@protoc_insertion_point(field_get:bbts.message.Host.port)
  return port_;
}
inline void Host::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Host.port)
}

inline const Host* Host::internal_default_instance() {
  return &Host_default_instance_.get();
}
// -------------------------------------------------------------------

// TaskOptions

// optional int64 taskid = 1;
inline bool TaskOptions::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskOptions::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskOptions::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskOptions::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 TaskOptions::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.taskid)
  return taskid_;
}
inline void TaskOptions::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.taskid)
}

// optional int32 upload_limit = 2;
inline bool TaskOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
inline ::google::protobuf::int32 TaskOptions::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.upload_limit)
  return upload_limit_;
}
inline void TaskOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.upload_limit)
}

// optional int32 download_limit = 3;
inline bool TaskOptions::has_download_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskOptions::set_has_download_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskOptions::clear_has_download_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskOptions::clear_download_limit() {
  download_limit_ = 0;
  clear_has_download_limit();
}
inline ::google::protobuf::int32 TaskOptions::download_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.download_limit)
  return download_limit_;
}
inline void TaskOptions::set_download_limit(::google::protobuf::int32 value) {
  set_has_download_limit();
  download_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.download_limit)
}

// optional int32 max_conections = 4;
inline bool TaskOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
inline ::google::protobuf::int32 TaskOptions::max_conections() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.max_conections)
  return max_conections_;
}
inline void TaskOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.max_conections)
}

inline const TaskOptions* TaskOptions::internal_default_instance() {
  return &TaskOptions_default_instance_.get();
}
// -------------------------------------------------------------------

// AgentOptions

// optional int32 bind_port = 1;
inline bool AgentOptions::has_bind_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AgentOptions::set_has_bind_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AgentOptions::clear_has_bind_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AgentOptions::clear_bind_port() {
  bind_port_ = 0;
  clear_has_bind_port();
}
inline ::google::protobuf::int32 AgentOptions::bind_port() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.bind_port)
  return bind_port_;
}
inline void AgentOptions::set_bind_port(::google::protobuf::int32 value) {
  set_has_bind_port();
  bind_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.bind_port)
}

// optional int32 upload_limit = 2;
inline bool AgentOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AgentOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AgentOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AgentOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
inline ::google::protobuf::int32 AgentOptions::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.upload_limit)
  return upload_limit_;
}
inline void AgentOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.upload_limit)
}

// optional int32 max_conections = 4;
inline bool AgentOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AgentOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AgentOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AgentOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
inline ::google::protobuf::int32 AgentOptions::max_conections() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.max_conections)
  return max_conections_;
}
inline void AgentOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.max_conections)
}

inline const AgentOptions* AgentOptions::internal_default_instance() {
  return &AgentOptions_default_instance_.get();
}
// -------------------------------------------------------------------

// TaskStatus

// optional .bbts.message.Task task = 1;
inline bool TaskStatus::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskStatus::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskStatus::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskStatus::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
inline const ::bbts::message::Task& TaskStatus::task() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.task)
  return task_ != NULL ? *task_
                         : *::bbts::message::Task::internal_default_instance();
}
inline ::bbts::message::Task* TaskStatus::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::bbts::message::Task;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskStatus.task)
  return task_;
}
inline ::bbts::message::Task* TaskStatus::release_task() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskStatus.task)
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void TaskStatus::set_allocated_task(::bbts::message::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskStatus.task)
}

// optional .bbts.message.TaskStatus.status_t status = 2;
inline bool TaskStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::bbts::message::TaskStatus_status_t TaskStatus::status() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.status)
  return static_cast< ::bbts::message::TaskStatus_status_t >(status_);
}
inline void TaskStatus::set_status(::bbts::message::TaskStatus_status_t value) {
  assert(::bbts::message::TaskStatus_status_t_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.status)
}

// optional int32 progress = 3;
inline bool TaskStatus::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TaskStatus::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TaskStatus::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TaskStatus::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline ::google::protobuf::int32 TaskStatus::progress() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.progress)
  return progress_;
}
inline void TaskStatus::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.progress)
}

// optional string error = 4;
inline bool TaskStatus::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TaskStatus::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TaskStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TaskStatus::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& TaskStatus::error() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.error)
}
inline void TaskStatus::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.TaskStatus.error)
}
inline void TaskStatus::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.TaskStatus.error)
}
inline ::std::string* TaskStatus::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskStatus.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TaskStatus::release_error() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskStatus.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TaskStatus::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskStatus.error)
}

// optional int64 total_download = 5;
inline bool TaskStatus::has_total_download() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TaskStatus::set_has_total_download() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TaskStatus::clear_has_total_download() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TaskStatus::clear_total_download() {
  total_download_ = GOOGLE_LONGLONG(0);
  clear_has_total_download();
}
inline ::google::protobuf::int64 TaskStatus::total_download() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.total_download)
  return total_download_;
}
inline void TaskStatus::set_total_download(::google::protobuf::int64 value) {
  set_has_total_download();
  total_download_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.total_download)
}

// optional int64 total_upload = 6;
inline bool TaskStatus::has_total_upload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TaskStatus::set_has_total_upload() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TaskStatus::clear_has_total_upload() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TaskStatus::clear_total_upload() {
  total_upload_ = GOOGLE_LONGLONG(0);
  clear_has_total_upload();
}
inline ::google::protobuf::int64 TaskStatus::total_upload() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.total_upload)
  return total_upload_;
}
inline void TaskStatus::set_total_upload(::google::protobuf::int64 value) {
  set_has_total_upload();
  total_upload_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.total_upload)
}

// optional int32 download_rate = 7;
inline bool TaskStatus::has_download_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TaskStatus::set_has_download_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TaskStatus::clear_has_download_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TaskStatus::clear_download_rate() {
  download_rate_ = 0;
  clear_has_download_rate();
}
inline ::google::protobuf::int32 TaskStatus::download_rate() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.download_rate)
  return download_rate_;
}
inline void TaskStatus::set_download_rate(::google::protobuf::int32 value) {
  set_has_download_rate();
  download_rate_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.download_rate)
}

// optional int32 upload_rate = 8;
inline bool TaskStatus::has_upload_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TaskStatus::set_has_upload_rate() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TaskStatus::clear_has_upload_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TaskStatus::clear_upload_rate() {
  upload_rate_ = 0;
  clear_has_upload_rate();
}
inline ::google::protobuf::int32 TaskStatus::upload_rate() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.upload_rate)
  return upload_rate_;
}
inline void TaskStatus::set_upload_rate(::google::protobuf::int32 value) {
  set_has_upload_rate();
  upload_rate_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.upload_rate)
}

// optional int32 num_peers = 9;
inline bool TaskStatus::has_num_peers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TaskStatus::set_has_num_peers() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TaskStatus::clear_has_num_peers() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TaskStatus::clear_num_peers() {
  num_peers_ = 0;
  clear_has_num_peers();
}
inline ::google::protobuf::int32 TaskStatus::num_peers() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.num_peers)
  return num_peers_;
}
inline void TaskStatus::set_num_peers(::google::protobuf::int32 value) {
  set_has_num_peers();
  num_peers_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.num_peers)
}

// optional int32 num_seeds = 10;
inline bool TaskStatus::has_num_seeds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TaskStatus::set_has_num_seeds() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TaskStatus::clear_has_num_seeds() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TaskStatus::clear_num_seeds() {
  num_seeds_ = 0;
  clear_has_num_seeds();
}
inline ::google::protobuf::int32 TaskStatus::num_seeds() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.num_seeds)
  return num_seeds_;
}
inline void TaskStatus::set_num_seeds(::google::protobuf::int32 value) {
  set_has_num_seeds();
  num_seeds_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.num_seeds)
}

inline const TaskStatus* TaskStatus::internal_default_instance() {
  return &TaskStatus_default_instance_.get();
}
// -------------------------------------------------------------------

// Task

// optional int64 taskid = 1;
inline bool Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Task::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 Task::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.taskid)
  return taskid_;
}
inline void Task::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.taskid)
}

// optional .bbts.message.TaskType type = 2;
inline bool Task::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Task::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Task::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Task::clear_type() {
  type_ = 2;
  clear_has_type();
}
inline ::bbts::message::TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.type)
  return static_cast< ::bbts::message::TaskType >(type_);
}
inline void Task::set_type(::bbts::message::TaskType value) {
  assert(::bbts::message::TaskType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.type)
}

// optional string infohash = 3;
inline bool Task::has_infohash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Task::set_has_infohash() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Task::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Task::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infohash();
}
inline const ::std::string& Task::infohash() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_infohash(const ::std::string& value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.infohash)
}
inline void Task::set_infohash(const char* value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.infohash)
}
inline void Task::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.infohash)
}
inline ::std::string* Task::mutable_infohash() {
  set_has_infohash();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_infohash() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.infohash)
  clear_has_infohash();
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    set_has_infohash();
  } else {
    clear_has_infohash();
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.infohash)
}

// optional string torrent_path = 4;
inline bool Task::has_torrent_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Task::set_has_torrent_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Task::clear_has_torrent_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Task::clear_torrent_path() {
  torrent_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_torrent_path();
}
inline const ::std::string& Task::torrent_path() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.torrent_path)
  return torrent_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_torrent_path(const ::std::string& value) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.torrent_path)
}
inline void Task::set_torrent_path(const char* value) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.torrent_path)
}
inline void Task::set_torrent_path(const char* value, size_t size) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.torrent_path)
}
inline ::std::string* Task::mutable_torrent_path() {
  set_has_torrent_path();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.torrent_path)
  return torrent_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_torrent_path() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.torrent_path)
  clear_has_torrent_path();
  return torrent_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_torrent_path(::std::string* torrent_path) {
  if (torrent_path != NULL) {
    set_has_torrent_path();
  } else {
    clear_has_torrent_path();
  }
  torrent_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), torrent_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.torrent_path)
}

// optional bytes data = 5;
inline bool Task::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Task::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Task::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Task::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Task::data() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.data)
}
inline void Task::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.data)
}
inline void Task::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.data)
}
inline ::std::string* Task::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_data() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.data)
}

// optional string save_path = 6;
inline bool Task::has_save_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Task::set_has_save_path() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Task::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Task::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
inline const ::std::string& Task::save_path() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.save_path)
}
inline void Task::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.save_path)
}
inline void Task::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.save_path)
}
inline ::std::string* Task::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_save_path() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.save_path)
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.save_path)
}

// optional string new_name = 7;
inline bool Task::has_new_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Task::set_has_new_name() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Task::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Task::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_name();
}
inline const ::std::string& Task::new_name() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.new_name)
  return new_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_new_name(const ::std::string& value) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.new_name)
}
inline void Task::set_new_name(const char* value) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.new_name)
}
inline void Task::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.new_name)
}
inline ::std::string* Task::mutable_new_name() {
  set_has_new_name();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_new_name() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.new_name)
  clear_has_new_name();
  return new_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    set_has_new_name();
  } else {
    clear_has_new_name();
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.new_name)
}

// repeated .bbts.message.Host trackers = 8;
inline int Task::trackers_size() const {
  return trackers_.size();
}
inline void Task::clear_trackers() {
  trackers_.Clear();
}
inline const ::bbts::message::Host& Task::trackers(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.trackers)
  return trackers_.Get(index);
}
inline ::bbts::message::Host* Task::mutable_trackers(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.trackers)
  return trackers_.Mutable(index);
}
inline ::bbts::message::Host* Task::add_trackers() {
  // @@protoc_insertion_point(field_add:bbts.message.Task.trackers)
  return trackers_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >*
Task::mutable_trackers() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.Task.trackers)
  return &trackers_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >&
Task::trackers() const {
  // @@protoc_insertion_point(field_list:bbts.message.Task.trackers)
  return trackers_;
}

// optional string cmd = 20;
inline bool Task::has_cmd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Task::set_has_cmd() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Task::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Task::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
inline const ::std::string& Task::cmd() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.cmd)
}
inline void Task::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.cmd)
}
inline void Task::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.cmd)
}
inline ::std::string* Task::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Task::release_cmd() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Task::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.cmd)
}

// optional int32 uid = 21;
inline bool Task::has_uid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Task::set_has_uid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Task::clear_has_uid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Task::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
inline ::google::protobuf::int32 Task::uid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.uid)
  return uid_;
}
inline void Task::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.uid)
}

// optional int32 gid = 22;
inline bool Task::has_gid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Task::set_has_gid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Task::clear_has_gid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Task::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
inline ::google::protobuf::int32 Task::gid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.gid)
  return gid_;
}
inline void Task::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.gid)
}

// optional int32 seeding_time = 25;
inline bool Task::has_seeding_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Task::set_has_seeding_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Task::clear_has_seeding_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Task::clear_seeding_time() {
  seeding_time_ = 0;
  clear_has_seeding_time();
}
inline ::google::protobuf::int32 Task::seeding_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.seeding_time)
  return seeding_time_;
}
inline void Task::set_seeding_time(::google::protobuf::int32 value) {
  set_has_seeding_time();
  seeding_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.seeding_time)
}

inline const Task* Task::internal_default_instance() {
  return &Task_default_instance_.get();
}
// -------------------------------------------------------------------

// AddTask

// optional .bbts.message.Task task = 1;
inline bool AddTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTask::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
inline const ::bbts::message::Task& AddTask::task() const {
  // @@protoc_insertion_point(field_get:bbts.message.AddTask.task)
  return task_ != NULL ? *task_
                         : *::bbts::message::Task::internal_default_instance();
}
inline ::bbts::message::Task* AddTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::bbts::message::Task;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.AddTask.task)
  return task_;
}
inline ::bbts::message::Task* AddTask::release_task() {
  // @@protoc_insertion_point(field_release:bbts.message.AddTask.task)
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}
inline void AddTask::set_allocated_task(::bbts::message::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AddTask.task)
}

// optional .bbts.message.TaskOptions options = 2;
inline bool AddTask::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTask::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTask::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTask::clear_options() {
  if (options_ != NULL) options_->::bbts::message::TaskOptions::Clear();
  clear_has_options();
}
inline const ::bbts::message::TaskOptions& AddTask::options() const {
  // @@protoc_insertion_point(field_get:bbts.message.AddTask.options)
  return options_ != NULL ? *options_
                         : *::bbts::message::TaskOptions::internal_default_instance();
}
inline ::bbts::message::TaskOptions* AddTask::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::bbts::message::TaskOptions;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.AddTask.options)
  return options_;
}
inline ::bbts::message::TaskOptions* AddTask::release_options() {
  // @@protoc_insertion_point(field_release:bbts.message.AddTask.options)
  clear_has_options();
  ::bbts::message::TaskOptions* temp = options_;
  options_ = NULL;
  return temp;
}
inline void AddTask::set_allocated_options(::bbts::message::TaskOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AddTask.options)
}

inline const AddTask* AddTask::internal_default_instance() {
  return &AddTask_default_instance_.get();
}
// -------------------------------------------------------------------

// BatchCtrl

// optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
inline bool BatchCtrl::has_ctrl_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BatchCtrl::set_has_ctrl_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BatchCtrl::clear_has_ctrl_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BatchCtrl::clear_ctrl_type() {
  ctrl_type_ = 1;
  clear_has_ctrl_type();
}
inline ::bbts::message::BatchCtrl_ctrl_t BatchCtrl::ctrl_type() const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.ctrl_type)
  return static_cast< ::bbts::message::BatchCtrl_ctrl_t >(ctrl_type_);
}
inline void BatchCtrl::set_ctrl_type(::bbts::message::BatchCtrl_ctrl_t value) {
  assert(::bbts::message::BatchCtrl_ctrl_t_IsValid(value));
  set_has_ctrl_type();
  ctrl_type_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.ctrl_type)
}

// optional bool ctrl_all = 2;
inline bool BatchCtrl::has_ctrl_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BatchCtrl::set_has_ctrl_all() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BatchCtrl::clear_has_ctrl_all() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BatchCtrl::clear_ctrl_all() {
  ctrl_all_ = false;
  clear_has_ctrl_all();
}
inline bool BatchCtrl::ctrl_all() const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.ctrl_all)
  return ctrl_all_;
}
inline void BatchCtrl::set_ctrl_all(bool value) {
  set_has_ctrl_all();
  ctrl_all_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.ctrl_all)
}

// repeated int64 taskids = 3;
inline int BatchCtrl::taskids_size() const {
  return taskids_.size();
}
inline void BatchCtrl::clear_taskids() {
  taskids_.Clear();
}
inline ::google::protobuf::int64 BatchCtrl::taskids(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.taskids)
  return taskids_.Get(index);
}
inline void BatchCtrl::set_taskids(int index, ::google::protobuf::int64 value) {
  taskids_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.taskids)
}
inline void BatchCtrl::add_taskids(::google::protobuf::int64 value) {
  taskids_.Add(value);
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrl.taskids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BatchCtrl::taskids() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrl.taskids)
  return taskids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BatchCtrl::mutable_taskids() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrl.taskids)
  return &taskids_;
}

// repeated string infohashs = 4;
inline int BatchCtrl::infohashs_size() const {
  return infohashs_.size();
}
inline void BatchCtrl::clear_infohashs() {
  infohashs_.Clear();
}
inline const ::std::string& BatchCtrl::infohashs(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Get(index);
}
inline ::std::string* BatchCtrl::mutable_infohashs(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Mutable(index);
}
inline void BatchCtrl::set_infohashs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.infohashs)
  infohashs_.Mutable(index)->assign(value);
}
inline void BatchCtrl::set_infohashs(int index, const char* value) {
  infohashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bbts.message.BatchCtrl.infohashs)
}
inline void BatchCtrl::set_infohashs(int index, const char* value, size_t size) {
  infohashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bbts.message.BatchCtrl.infohashs)
}
inline ::std::string* BatchCtrl::add_infohashs() {
  // @@protoc_insertion_point(field_add_mutable:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Add();
}
inline void BatchCtrl::add_infohashs(const ::std::string& value) {
  infohashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrl.infohashs)
}
inline void BatchCtrl::add_infohashs(const char* value) {
  infohashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bbts.message.BatchCtrl.infohashs)
}
inline void BatchCtrl::add_infohashs(const char* value, size_t size) {
  infohashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bbts.message.BatchCtrl.infohashs)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchCtrl::infohashs() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrl.infohashs)
  return infohashs_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BatchCtrl::mutable_infohashs() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrl.infohashs)
  return &infohashs_;
}

inline const BatchCtrl* BatchCtrl::internal_default_instance() {
  return &BatchCtrl_default_instance_.get();
}
// -------------------------------------------------------------------

// BaseRes

// optional int32 ret_code = 1;
inline bool BaseRes::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseRes::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseRes::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseRes::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
inline ::google::protobuf::int32 BaseRes::ret_code() const {
  // @@protoc_insertion_point(field_get:bbts.message.BaseRes.ret_code)
  return ret_code_;
}
inline void BaseRes::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BaseRes.ret_code)
}

// optional string fail_msg = 2;
inline bool BaseRes::has_fail_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseRes::set_has_fail_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseRes::clear_has_fail_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseRes::clear_fail_msg() {
  fail_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fail_msg();
}
inline const ::std::string& BaseRes::fail_msg() const {
  // @@protoc_insertion_point(field_get:bbts.message.BaseRes.fail_msg)
  return fail_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRes::set_fail_msg(const ::std::string& value) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.BaseRes.fail_msg)
}
inline void BaseRes::set_fail_msg(const char* value) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.BaseRes.fail_msg)
}
inline void BaseRes::set_fail_msg(const char* value, size_t size) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.BaseRes.fail_msg)
}
inline ::std::string* BaseRes::mutable_fail_msg() {
  set_has_fail_msg();
  // @@protoc_insertion_point(field_mutable:bbts.message.BaseRes.fail_msg)
  return fail_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BaseRes::release_fail_msg() {
  // @@protoc_insertion_point(field_release:bbts.message.BaseRes.fail_msg)
  clear_has_fail_msg();
  return fail_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BaseRes::set_allocated_fail_msg(::std::string* fail_msg) {
  if (fail_msg != NULL) {
    set_has_fail_msg();
  } else {
    clear_has_fail_msg();
  }
  fail_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_msg);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.BaseRes.fail_msg)
}

inline const BaseRes* BaseRes::internal_default_instance() {
  return &BaseRes_default_instance_.get();
}
// -------------------------------------------------------------------

// TaskRes

// optional int64 taskid = 1;
inline bool TaskRes::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskRes::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskRes::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TaskRes::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
inline ::google::protobuf::int64 TaskRes::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskRes.taskid)
  return taskid_;
}
inline void TaskRes::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskRes.taskid)
}

// optional .bbts.message.BaseRes res = 2;
inline bool TaskRes::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TaskRes::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TaskRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TaskRes::clear_res() {
  if (res_ != NULL) res_->::bbts::message::BaseRes::Clear();
  clear_has_res();
}
inline const ::bbts::message::BaseRes& TaskRes::res() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskRes.res)
  return res_ != NULL ? *res_
                         : *::bbts::message::BaseRes::internal_default_instance();
}
inline ::bbts::message::BaseRes* TaskRes::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::bbts::message::BaseRes;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskRes.res)
  return res_;
}
inline ::bbts::message::BaseRes* TaskRes::release_res() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskRes.res)
  clear_has_res();
  ::bbts::message::BaseRes* temp = res_;
  res_ = NULL;
  return temp;
}
inline void TaskRes::set_allocated_res(::bbts::message::BaseRes* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskRes.res)
}

inline const TaskRes* TaskRes::internal_default_instance() {
  return &TaskRes_default_instance_.get();
}
// -------------------------------------------------------------------

// BatchCtrlRes

// repeated .bbts.message.TaskRes tasks = 1;
inline int BatchCtrlRes::tasks_size() const {
  return tasks_.size();
}
inline void BatchCtrlRes::clear_tasks() {
  tasks_.Clear();
}
inline const ::bbts::message::TaskRes& BatchCtrlRes::tasks(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Get(index);
}
inline ::bbts::message::TaskRes* BatchCtrlRes::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Mutable(index);
}
inline ::bbts::message::TaskRes* BatchCtrlRes::add_tasks() {
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >*
BatchCtrlRes::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrlRes.tasks)
  return &tasks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >&
BatchCtrlRes::tasks() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrlRes.tasks)
  return tasks_;
}

inline const BatchCtrlRes* BatchCtrlRes::internal_default_instance() {
  return &BatchCtrlRes_default_instance_.get();
}
// -------------------------------------------------------------------

// BatchListRes

// repeated .bbts.message.TaskStatus status = 1;
inline int BatchListRes::status_size() const {
  return status_.size();
}
inline void BatchListRes::clear_status() {
  status_.Clear();
}
inline const ::bbts::message::TaskStatus& BatchListRes::status(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchListRes.status)
  return status_.Get(index);
}
inline ::bbts::message::TaskStatus* BatchListRes::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchListRes.status)
  return status_.Mutable(index);
}
inline ::bbts::message::TaskStatus* BatchListRes::add_status() {
  // @@protoc_insertion_point(field_add:bbts.message.BatchListRes.status)
  return status_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >*
BatchListRes::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchListRes.status)
  return &status_;
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >&
BatchListRes::status() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchListRes.status)
  return status_;
}

inline const BatchListRes* BatchListRes::internal_default_instance() {
  return &BatchListRes_default_instance_.get();
}
// -------------------------------------------------------------------

// Metadata

// optional string infohash = 1;
inline bool Metadata::has_infohash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Metadata::set_has_infohash() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Metadata::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Metadata::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infohash();
}
inline const ::std::string& Metadata::infohash() const {
  // @@protoc_insertion_point(field_get:bbts.message.Metadata.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_infohash(const ::std::string& value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Metadata.infohash)
}
inline void Metadata::set_infohash(const char* value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Metadata.infohash)
}
inline void Metadata::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Metadata.infohash)
}
inline ::std::string* Metadata::mutable_infohash() {
  set_has_infohash();
  // @@protoc_insertion_point(field_mutable:bbts.message.Metadata.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadata::release_infohash() {
  // @@protoc_insertion_point(field_release:bbts.message.Metadata.infohash)
  clear_has_infohash();
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    set_has_infohash();
  } else {
    clear_has_infohash();
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Metadata.infohash)
}

// optional bytes data = 2;
inline bool Metadata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Metadata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Metadata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Metadata::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
inline const ::std::string& Metadata::data() const {
  // @@protoc_insertion_point(field_get:bbts.message.Metadata.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Metadata.data)
}
inline void Metadata::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Metadata.data)
}
inline void Metadata::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Metadata.data)
}
inline ::std::string* Metadata::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:bbts.message.Metadata.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Metadata::release_data() {
  // @@protoc_insertion_point(field_release:bbts.message.Metadata.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Metadata::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Metadata.data)
}

inline const Metadata* Metadata::internal_default_instance() {
  return &Metadata_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::bbts::message::TaskStatus_status_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bbts::message::TaskStatus_status_t>() {
  return ::bbts::message::TaskStatus_status_t_descriptor();
}
template <> struct is_proto_enum< ::bbts::message::BatchCtrl_ctrl_t> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bbts::message::BatchCtrl_ctrl_t>() {
  return ::bbts::message::BatchCtrl_ctrl_t_descriptor();
}
template <> struct is_proto_enum< ::bbts::message::TaskType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::bbts::message::TaskType>() {
  return ::bbts::message::TaskType_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_message_2eproto__INCLUDED
