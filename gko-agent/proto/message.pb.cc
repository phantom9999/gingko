// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

namespace {

const ::google::protobuf::Descriptor* Host_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Host_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentOptions_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentOptions_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Task_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Task_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddTask_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchCtrl_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchCtrl_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor_ = NULL;
const ::google::protobuf::Descriptor* BaseRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchCtrlRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchCtrlRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatchListRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatchListRes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_message_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_message_2eproto() {
  protobuf_AddDesc_message_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "message.proto");
  GOOGLE_CHECK(file != NULL);
  Host_descriptor_ = file->message_type(0);
  static const int Host_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, port_),
  };
  Host_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Host_descriptor_,
      Host::internal_default_instance(),
      Host_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _has_bits_),
      -1,
      -1,
      sizeof(Host),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Host, _internal_metadata_));
  TaskOptions_descriptor_ = file->message_type(1);
  static const int TaskOptions_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, max_conections_),
  };
  TaskOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskOptions_descriptor_,
      TaskOptions::internal_default_instance(),
      TaskOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, _has_bits_),
      -1,
      -1,
      sizeof(TaskOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskOptions, _internal_metadata_));
  AgentOptions_descriptor_ = file->message_type(2);
  static const int AgentOptions_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, bind_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, max_conections_),
  };
  AgentOptions_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AgentOptions_descriptor_,
      AgentOptions::internal_default_instance(),
      AgentOptions_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, _has_bits_),
      -1,
      -1,
      sizeof(AgentOptions),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentOptions, _internal_metadata_));
  TaskStatus_descriptor_ = file->message_type(3);
  static const int TaskStatus_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, progress_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, total_download_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, total_upload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, download_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, upload_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, num_peers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, num_seeds_),
  };
  TaskStatus_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskStatus_descriptor_,
      TaskStatus::internal_default_instance(),
      TaskStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _has_bits_),
      -1,
      -1,
      sizeof(TaskStatus),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskStatus, _internal_metadata_));
  TaskStatus_status_t_descriptor_ = TaskStatus_descriptor_->enum_type(0);
  Task_descriptor_ = file->message_type(4);
  static const int Task_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, infohash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, torrent_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, save_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, new_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, trackers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, gid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, seeding_time_),
  };
  Task_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Task_descriptor_,
      Task::internal_default_instance(),
      Task_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _has_bits_),
      -1,
      -1,
      sizeof(Task),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Task, _internal_metadata_));
  AddTask_descriptor_ = file->message_type(5);
  static const int AddTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, task_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, options_),
  };
  AddTask_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AddTask_descriptor_,
      AddTask::internal_default_instance(),
      AddTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, _has_bits_),
      -1,
      -1,
      sizeof(AddTask),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddTask, _internal_metadata_));
  BatchCtrl_descriptor_ = file->message_type(6);
  static const int BatchCtrl_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, ctrl_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, ctrl_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, taskids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, infohashs_),
  };
  BatchCtrl_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchCtrl_descriptor_,
      BatchCtrl::internal_default_instance(),
      BatchCtrl_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, _has_bits_),
      -1,
      -1,
      sizeof(BatchCtrl),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrl, _internal_metadata_));
  BatchCtrl_ctrl_t_descriptor_ = BatchCtrl_descriptor_->enum_type(0);
  BaseRes_descriptor_ = file->message_type(7);
  static const int BaseRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, ret_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, fail_msg_),
  };
  BaseRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BaseRes_descriptor_,
      BaseRes::internal_default_instance(),
      BaseRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, _has_bits_),
      -1,
      -1,
      sizeof(BaseRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseRes, _internal_metadata_));
  TaskRes_descriptor_ = file->message_type(8);
  static const int TaskRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, res_),
  };
  TaskRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TaskRes_descriptor_,
      TaskRes::internal_default_instance(),
      TaskRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, _has_bits_),
      -1,
      -1,
      sizeof(TaskRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskRes, _internal_metadata_));
  BatchCtrlRes_descriptor_ = file->message_type(9);
  static const int BatchCtrlRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, tasks_),
  };
  BatchCtrlRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchCtrlRes_descriptor_,
      BatchCtrlRes::internal_default_instance(),
      BatchCtrlRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, _has_bits_),
      -1,
      -1,
      sizeof(BatchCtrlRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchCtrlRes, _internal_metadata_));
  BatchListRes_descriptor_ = file->message_type(10);
  static const int BatchListRes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, status_),
  };
  BatchListRes_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BatchListRes_descriptor_,
      BatchListRes::internal_default_instance(),
      BatchListRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, _has_bits_),
      -1,
      -1,
      sizeof(BatchListRes),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatchListRes, _internal_metadata_));
  Metadata_descriptor_ = file->message_type(11);
  static const int Metadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, infohash_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, data_),
  };
  Metadata_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::internal_default_instance(),
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_),
      -1,
      -1,
      sizeof(Metadata),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _internal_metadata_));
  TaskType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_message_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Host_descriptor_, Host::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskOptions_descriptor_, TaskOptions::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AgentOptions_descriptor_, AgentOptions::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskStatus_descriptor_, TaskStatus::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Task_descriptor_, Task::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AddTask_descriptor_, AddTask::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchCtrl_descriptor_, BatchCtrl::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BaseRes_descriptor_, BaseRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TaskRes_descriptor_, TaskRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchCtrlRes_descriptor_, BatchCtrlRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BatchListRes_descriptor_, BatchListRes::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Metadata_descriptor_, Metadata::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_message_2eproto() {
  Host_default_instance_.Shutdown();
  delete Host_reflection_;
  TaskOptions_default_instance_.Shutdown();
  delete TaskOptions_reflection_;
  AgentOptions_default_instance_.Shutdown();
  delete AgentOptions_reflection_;
  TaskStatus_default_instance_.Shutdown();
  delete TaskStatus_reflection_;
  Task_default_instance_.Shutdown();
  delete Task_reflection_;
  AddTask_default_instance_.Shutdown();
  delete AddTask_reflection_;
  BatchCtrl_default_instance_.Shutdown();
  delete BatchCtrl_reflection_;
  BaseRes_default_instance_.Shutdown();
  delete BaseRes_reflection_;
  TaskRes_default_instance_.Shutdown();
  delete TaskRes_reflection_;
  BatchCtrlRes_default_instance_.Shutdown();
  delete BatchCtrlRes_reflection_;
  BatchListRes_default_instance_.Shutdown();
  delete BatchListRes_reflection_;
  Metadata_default_instance_.Shutdown();
  delete Metadata_reflection_;
}

void protobuf_InitDefaults_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  Host_default_instance_.DefaultConstruct();
  TaskOptions_default_instance_.DefaultConstruct();
  AgentOptions_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  TaskStatus_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Task_default_instance_.DefaultConstruct();
  AddTask_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BatchCtrl_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  BaseRes_default_instance_.DefaultConstruct();
  TaskRes_default_instance_.DefaultConstruct();
  BatchCtrlRes_default_instance_.DefaultConstruct();
  BatchListRes_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  Metadata_default_instance_.DefaultConstruct();
  Host_default_instance_.get_mutable()->InitAsDefaultInstance();
  TaskOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
  AgentOptions_default_instance_.get_mutable()->InitAsDefaultInstance();
  TaskStatus_default_instance_.get_mutable()->InitAsDefaultInstance();
  Task_default_instance_.get_mutable()->InitAsDefaultInstance();
  AddTask_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchCtrl_default_instance_.get_mutable()->InitAsDefaultInstance();
  BaseRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  TaskRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchCtrlRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  BatchListRes_default_instance_.get_mutable()->InitAsDefaultInstance();
  Metadata_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_message_2eproto_once_);
void protobuf_InitDefaults_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_message_2eproto_once_,
                 &protobuf_InitDefaults_message_2eproto_impl);
}
void protobuf_AddDesc_message_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_message_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmessage.proto\022\014bbts.message\" \n\004Host\022\n\n"
    "\002ip\030\001 \001(\t\022\014\n\004port\030\002 \001(\005\"c\n\013TaskOptions\022\016"
    "\n\006taskid\030\001 \001(\003\022\024\n\014upload_limit\030\002 \001(\005\022\026\n\016"
    "download_limit\030\003 \001(\005\022\026\n\016max_conections\030\004"
    " \001(\005\"O\n\014AgentOptions\022\021\n\tbind_port\030\001 \001(\005\022"
    "\024\n\014upload_limit\030\002 \001(\005\022\026\n\016max_conections\030"
    "\004 \001(\005\"\221\003\n\nTaskStatus\022 \n\004task\030\001 \001(\0132\022.bbt"
    "s.message.Task\0221\n\006status\030\002 \001(\0162!.bbts.me"
    "ssage.TaskStatus.status_t\022\020\n\010progress\030\003 "
    "\001(\005\022\r\n\005error\030\004 \001(\t\022\026\n\016total_download\030\005 \001"
    "(\003\022\024\n\014total_upload\030\006 \001(\003\022\025\n\rdownload_rat"
    "e\030\007 \001(\005\022\023\n\013upload_rate\030\010 \001(\005\022\021\n\tnum_peer"
    "s\030\t \001(\005\022\021\n\tnum_seeds\030\n \001(\005\"\214\001\n\010status_t\022"
    "\n\n\006UNKNOW\020\000\022\t\n\005ERROR\020\001\022\n\n\006CHECKQ\020\002\022\014\n\010CH"
    "ECKING\020\003\022\014\n\010DTORRENT\020\004\022\014\n\010DOWNLOAD\020\005\022\n\n\006"
    "PAUSED\020\006\022\013\n\007SEEDING\020\007\022\014\n\010FINISHED\020\010\022\014\n\010C"
    "ANCELED\020\t\"\372\001\n\004Task\022\016\n\006taskid\030\001 \001(\003\022$\n\004ty"
    "pe\030\002 \001(\0162\026.bbts.message.TaskType\022\020\n\010info"
    "hash\030\003 \001(\t\022\024\n\014torrent_path\030\004 \001(\t\022\014\n\004data"
    "\030\005 \001(\014\022\021\n\tsave_path\030\006 \001(\t\022\020\n\010new_name\030\007 "
    "\001(\t\022$\n\010trackers\030\010 \003(\0132\022.bbts.message.Hos"
    "t\022\013\n\003cmd\030\024 \001(\t\022\013\n\003uid\030\025 \001(\005\022\013\n\003gid\030\026 \001(\005"
    "\022\024\n\014seeding_time\030\031 \001(\005\"W\n\007AddTask\022 \n\004tas"
    "k\030\001 \001(\0132\022.bbts.message.Task\022*\n\007options\030\002"
    " \001(\0132\031.bbts.message.TaskOptions\"\253\001\n\tBatc"
    "hCtrl\0221\n\tctrl_type\030\001 \001(\0162\036.bbts.message."
    "BatchCtrl.ctrl_t\022\020\n\010ctrl_all\030\002 \001(\010\022\017\n\007ta"
    "skids\030\003 \003(\003\022\021\n\tinfohashs\030\004 \003(\t\"5\n\006ctrl_t"
    "\022\n\n\006CANCEL\020\001\022\t\n\005PAUSE\020\002\022\n\n\006RESUME\020\003\022\010\n\004L"
    "IST\020\004\"-\n\007BaseRes\022\020\n\010ret_code\030\001 \001(\005\022\020\n\010fa"
    "il_msg\030\002 \001(\t\"=\n\007TaskRes\022\016\n\006taskid\030\001 \001(\003\022"
    "\"\n\003res\030\002 \001(\0132\025.bbts.message.BaseRes\"4\n\014B"
    "atchCtrlRes\022$\n\005tasks\030\001 \003(\0132\025.bbts.messag"
    "e.TaskRes\"8\n\014BatchListRes\022(\n\006status\030\001 \003("
    "\0132\030.bbts.message.TaskStatus\"*\n\010Metadata\022"
    "\020\n\010infohash\030\001 \001(\t\022\014\n\004data\030\002 \001(\014*.\n\010TaskT"
    "ype\022\020\n\014SEEDING_TASK\020\002\022\020\n\014NOCHECK_TASK\020\003", 1479);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "message.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_message_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_message_2eproto_once_);
void protobuf_AddDesc_message_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_message_2eproto_once_,
                 &protobuf_AddDesc_message_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_message_2eproto {
  StaticDescriptorInitializer_message_2eproto() {
    protobuf_AddDesc_message_2eproto();
  }
} static_descriptor_initializer_message_2eproto_;
const ::google::protobuf::EnumDescriptor* TaskType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskType_descriptor_;
}
bool TaskType_IsValid(int value) {
  switch (value) {
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Host::kIpFieldNumber;
const int Host::kPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Host::Host()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.Host)
}

void Host::InitAsDefaultInstance() {
}

Host::Host(const Host& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.Host)
}

void Host::SharedCtor() {
  _cached_size_ = 0;
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0;
}

Host::~Host() {
  // @@protoc_insertion_point(destructor:bbts.message.Host)
  SharedDtor();
}

void Host::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Host::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Host::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Host_descriptor_;
}

const Host& Host::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Host> Host_default_instance_;

Host* Host::New(::google::protobuf::Arena* arena) const {
  Host* n = new Host;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Host::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.Host)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_ip()) {
      ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    port_ = 0;
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Host::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.Host)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string ip = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Host.ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_port;
        break;
      }

      // optional int32 port = 2;
      case 2: {
        if (tag == 16) {
         parse_port:
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.Host)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.Host)
  return false;
#undef DO_
}

void Host::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.Host)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Host.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // optional int32 port = 2;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.Host)
}

::google::protobuf::uint8* Host::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.Host)
  // optional string ip = 1;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Host.ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ip(), target);
  }

  // optional int32 port = 2;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.Host)
  return target;
}

size_t Host::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.Host)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string ip = 1;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 2;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Host::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.Host)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Host* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Host>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.Host)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.Host)
    UnsafeMergeFrom(*source);
  }
}

void Host::MergeFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.Host)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Host::UnsafeMergeFrom(const Host& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ip()) {
      set_has_ip();
      ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Host::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.Host)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Host::CopyFrom(const Host& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.Host)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Host::IsInitialized() const {

  return true;
}

void Host::Swap(Host* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Host::InternalSwap(Host* other) {
  ip_.Swap(&other->ip_);
  std::swap(port_, other->port_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Host::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Host_descriptor_;
  metadata.reflection = Host_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Host

// optional string ip = 1;
bool Host::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Host::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
void Host::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
void Host::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ip();
}
const ::std::string& Host::ip() const {
  // @@protoc_insertion_point(field_get:bbts.message.Host.ip)
  return ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_ip(const ::std::string& value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Host.ip)
}
void Host::set_ip(const char* value) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Host.ip)
}
void Host::set_ip(const char* value, size_t size) {
  set_has_ip();
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Host.ip)
}
::std::string* Host::mutable_ip() {
  set_has_ip();
  // @@protoc_insertion_point(field_mutable:bbts.message.Host.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Host::release_ip() {
  // @@protoc_insertion_point(field_release:bbts.message.Host.ip)
  clear_has_ip();
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Host::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    set_has_ip();
  } else {
    clear_has_ip();
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Host.ip)
}

// optional int32 port = 2;
bool Host::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Host::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
void Host::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void Host::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 Host::port() const {
  // @@protoc_insertion_point(field_get:bbts.message.Host.port)
  return port_;
}
void Host::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Host.port)
}

inline const Host* Host::internal_default_instance() {
  return &Host_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskOptions::kTaskidFieldNumber;
const int TaskOptions::kUploadLimitFieldNumber;
const int TaskOptions::kDownloadLimitFieldNumber;
const int TaskOptions::kMaxConectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskOptions::TaskOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.TaskOptions)
}

void TaskOptions::InitAsDefaultInstance() {
}

TaskOptions::TaskOptions(const TaskOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.TaskOptions)
}

void TaskOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&max_conections_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(max_conections_));
}

TaskOptions::~TaskOptions() {
  // @@protoc_insertion_point(destructor:bbts.message.TaskOptions)
  SharedDtor();
}

void TaskOptions::SharedDtor() {
}

void TaskOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskOptions_descriptor_;
}

const TaskOptions& TaskOptions::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskOptions> TaskOptions_default_instance_;

TaskOptions* TaskOptions::New(::google::protobuf::Arena* arena) const {
  TaskOptions* n = new TaskOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.TaskOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(taskid_, max_conections_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.TaskOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (tag == 8) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upload_limit;
        break;
      }

      // optional int32 upload_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_limit:
          set_has_upload_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_download_limit;
        break;
      }

      // optional int32 download_limit = 3;
      case 3: {
        if (tag == 24) {
         parse_download_limit:
          set_has_download_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_conections;
        break;
      }

      // optional int32 max_conections = 4;
      case 4: {
        if (tag == 32) {
         parse_max_conections:
          set_has_max_conections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_conections_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.TaskOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.TaskOptions)
  return false;
#undef DO_
}

void TaskOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.TaskOptions)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }

  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_limit(), output);
  }

  // optional int32 download_limit = 3;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->download_limit(), output);
  }

  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_conections(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.TaskOptions)
}

::google::protobuf::uint8* TaskOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.TaskOptions)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }

  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_limit(), target);
  }

  // optional int32 download_limit = 3;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->download_limit(), target);
  }

  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_conections(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.TaskOptions)
  return target;
}

size_t TaskOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.TaskOptions)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }

    // optional int32 upload_limit = 2;
    if (has_upload_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }

    // optional int32 download_limit = 3;
    if (has_download_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }

    // optional int32 max_conections = 4;
    if (has_max_conections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_conections());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.TaskOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.TaskOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.TaskOptions)
    UnsafeMergeFrom(*source);
  }
}

void TaskOptions::MergeFrom(const TaskOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.TaskOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskOptions::UnsafeMergeFrom(const TaskOptions& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_max_conections()) {
      set_max_conections(from.max_conections());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TaskOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.TaskOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskOptions::CopyFrom(const TaskOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.TaskOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskOptions::IsInitialized() const {

  return true;
}

void TaskOptions::Swap(TaskOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskOptions::InternalSwap(TaskOptions* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(upload_limit_, other->upload_limit_);
  std::swap(download_limit_, other->download_limit_);
  std::swap(max_conections_, other->max_conections_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskOptions_descriptor_;
  metadata.reflection = TaskOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskOptions

// optional int64 taskid = 1;
bool TaskOptions::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskOptions::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskOptions::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskOptions::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
::google::protobuf::int64 TaskOptions::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.taskid)
  return taskid_;
}
void TaskOptions::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.taskid)
}

// optional int32 upload_limit = 2;
bool TaskOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
::google::protobuf::int32 TaskOptions::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.upload_limit)
  return upload_limit_;
}
void TaskOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.upload_limit)
}

// optional int32 download_limit = 3;
bool TaskOptions::has_download_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskOptions::set_has_download_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskOptions::clear_has_download_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskOptions::clear_download_limit() {
  download_limit_ = 0;
  clear_has_download_limit();
}
::google::protobuf::int32 TaskOptions::download_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.download_limit)
  return download_limit_;
}
void TaskOptions::set_download_limit(::google::protobuf::int32 value) {
  set_has_download_limit();
  download_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.download_limit)
}

// optional int32 max_conections = 4;
bool TaskOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TaskOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000008u;
}
void TaskOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000008u;
}
void TaskOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
::google::protobuf::int32 TaskOptions::max_conections() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskOptions.max_conections)
  return max_conections_;
}
void TaskOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskOptions.max_conections)
}

inline const TaskOptions* TaskOptions::internal_default_instance() {
  return &TaskOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AgentOptions::kBindPortFieldNumber;
const int AgentOptions::kUploadLimitFieldNumber;
const int AgentOptions::kMaxConectionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AgentOptions::AgentOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.AgentOptions)
}

void AgentOptions::InitAsDefaultInstance() {
}

AgentOptions::AgentOptions(const AgentOptions& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.AgentOptions)
}

void AgentOptions::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bind_port_, 0, reinterpret_cast<char*>(&max_conections_) -
    reinterpret_cast<char*>(&bind_port_) + sizeof(max_conections_));
}

AgentOptions::~AgentOptions() {
  // @@protoc_insertion_point(destructor:bbts.message.AgentOptions)
  SharedDtor();
}

void AgentOptions::SharedDtor() {
}

void AgentOptions::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentOptions::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentOptions_descriptor_;
}

const AgentOptions& AgentOptions::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AgentOptions> AgentOptions_default_instance_;

AgentOptions* AgentOptions::New(::google::protobuf::Arena* arena) const {
  AgentOptions* n = new AgentOptions;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AgentOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.AgentOptions)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AgentOptions, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AgentOptions*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(bind_port_, max_conections_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AgentOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.AgentOptions)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 bind_port = 1;
      case 1: {
        if (tag == 8) {
          set_has_bind_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_upload_limit;
        break;
      }

      // optional int32 upload_limit = 2;
      case 2: {
        if (tag == 16) {
         parse_upload_limit:
          set_has_upload_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_max_conections;
        break;
      }

      // optional int32 max_conections = 4;
      case 4: {
        if (tag == 32) {
         parse_max_conections:
          set_has_max_conections();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_conections_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.AgentOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.AgentOptions)
  return false;
#undef DO_
}

void AgentOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.AgentOptions)
  // optional int32 bind_port = 1;
  if (has_bind_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bind_port(), output);
  }

  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_limit(), output);
  }

  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->max_conections(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.AgentOptions)
}

::google::protobuf::uint8* AgentOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.AgentOptions)
  // optional int32 bind_port = 1;
  if (has_bind_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bind_port(), target);
  }

  // optional int32 upload_limit = 2;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_limit(), target);
  }

  // optional int32 max_conections = 4;
  if (has_max_conections()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->max_conections(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.AgentOptions)
  return target;
}

size_t AgentOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.AgentOptions)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 bind_port = 1;
    if (has_bind_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind_port());
    }

    // optional int32 upload_limit = 2;
    if (has_upload_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }

    // optional int32 max_conections = 4;
    if (has_max_conections()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_conections());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.AgentOptions)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AgentOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AgentOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.AgentOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.AgentOptions)
    UnsafeMergeFrom(*source);
  }
}

void AgentOptions::MergeFrom(const AgentOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.AgentOptions)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AgentOptions::UnsafeMergeFrom(const AgentOptions& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bind_port()) {
      set_bind_port(from.bind_port());
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_max_conections()) {
      set_max_conections(from.max_conections());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AgentOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.AgentOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentOptions::CopyFrom(const AgentOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.AgentOptions)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AgentOptions::IsInitialized() const {

  return true;
}

void AgentOptions::Swap(AgentOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AgentOptions::InternalSwap(AgentOptions* other) {
  std::swap(bind_port_, other->bind_port_);
  std::swap(upload_limit_, other->upload_limit_);
  std::swap(max_conections_, other->max_conections_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AgentOptions::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentOptions_descriptor_;
  metadata.reflection = AgentOptions_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AgentOptions

// optional int32 bind_port = 1;
bool AgentOptions::has_bind_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AgentOptions::set_has_bind_port() {
  _has_bits_[0] |= 0x00000001u;
}
void AgentOptions::clear_has_bind_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void AgentOptions::clear_bind_port() {
  bind_port_ = 0;
  clear_has_bind_port();
}
::google::protobuf::int32 AgentOptions::bind_port() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.bind_port)
  return bind_port_;
}
void AgentOptions::set_bind_port(::google::protobuf::int32 value) {
  set_has_bind_port();
  bind_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.bind_port)
}

// optional int32 upload_limit = 2;
bool AgentOptions::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AgentOptions::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void AgentOptions::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void AgentOptions::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
::google::protobuf::int32 AgentOptions::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.upload_limit)
  return upload_limit_;
}
void AgentOptions::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.upload_limit)
}

// optional int32 max_conections = 4;
bool AgentOptions::has_max_conections() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AgentOptions::set_has_max_conections() {
  _has_bits_[0] |= 0x00000004u;
}
void AgentOptions::clear_has_max_conections() {
  _has_bits_[0] &= ~0x00000004u;
}
void AgentOptions::clear_max_conections() {
  max_conections_ = 0;
  clear_has_max_conections();
}
::google::protobuf::int32 AgentOptions::max_conections() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentOptions.max_conections)
  return max_conections_;
}
void AgentOptions::set_max_conections(::google::protobuf::int32 value) {
  set_has_max_conections();
  max_conections_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentOptions.max_conections)
}

inline const AgentOptions* AgentOptions::internal_default_instance() {
  return &AgentOptions_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* TaskStatus_status_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_status_t_descriptor_;
}
bool TaskStatus_status_t_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TaskStatus_status_t TaskStatus::UNKNOW;
const TaskStatus_status_t TaskStatus::ERROR;
const TaskStatus_status_t TaskStatus::CHECKQ;
const TaskStatus_status_t TaskStatus::CHECKING;
const TaskStatus_status_t TaskStatus::DTORRENT;
const TaskStatus_status_t TaskStatus::DOWNLOAD;
const TaskStatus_status_t TaskStatus::PAUSED;
const TaskStatus_status_t TaskStatus::SEEDING;
const TaskStatus_status_t TaskStatus::FINISHED;
const TaskStatus_status_t TaskStatus::CANCELED;
const TaskStatus_status_t TaskStatus::status_t_MIN;
const TaskStatus_status_t TaskStatus::status_t_MAX;
const int TaskStatus::status_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskStatus::kTaskFieldNumber;
const int TaskStatus::kStatusFieldNumber;
const int TaskStatus::kProgressFieldNumber;
const int TaskStatus::kErrorFieldNumber;
const int TaskStatus::kTotalDownloadFieldNumber;
const int TaskStatus::kTotalUploadFieldNumber;
const int TaskStatus::kDownloadRateFieldNumber;
const int TaskStatus::kUploadRateFieldNumber;
const int TaskStatus::kNumPeersFieldNumber;
const int TaskStatus::kNumSeedsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskStatus::TaskStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.TaskStatus)
}

void TaskStatus::InitAsDefaultInstance() {
  task_ = const_cast< ::bbts::message::Task*>(
      ::bbts::message::Task::internal_default_instance());
}

TaskStatus::TaskStatus(const TaskStatus& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.TaskStatus)
}

void TaskStatus::SharedCtor() {
  _cached_size_ = 0;
  error_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_ = NULL;
  ::memset(&status_, 0, reinterpret_cast<char*>(&num_seeds_) -
    reinterpret_cast<char*>(&status_) + sizeof(num_seeds_));
}

TaskStatus::~TaskStatus() {
  // @@protoc_insertion_point(destructor:bbts.message.TaskStatus)
  SharedDtor();
}

void TaskStatus::SharedDtor() {
  error_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != &TaskStatus_default_instance_.get()) {
    delete task_;
  }
}

void TaskStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskStatus_descriptor_;
}

const TaskStatus& TaskStatus::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskStatus> TaskStatus_default_instance_;

TaskStatus* TaskStatus::New(::google::protobuf::Arena* arena) const {
  TaskStatus* n = new TaskStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.TaskStatus)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TaskStatus, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TaskStatus*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(status_, upload_rate_);
    if (has_task()) {
      if (task_ != NULL) task_->::bbts::message::Task::Clear();
    }
    if (has_error()) {
      error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(num_peers_, num_seeds_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.TaskStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.Task task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional .bbts.message.TaskStatus.status_t status = 2;
      case 2: {
        if (tag == 16) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bbts::message::TaskStatus_status_t_IsValid(value)) {
            set_status(static_cast< ::bbts::message::TaskStatus_status_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_progress;
        break;
      }

      // optional int32 progress = 3;
      case 3: {
        if (tag == 24) {
         parse_progress:
          set_has_progress();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &progress_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional string error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.TaskStatus.error");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_total_download;
        break;
      }

      // optional int64 total_download = 5;
      case 5: {
        if (tag == 40) {
         parse_total_download:
          set_has_total_download();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_download_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_total_upload;
        break;
      }

      // optional int64 total_upload = 6;
      case 6: {
        if (tag == 48) {
         parse_total_upload:
          set_has_total_upload();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_upload_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_download_rate;
        break;
      }

      // optional int32 download_rate = 7;
      case 7: {
        if (tag == 56) {
         parse_download_rate:
          set_has_download_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_upload_rate;
        break;
      }

      // optional int32 upload_rate = 8;
      case 8: {
        if (tag == 64) {
         parse_upload_rate:
          set_has_upload_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_rate_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_num_peers;
        break;
      }

      // optional int32 num_peers = 9;
      case 9: {
        if (tag == 72) {
         parse_num_peers:
          set_has_num_peers();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_peers_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_num_seeds;
        break;
      }

      // optional int32 num_seeds = 10;
      case 10: {
        if (tag == 80) {
         parse_num_seeds:
          set_has_num_seeds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_seeds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.TaskStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.TaskStatus)
  return false;
#undef DO_
}

void TaskStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.TaskStatus)
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->task_, output);
  }

  // optional .bbts.message.TaskStatus.status_t status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->status(), output);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->progress(), output);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.TaskStatus.error");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->error(), output);
  }

  // optional int64 total_download = 5;
  if (has_total_download()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->total_download(), output);
  }

  // optional int64 total_upload = 6;
  if (has_total_upload()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->total_upload(), output);
  }

  // optional int32 download_rate = 7;
  if (has_download_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->download_rate(), output);
  }

  // optional int32 upload_rate = 8;
  if (has_upload_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->upload_rate(), output);
  }

  // optional int32 num_peers = 9;
  if (has_num_peers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->num_peers(), output);
  }

  // optional int32 num_seeds = 10;
  if (has_num_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num_seeds(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.TaskStatus)
}

::google::protobuf::uint8* TaskStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.TaskStatus)
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->task_, false, target);
  }

  // optional .bbts.message.TaskStatus.status_t status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->status(), target);
  }

  // optional int32 progress = 3;
  if (has_progress()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->progress(), target);
  }

  // optional string error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.TaskStatus.error");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->error(), target);
  }

  // optional int64 total_download = 5;
  if (has_total_download()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->total_download(), target);
  }

  // optional int64 total_upload = 6;
  if (has_total_upload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->total_upload(), target);
  }

  // optional int32 download_rate = 7;
  if (has_download_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->download_rate(), target);
  }

  // optional int32 upload_rate = 8;
  if (has_upload_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->upload_rate(), target);
  }

  // optional int32 num_peers = 9;
  if (has_num_peers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->num_peers(), target);
  }

  // optional int32 num_seeds = 10;
  if (has_num_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num_seeds(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.TaskStatus)
  return target;
}

size_t TaskStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.TaskStatus)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional .bbts.message.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->task_);
    }

    // optional .bbts.message.TaskStatus.status_t status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional int32 progress = 3;
    if (has_progress()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->progress());
    }

    // optional string error = 4;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }

    // optional int64 total_download = 5;
    if (has_total_download()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_download());
    }

    // optional int64 total_upload = 6;
    if (has_total_upload()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->total_upload());
    }

    // optional int32 download_rate = 7;
    if (has_download_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_rate());
    }

    // optional int32 upload_rate = 8;
    if (has_upload_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_rate());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional int32 num_peers = 9;
    if (has_num_peers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_peers());
    }

    // optional int32 num_seeds = 10;
    if (has_num_seeds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_seeds());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.TaskStatus)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.TaskStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.TaskStatus)
    UnsafeMergeFrom(*source);
  }
}

void TaskStatus::MergeFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.TaskStatus)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskStatus::UnsafeMergeFrom(const TaskStatus& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::bbts::message::Task::MergeFrom(from.task());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_progress()) {
      set_progress(from.progress());
    }
    if (from.has_error()) {
      set_has_error();
      error_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.error_);
    }
    if (from.has_total_download()) {
      set_total_download(from.total_download());
    }
    if (from.has_total_upload()) {
      set_total_upload(from.total_upload());
    }
    if (from.has_download_rate()) {
      set_download_rate(from.download_rate());
    }
    if (from.has_upload_rate()) {
      set_upload_rate(from.upload_rate());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_num_peers()) {
      set_num_peers(from.num_peers());
    }
    if (from.has_num_seeds()) {
      set_num_seeds(from.num_seeds());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TaskStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.TaskStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskStatus::CopyFrom(const TaskStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.TaskStatus)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskStatus::IsInitialized() const {

  return true;
}

void TaskStatus::Swap(TaskStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskStatus::InternalSwap(TaskStatus* other) {
  std::swap(task_, other->task_);
  std::swap(status_, other->status_);
  std::swap(progress_, other->progress_);
  error_.Swap(&other->error_);
  std::swap(total_download_, other->total_download_);
  std::swap(total_upload_, other->total_upload_);
  std::swap(download_rate_, other->download_rate_);
  std::swap(upload_rate_, other->upload_rate_);
  std::swap(num_peers_, other->num_peers_);
  std::swap(num_seeds_, other->num_seeds_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskStatus_descriptor_;
  metadata.reflection = TaskStatus_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskStatus

// optional .bbts.message.Task task = 1;
bool TaskStatus::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskStatus::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskStatus::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskStatus::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
const ::bbts::message::Task& TaskStatus::task() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.task)
  return task_ != NULL ? *task_
                         : *::bbts::message::Task::internal_default_instance();
}
::bbts::message::Task* TaskStatus::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::bbts::message::Task;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskStatus.task)
  return task_;
}
::bbts::message::Task* TaskStatus::release_task() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskStatus.task)
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void TaskStatus::set_allocated_task(::bbts::message::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskStatus.task)
}

// optional .bbts.message.TaskStatus.status_t status = 2;
bool TaskStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskStatus::clear_status() {
  status_ = 0;
  clear_has_status();
}
::bbts::message::TaskStatus_status_t TaskStatus::status() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.status)
  return static_cast< ::bbts::message::TaskStatus_status_t >(status_);
}
void TaskStatus::set_status(::bbts::message::TaskStatus_status_t value) {
  assert(::bbts::message::TaskStatus_status_t_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.status)
}

// optional int32 progress = 3;
bool TaskStatus::has_progress() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TaskStatus::set_has_progress() {
  _has_bits_[0] |= 0x00000004u;
}
void TaskStatus::clear_has_progress() {
  _has_bits_[0] &= ~0x00000004u;
}
void TaskStatus::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
::google::protobuf::int32 TaskStatus::progress() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.progress)
  return progress_;
}
void TaskStatus::set_progress(::google::protobuf::int32 value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.progress)
}

// optional string error = 4;
bool TaskStatus::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TaskStatus::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
void TaskStatus::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
void TaskStatus::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
const ::std::string& TaskStatus::error() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.error)
  return error_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStatus::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.error)
}
void TaskStatus::set_error(const char* value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.TaskStatus.error)
}
void TaskStatus::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.TaskStatus.error)
}
::std::string* TaskStatus::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskStatus.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TaskStatus::release_error() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskStatus.error)
  clear_has_error();
  return error_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TaskStatus::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskStatus.error)
}

// optional int64 total_download = 5;
bool TaskStatus::has_total_download() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TaskStatus::set_has_total_download() {
  _has_bits_[0] |= 0x00000010u;
}
void TaskStatus::clear_has_total_download() {
  _has_bits_[0] &= ~0x00000010u;
}
void TaskStatus::clear_total_download() {
  total_download_ = GOOGLE_LONGLONG(0);
  clear_has_total_download();
}
::google::protobuf::int64 TaskStatus::total_download() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.total_download)
  return total_download_;
}
void TaskStatus::set_total_download(::google::protobuf::int64 value) {
  set_has_total_download();
  total_download_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.total_download)
}

// optional int64 total_upload = 6;
bool TaskStatus::has_total_upload() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TaskStatus::set_has_total_upload() {
  _has_bits_[0] |= 0x00000020u;
}
void TaskStatus::clear_has_total_upload() {
  _has_bits_[0] &= ~0x00000020u;
}
void TaskStatus::clear_total_upload() {
  total_upload_ = GOOGLE_LONGLONG(0);
  clear_has_total_upload();
}
::google::protobuf::int64 TaskStatus::total_upload() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.total_upload)
  return total_upload_;
}
void TaskStatus::set_total_upload(::google::protobuf::int64 value) {
  set_has_total_upload();
  total_upload_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.total_upload)
}

// optional int32 download_rate = 7;
bool TaskStatus::has_download_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TaskStatus::set_has_download_rate() {
  _has_bits_[0] |= 0x00000040u;
}
void TaskStatus::clear_has_download_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
void TaskStatus::clear_download_rate() {
  download_rate_ = 0;
  clear_has_download_rate();
}
::google::protobuf::int32 TaskStatus::download_rate() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.download_rate)
  return download_rate_;
}
void TaskStatus::set_download_rate(::google::protobuf::int32 value) {
  set_has_download_rate();
  download_rate_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.download_rate)
}

// optional int32 upload_rate = 8;
bool TaskStatus::has_upload_rate() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TaskStatus::set_has_upload_rate() {
  _has_bits_[0] |= 0x00000080u;
}
void TaskStatus::clear_has_upload_rate() {
  _has_bits_[0] &= ~0x00000080u;
}
void TaskStatus::clear_upload_rate() {
  upload_rate_ = 0;
  clear_has_upload_rate();
}
::google::protobuf::int32 TaskStatus::upload_rate() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.upload_rate)
  return upload_rate_;
}
void TaskStatus::set_upload_rate(::google::protobuf::int32 value) {
  set_has_upload_rate();
  upload_rate_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.upload_rate)
}

// optional int32 num_peers = 9;
bool TaskStatus::has_num_peers() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TaskStatus::set_has_num_peers() {
  _has_bits_[0] |= 0x00000100u;
}
void TaskStatus::clear_has_num_peers() {
  _has_bits_[0] &= ~0x00000100u;
}
void TaskStatus::clear_num_peers() {
  num_peers_ = 0;
  clear_has_num_peers();
}
::google::protobuf::int32 TaskStatus::num_peers() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.num_peers)
  return num_peers_;
}
void TaskStatus::set_num_peers(::google::protobuf::int32 value) {
  set_has_num_peers();
  num_peers_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.num_peers)
}

// optional int32 num_seeds = 10;
bool TaskStatus::has_num_seeds() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TaskStatus::set_has_num_seeds() {
  _has_bits_[0] |= 0x00000200u;
}
void TaskStatus::clear_has_num_seeds() {
  _has_bits_[0] &= ~0x00000200u;
}
void TaskStatus::clear_num_seeds() {
  num_seeds_ = 0;
  clear_has_num_seeds();
}
::google::protobuf::int32 TaskStatus::num_seeds() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskStatus.num_seeds)
  return num_seeds_;
}
void TaskStatus::set_num_seeds(::google::protobuf::int32 value) {
  set_has_num_seeds();
  num_seeds_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskStatus.num_seeds)
}

inline const TaskStatus* TaskStatus::internal_default_instance() {
  return &TaskStatus_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Task::kTaskidFieldNumber;
const int Task::kTypeFieldNumber;
const int Task::kInfohashFieldNumber;
const int Task::kTorrentPathFieldNumber;
const int Task::kDataFieldNumber;
const int Task::kSavePathFieldNumber;
const int Task::kNewNameFieldNumber;
const int Task::kTrackersFieldNumber;
const int Task::kCmdFieldNumber;
const int Task::kUidFieldNumber;
const int Task::kGidFieldNumber;
const int Task::kSeedingTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Task::Task()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.Task)
}

void Task::InitAsDefaultInstance() {
}

Task::Task(const Task& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.Task)
}

void Task::SharedCtor() {
  _cached_size_ = 0;
  infohash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  torrent_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&taskid_, 0, reinterpret_cast<char*>(&seeding_time_) -
    reinterpret_cast<char*>(&taskid_) + sizeof(seeding_time_));
  type_ = 2;
}

Task::~Task() {
  // @@protoc_insertion_point(destructor:bbts.message.Task)
  SharedDtor();
}

void Task::SharedDtor() {
  infohash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  torrent_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  save_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cmd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Task::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Task::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Task_descriptor_;
}

const Task& Task::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Task> Task_default_instance_;

Task* Task::New(::google::protobuf::Arena* arena) const {
  Task* n = new Task;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Task::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.Task)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Task, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Task*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    taskid_ = GOOGLE_LONGLONG(0);
    type_ = 2;
    if (has_infohash()) {
      infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_torrent_path()) {
      torrent_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_save_path()) {
      save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_new_name()) {
      new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ZR_(uid_, seeding_time_);
    if (has_cmd()) {
      cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  trackers_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Task::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.Task)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (tag == 8) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional .bbts.message.TaskType type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bbts::message::TaskType_IsValid(value)) {
            set_type(static_cast< ::bbts::message::TaskType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_infohash;
        break;
      }

      // optional string infohash = 3;
      case 3: {
        if (tag == 26) {
         parse_infohash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infohash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infohash().data(), this->infohash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Task.infohash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_torrent_path;
        break;
      }

      // optional string torrent_path = 4;
      case 4: {
        if (tag == 34) {
         parse_torrent_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_torrent_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->torrent_path().data(), this->torrent_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Task.torrent_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (tag == 42) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_save_path;
        break;
      }

      // optional string save_path = 6;
      case 6: {
        if (tag == 50) {
         parse_save_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_save_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->save_path().data(), this->save_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Task.save_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_new_name;
        break;
      }

      // optional string new_name = 7;
      case 7: {
        if (tag == 58) {
         parse_new_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Task.new_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_trackers;
        break;
      }

      // repeated .bbts.message.Host trackers = 8;
      case 8: {
        if (tag == 66) {
         parse_trackers:
          DO_(input->IncrementRecursionDepth());
         parse_loop_trackers:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_trackers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_loop_trackers;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(162)) goto parse_cmd;
        break;
      }

      // optional string cmd = 20;
      case 20: {
        if (tag == 162) {
         parse_cmd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Task.cmd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_uid;
        break;
      }

      // optional int32 uid = 21;
      case 21: {
        if (tag == 168) {
         parse_uid:
          set_has_uid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_gid;
        break;
      }

      // optional int32 gid = 22;
      case 22: {
        if (tag == 176) {
         parse_gid:
          set_has_gid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_seeding_time;
        break;
      }

      // optional int32 seeding_time = 25;
      case 25: {
        if (tag == 200) {
         parse_seeding_time:
          set_has_seeding_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.Task)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.Task)
  return false;
#undef DO_
}

void Task::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.Task)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }

  // optional .bbts.message.TaskType type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional string infohash = 3;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.infohash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->infohash(), output);
  }

  // optional string torrent_path = 4;
  if (has_torrent_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->torrent_path().data(), this->torrent_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.torrent_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->torrent_path(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // optional string save_path = 6;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.save_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->save_path(), output);
  }

  // optional string new_name = 7;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.new_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->new_name(), output);
  }

  // repeated .bbts.message.Host trackers = 8;
  for (unsigned int i = 0, n = this->trackers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->trackers(i), output);
  }

  // optional string cmd = 20;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.cmd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->cmd(), output);
  }

  // optional int32 uid = 21;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->uid(), output);
  }

  // optional int32 gid = 22;
  if (has_gid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->gid(), output);
  }

  // optional int32 seeding_time = 25;
  if (has_seeding_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->seeding_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.Task)
}

::google::protobuf::uint8* Task::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.Task)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }

  // optional .bbts.message.TaskType type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional string infohash = 3;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.infohash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->infohash(), target);
  }

  // optional string torrent_path = 4;
  if (has_torrent_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->torrent_path().data(), this->torrent_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.torrent_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->torrent_path(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  // optional string save_path = 6;
  if (has_save_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->save_path().data(), this->save_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.save_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->save_path(), target);
  }

  // optional string new_name = 7;
  if (has_new_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.new_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->new_name(), target);
  }

  // repeated .bbts.message.Host trackers = 8;
  for (unsigned int i = 0, n = this->trackers_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->trackers(i), false, target);
  }

  // optional string cmd = 20;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Task.cmd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->cmd(), target);
  }

  // optional int32 uid = 21;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->uid(), target);
  }

  // optional int32 gid = 22;
  if (has_gid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->gid(), target);
  }

  // optional int32 seeding_time = 25;
  if (has_seeding_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->seeding_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.Task)
  return target;
}

size_t Task::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.Task)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }

    // optional .bbts.message.TaskType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional string infohash = 3;
    if (has_infohash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infohash());
    }

    // optional string torrent_path = 4;
    if (has_torrent_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->torrent_path());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

    // optional string save_path = 6;
    if (has_save_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->save_path());
    }

    // optional string new_name = 7;
    if (has_new_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_name());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional string cmd = 20;
    if (has_cmd()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // optional int32 uid = 21;
    if (has_uid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uid());
    }

    // optional int32 gid = 22;
    if (has_gid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gid());
    }

    // optional int32 seeding_time = 25;
    if (has_seeding_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_time());
    }

  }
  // repeated .bbts.message.Host trackers = 8;
  {
    unsigned int count = this->trackers_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trackers(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Task::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.Task)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Task* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Task>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.Task)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.Task)
    UnsafeMergeFrom(*source);
  }
}

void Task::MergeFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.Task)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Task::UnsafeMergeFrom(const Task& from) {
  GOOGLE_DCHECK(&from != this);
  trackers_.MergeFrom(from.trackers_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_infohash()) {
      set_has_infohash();
      infohash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infohash_);
    }
    if (from.has_torrent_path()) {
      set_has_torrent_path();
      torrent_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.torrent_path_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
    if (from.has_save_path()) {
      set_has_save_path();
      save_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.save_path_);
    }
    if (from.has_new_name()) {
      set_has_new_name();
      new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cmd()) {
      set_has_cmd();
      cmd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.cmd_);
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_gid()) {
      set_gid(from.gid());
    }
    if (from.has_seeding_time()) {
      set_seeding_time(from.seeding_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Task::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.Task)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Task::CopyFrom(const Task& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.Task)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Task::IsInitialized() const {

  return true;
}

void Task::Swap(Task* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Task::InternalSwap(Task* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(type_, other->type_);
  infohash_.Swap(&other->infohash_);
  torrent_path_.Swap(&other->torrent_path_);
  data_.Swap(&other->data_);
  save_path_.Swap(&other->save_path_);
  new_name_.Swap(&other->new_name_);
  trackers_.UnsafeArenaSwap(&other->trackers_);
  cmd_.Swap(&other->cmd_);
  std::swap(uid_, other->uid_);
  std::swap(gid_, other->gid_);
  std::swap(seeding_time_, other->seeding_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Task::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Task_descriptor_;
  metadata.reflection = Task_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Task

// optional int64 taskid = 1;
bool Task::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Task::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void Task::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void Task::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
::google::protobuf::int64 Task::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.taskid)
  return taskid_;
}
void Task::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.taskid)
}

// optional .bbts.message.TaskType type = 2;
bool Task::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Task::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
void Task::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void Task::clear_type() {
  type_ = 2;
  clear_has_type();
}
::bbts::message::TaskType Task::type() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.type)
  return static_cast< ::bbts::message::TaskType >(type_);
}
void Task::set_type(::bbts::message::TaskType value) {
  assert(::bbts::message::TaskType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.type)
}

// optional string infohash = 3;
bool Task::has_infohash() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Task::set_has_infohash() {
  _has_bits_[0] |= 0x00000004u;
}
void Task::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000004u;
}
void Task::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infohash();
}
const ::std::string& Task::infohash() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_infohash(const ::std::string& value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.infohash)
}
void Task::set_infohash(const char* value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.infohash)
}
void Task::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.infohash)
}
::std::string* Task::mutable_infohash() {
  set_has_infohash();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_infohash() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.infohash)
  clear_has_infohash();
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    set_has_infohash();
  } else {
    clear_has_infohash();
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.infohash)
}

// optional string torrent_path = 4;
bool Task::has_torrent_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Task::set_has_torrent_path() {
  _has_bits_[0] |= 0x00000008u;
}
void Task::clear_has_torrent_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void Task::clear_torrent_path() {
  torrent_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_torrent_path();
}
const ::std::string& Task::torrent_path() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.torrent_path)
  return torrent_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_torrent_path(const ::std::string& value) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.torrent_path)
}
void Task::set_torrent_path(const char* value) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.torrent_path)
}
void Task::set_torrent_path(const char* value, size_t size) {
  set_has_torrent_path();
  torrent_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.torrent_path)
}
::std::string* Task::mutable_torrent_path() {
  set_has_torrent_path();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.torrent_path)
  return torrent_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_torrent_path() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.torrent_path)
  clear_has_torrent_path();
  return torrent_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_torrent_path(::std::string* torrent_path) {
  if (torrent_path != NULL) {
    set_has_torrent_path();
  } else {
    clear_has_torrent_path();
  }
  torrent_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), torrent_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.torrent_path)
}

// optional bytes data = 5;
bool Task::has_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Task::set_has_data() {
  _has_bits_[0] |= 0x00000010u;
}
void Task::clear_has_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void Task::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Task::data() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.data)
}
void Task::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.data)
}
void Task::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.data)
}
::std::string* Task::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_data() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.data)
}

// optional string save_path = 6;
bool Task::has_save_path() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Task::set_has_save_path() {
  _has_bits_[0] |= 0x00000020u;
}
void Task::clear_has_save_path() {
  _has_bits_[0] &= ~0x00000020u;
}
void Task::clear_save_path() {
  save_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_save_path();
}
const ::std::string& Task::save_path() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.save_path)
  return save_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_save_path(const ::std::string& value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.save_path)
}
void Task::set_save_path(const char* value) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.save_path)
}
void Task::set_save_path(const char* value, size_t size) {
  set_has_save_path();
  save_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.save_path)
}
::std::string* Task::mutable_save_path() {
  set_has_save_path();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.save_path)
  return save_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_save_path() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.save_path)
  clear_has_save_path();
  return save_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_save_path(::std::string* save_path) {
  if (save_path != NULL) {
    set_has_save_path();
  } else {
    clear_has_save_path();
  }
  save_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), save_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.save_path)
}

// optional string new_name = 7;
bool Task::has_new_name() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Task::set_has_new_name() {
  _has_bits_[0] |= 0x00000040u;
}
void Task::clear_has_new_name() {
  _has_bits_[0] &= ~0x00000040u;
}
void Task::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_new_name();
}
const ::std::string& Task::new_name() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.new_name)
  return new_name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_new_name(const ::std::string& value) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.new_name)
}
void Task::set_new_name(const char* value) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.new_name)
}
void Task::set_new_name(const char* value, size_t size) {
  set_has_new_name();
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.new_name)
}
::std::string* Task::mutable_new_name() {
  set_has_new_name();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_new_name() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.new_name)
  clear_has_new_name();
  return new_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    set_has_new_name();
  } else {
    clear_has_new_name();
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.new_name)
}

// repeated .bbts.message.Host trackers = 8;
int Task::trackers_size() const {
  return trackers_.size();
}
void Task::clear_trackers() {
  trackers_.Clear();
}
const ::bbts::message::Host& Task::trackers(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.trackers)
  return trackers_.Get(index);
}
::bbts::message::Host* Task::mutable_trackers(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.trackers)
  return trackers_.Mutable(index);
}
::bbts::message::Host* Task::add_trackers() {
  // @@protoc_insertion_point(field_add:bbts.message.Task.trackers)
  return trackers_.Add();
}
::google::protobuf::RepeatedPtrField< ::bbts::message::Host >*
Task::mutable_trackers() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.Task.trackers)
  return &trackers_;
}
const ::google::protobuf::RepeatedPtrField< ::bbts::message::Host >&
Task::trackers() const {
  // @@protoc_insertion_point(field_list:bbts.message.Task.trackers)
  return trackers_;
}

// optional string cmd = 20;
bool Task::has_cmd() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Task::set_has_cmd() {
  _has_bits_[0] |= 0x00000100u;
}
void Task::clear_has_cmd() {
  _has_bits_[0] &= ~0x00000100u;
}
void Task::clear_cmd() {
  cmd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cmd();
}
const ::std::string& Task::cmd() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.cmd)
  return cmd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_cmd(const ::std::string& value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Task.cmd)
}
void Task::set_cmd(const char* value) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Task.cmd)
}
void Task::set_cmd(const char* value, size_t size) {
  set_has_cmd();
  cmd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Task.cmd)
}
::std::string* Task::mutable_cmd() {
  set_has_cmd();
  // @@protoc_insertion_point(field_mutable:bbts.message.Task.cmd)
  return cmd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Task::release_cmd() {
  // @@protoc_insertion_point(field_release:bbts.message.Task.cmd)
  clear_has_cmd();
  return cmd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Task::set_allocated_cmd(::std::string* cmd) {
  if (cmd != NULL) {
    set_has_cmd();
  } else {
    clear_has_cmd();
  }
  cmd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cmd);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Task.cmd)
}

// optional int32 uid = 21;
bool Task::has_uid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Task::set_has_uid() {
  _has_bits_[0] |= 0x00000200u;
}
void Task::clear_has_uid() {
  _has_bits_[0] &= ~0x00000200u;
}
void Task::clear_uid() {
  uid_ = 0;
  clear_has_uid();
}
::google::protobuf::int32 Task::uid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.uid)
  return uid_;
}
void Task::set_uid(::google::protobuf::int32 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.uid)
}

// optional int32 gid = 22;
bool Task::has_gid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Task::set_has_gid() {
  _has_bits_[0] |= 0x00000400u;
}
void Task::clear_has_gid() {
  _has_bits_[0] &= ~0x00000400u;
}
void Task::clear_gid() {
  gid_ = 0;
  clear_has_gid();
}
::google::protobuf::int32 Task::gid() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.gid)
  return gid_;
}
void Task::set_gid(::google::protobuf::int32 value) {
  set_has_gid();
  gid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.gid)
}

// optional int32 seeding_time = 25;
bool Task::has_seeding_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Task::set_has_seeding_time() {
  _has_bits_[0] |= 0x00000800u;
}
void Task::clear_has_seeding_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void Task::clear_seeding_time() {
  seeding_time_ = 0;
  clear_has_seeding_time();
}
::google::protobuf::int32 Task::seeding_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.Task.seeding_time)
  return seeding_time_;
}
void Task::set_seeding_time(::google::protobuf::int32 value) {
  set_has_seeding_time();
  seeding_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.Task.seeding_time)
}

inline const Task* Task::internal_default_instance() {
  return &Task_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTask::kTaskFieldNumber;
const int AddTask::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTask::AddTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.AddTask)
}

void AddTask::InitAsDefaultInstance() {
  task_ = const_cast< ::bbts::message::Task*>(
      ::bbts::message::Task::internal_default_instance());
  options_ = const_cast< ::bbts::message::TaskOptions*>(
      ::bbts::message::TaskOptions::internal_default_instance());
}

AddTask::AddTask(const AddTask& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.AddTask)
}

void AddTask::SharedCtor() {
  _cached_size_ = 0;
  task_ = NULL;
  options_ = NULL;
}

AddTask::~AddTask() {
  // @@protoc_insertion_point(destructor:bbts.message.AddTask)
  SharedDtor();
}

void AddTask::SharedDtor() {
  if (this != &AddTask_default_instance_.get()) {
    delete task_;
    delete options_;
  }
}

void AddTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddTask_descriptor_;
}

const AddTask& AddTask::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AddTask> AddTask_default_instance_;

AddTask* AddTask::New(::google::protobuf::Arena* arena) const {
  AddTask* n = new AddTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AddTask::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.AddTask)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_task()) {
      if (task_ != NULL) task_->::bbts::message::Task::Clear();
    }
    if (has_options()) {
      if (options_ != NULL) options_->::bbts::message::TaskOptions::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AddTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.AddTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.Task task = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_options;
        break;
      }

      // optional .bbts.message.TaskOptions options = 2;
      case 2: {
        if (tag == 18) {
         parse_options:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.AddTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.AddTask)
  return false;
#undef DO_
}

void AddTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.AddTask)
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->task_, output);
  }

  // optional .bbts.message.TaskOptions options = 2;
  if (has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->options_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.AddTask)
}

::google::protobuf::uint8* AddTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.AddTask)
  // optional .bbts.message.Task task = 1;
  if (has_task()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->task_, false, target);
  }

  // optional .bbts.message.TaskOptions options = 2;
  if (has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->options_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.AddTask)
  return target;
}

size_t AddTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.AddTask)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .bbts.message.Task task = 1;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->task_);
    }

    // optional .bbts.message.TaskOptions options = 2;
    if (has_options()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->options_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.AddTask)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AddTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.AddTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.AddTask)
    UnsafeMergeFrom(*source);
  }
}

void AddTask::MergeFrom(const AddTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.AddTask)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AddTask::UnsafeMergeFrom(const AddTask& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_task()) {
      mutable_task()->::bbts::message::Task::MergeFrom(from.task());
    }
    if (from.has_options()) {
      mutable_options()->::bbts::message::TaskOptions::MergeFrom(from.options());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AddTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.AddTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTask::CopyFrom(const AddTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.AddTask)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AddTask::IsInitialized() const {

  return true;
}

void AddTask::Swap(AddTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTask::InternalSwap(AddTask* other) {
  std::swap(task_, other->task_);
  std::swap(options_, other->options_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AddTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddTask_descriptor_;
  metadata.reflection = AddTask_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AddTask

// optional .bbts.message.Task task = 1;
bool AddTask::has_task() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AddTask::set_has_task() {
  _has_bits_[0] |= 0x00000001u;
}
void AddTask::clear_has_task() {
  _has_bits_[0] &= ~0x00000001u;
}
void AddTask::clear_task() {
  if (task_ != NULL) task_->::bbts::message::Task::Clear();
  clear_has_task();
}
const ::bbts::message::Task& AddTask::task() const {
  // @@protoc_insertion_point(field_get:bbts.message.AddTask.task)
  return task_ != NULL ? *task_
                         : *::bbts::message::Task::internal_default_instance();
}
::bbts::message::Task* AddTask::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    task_ = new ::bbts::message::Task;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.AddTask.task)
  return task_;
}
::bbts::message::Task* AddTask::release_task() {
  // @@protoc_insertion_point(field_release:bbts.message.AddTask.task)
  clear_has_task();
  ::bbts::message::Task* temp = task_;
  task_ = NULL;
  return temp;
}
void AddTask::set_allocated_task(::bbts::message::Task* task) {
  delete task_;
  task_ = task;
  if (task) {
    set_has_task();
  } else {
    clear_has_task();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AddTask.task)
}

// optional .bbts.message.TaskOptions options = 2;
bool AddTask::has_options() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AddTask::set_has_options() {
  _has_bits_[0] |= 0x00000002u;
}
void AddTask::clear_has_options() {
  _has_bits_[0] &= ~0x00000002u;
}
void AddTask::clear_options() {
  if (options_ != NULL) options_->::bbts::message::TaskOptions::Clear();
  clear_has_options();
}
const ::bbts::message::TaskOptions& AddTask::options() const {
  // @@protoc_insertion_point(field_get:bbts.message.AddTask.options)
  return options_ != NULL ? *options_
                         : *::bbts::message::TaskOptions::internal_default_instance();
}
::bbts::message::TaskOptions* AddTask::mutable_options() {
  set_has_options();
  if (options_ == NULL) {
    options_ = new ::bbts::message::TaskOptions;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.AddTask.options)
  return options_;
}
::bbts::message::TaskOptions* AddTask::release_options() {
  // @@protoc_insertion_point(field_release:bbts.message.AddTask.options)
  clear_has_options();
  ::bbts::message::TaskOptions* temp = options_;
  options_ = NULL;
  return temp;
}
void AddTask::set_allocated_options(::bbts::message::TaskOptions* options) {
  delete options_;
  options_ = options;
  if (options) {
    set_has_options();
  } else {
    clear_has_options();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AddTask.options)
}

inline const AddTask* AddTask::internal_default_instance() {
  return &AddTask_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* BatchCtrl_ctrl_t_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrl_ctrl_t_descriptor_;
}
bool BatchCtrl_ctrl_t_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const BatchCtrl_ctrl_t BatchCtrl::CANCEL;
const BatchCtrl_ctrl_t BatchCtrl::PAUSE;
const BatchCtrl_ctrl_t BatchCtrl::RESUME;
const BatchCtrl_ctrl_t BatchCtrl::LIST;
const BatchCtrl_ctrl_t BatchCtrl::ctrl_t_MIN;
const BatchCtrl_ctrl_t BatchCtrl::ctrl_t_MAX;
const int BatchCtrl::ctrl_t_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchCtrl::kCtrlTypeFieldNumber;
const int BatchCtrl::kCtrlAllFieldNumber;
const int BatchCtrl::kTaskidsFieldNumber;
const int BatchCtrl::kInfohashsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchCtrl::BatchCtrl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.BatchCtrl)
}

void BatchCtrl::InitAsDefaultInstance() {
}

BatchCtrl::BatchCtrl(const BatchCtrl& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.BatchCtrl)
}

void BatchCtrl::SharedCtor() {
  _cached_size_ = 0;
  ctrl_all_ = false;
  ctrl_type_ = 1;
}

BatchCtrl::~BatchCtrl() {
  // @@protoc_insertion_point(destructor:bbts.message.BatchCtrl)
  SharedDtor();
}

void BatchCtrl::SharedDtor() {
}

void BatchCtrl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCtrl::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrl_descriptor_;
}

const BatchCtrl& BatchCtrl::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchCtrl> BatchCtrl_default_instance_;

BatchCtrl* BatchCtrl::New(::google::protobuf::Arena* arena) const {
  BatchCtrl* n = new BatchCtrl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchCtrl::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.BatchCtrl)
  if (_has_bits_[0 / 32] & 3u) {
    ctrl_type_ = 1;
    ctrl_all_ = false;
  }
  taskids_.Clear();
  infohashs_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchCtrl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.BatchCtrl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::bbts::message::BatchCtrl_ctrl_t_IsValid(value)) {
            set_ctrl_type(static_cast< ::bbts::message::BatchCtrl_ctrl_t >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ctrl_all;
        break;
      }

      // optional bool ctrl_all = 2;
      case 2: {
        if (tag == 16) {
         parse_ctrl_all:
          set_has_ctrl_all();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ctrl_all_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskids;
        break;
      }

      // repeated int64 taskids = 3;
      case 3: {
        if (tag == 24) {
         parse_taskids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_taskids())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_taskids())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_taskids;
        if (input->ExpectTag(34)) goto parse_infohashs;
        break;
      }

      // repeated string infohashs = 4;
      case 4: {
        if (tag == 34) {
         parse_infohashs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_infohashs()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infohashs(this->infohashs_size() - 1).data(),
            this->infohashs(this->infohashs_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.BatchCtrl.infohashs");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_infohashs;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.BatchCtrl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.BatchCtrl)
  return false;
#undef DO_
}

void BatchCtrl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.BatchCtrl)
  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  if (has_ctrl_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ctrl_type(), output);
  }

  // optional bool ctrl_all = 2;
  if (has_ctrl_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ctrl_all(), output);
  }

  // repeated int64 taskids = 3;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->taskids(i), output);
  }

  // repeated string infohashs = 4;
  for (int i = 0; i < this->infohashs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohashs(i).data(), this->infohashs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.BatchCtrl.infohashs");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->infohashs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.BatchCtrl)
}

::google::protobuf::uint8* BatchCtrl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.BatchCtrl)
  // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
  if (has_ctrl_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ctrl_type(), target);
  }

  // optional bool ctrl_all = 2;
  if (has_ctrl_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ctrl_all(), target);
  }

  // repeated int64 taskids = 3;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->taskids(i), target);
  }

  // repeated string infohashs = 4;
  for (int i = 0; i < this->infohashs_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohashs(i).data(), this->infohashs(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.BatchCtrl.infohashs");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->infohashs(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.BatchCtrl)
  return target;
}

size_t BatchCtrl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.BatchCtrl)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
    if (has_ctrl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ctrl_type());
    }

    // optional bool ctrl_all = 2;
    if (has_ctrl_all()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 taskids = 3;
  {
    size_t data_size = 0;
    unsigned int count = this->taskids_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->taskids(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->taskids_size());
    total_size += data_size;
  }

  // repeated string infohashs = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->infohashs_size());
  for (int i = 0; i < this->infohashs_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->infohashs(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCtrl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.BatchCtrl)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchCtrl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchCtrl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.BatchCtrl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.BatchCtrl)
    UnsafeMergeFrom(*source);
  }
}

void BatchCtrl::MergeFrom(const BatchCtrl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.BatchCtrl)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchCtrl::UnsafeMergeFrom(const BatchCtrl& from) {
  GOOGLE_DCHECK(&from != this);
  taskids_.UnsafeMergeFrom(from.taskids_);
  infohashs_.UnsafeMergeFrom(from.infohashs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ctrl_type()) {
      set_ctrl_type(from.ctrl_type());
    }
    if (from.has_ctrl_all()) {
      set_ctrl_all(from.ctrl_all());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BatchCtrl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.BatchCtrl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCtrl::CopyFrom(const BatchCtrl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.BatchCtrl)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchCtrl::IsInitialized() const {

  return true;
}

void BatchCtrl::Swap(BatchCtrl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchCtrl::InternalSwap(BatchCtrl* other) {
  std::swap(ctrl_type_, other->ctrl_type_);
  std::swap(ctrl_all_, other->ctrl_all_);
  taskids_.UnsafeArenaSwap(&other->taskids_);
  infohashs_.UnsafeArenaSwap(&other->infohashs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchCtrl::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchCtrl_descriptor_;
  metadata.reflection = BatchCtrl_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchCtrl

// optional .bbts.message.BatchCtrl.ctrl_t ctrl_type = 1;
bool BatchCtrl::has_ctrl_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BatchCtrl::set_has_ctrl_type() {
  _has_bits_[0] |= 0x00000001u;
}
void BatchCtrl::clear_has_ctrl_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void BatchCtrl::clear_ctrl_type() {
  ctrl_type_ = 1;
  clear_has_ctrl_type();
}
::bbts::message::BatchCtrl_ctrl_t BatchCtrl::ctrl_type() const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.ctrl_type)
  return static_cast< ::bbts::message::BatchCtrl_ctrl_t >(ctrl_type_);
}
void BatchCtrl::set_ctrl_type(::bbts::message::BatchCtrl_ctrl_t value) {
  assert(::bbts::message::BatchCtrl_ctrl_t_IsValid(value));
  set_has_ctrl_type();
  ctrl_type_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.ctrl_type)
}

// optional bool ctrl_all = 2;
bool BatchCtrl::has_ctrl_all() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BatchCtrl::set_has_ctrl_all() {
  _has_bits_[0] |= 0x00000002u;
}
void BatchCtrl::clear_has_ctrl_all() {
  _has_bits_[0] &= ~0x00000002u;
}
void BatchCtrl::clear_ctrl_all() {
  ctrl_all_ = false;
  clear_has_ctrl_all();
}
bool BatchCtrl::ctrl_all() const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.ctrl_all)
  return ctrl_all_;
}
void BatchCtrl::set_ctrl_all(bool value) {
  set_has_ctrl_all();
  ctrl_all_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.ctrl_all)
}

// repeated int64 taskids = 3;
int BatchCtrl::taskids_size() const {
  return taskids_.size();
}
void BatchCtrl::clear_taskids() {
  taskids_.Clear();
}
::google::protobuf::int64 BatchCtrl::taskids(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.taskids)
  return taskids_.Get(index);
}
void BatchCtrl::set_taskids(int index, ::google::protobuf::int64 value) {
  taskids_.Set(index, value);
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.taskids)
}
void BatchCtrl::add_taskids(::google::protobuf::int64 value) {
  taskids_.Add(value);
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrl.taskids)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
BatchCtrl::taskids() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrl.taskids)
  return taskids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
BatchCtrl::mutable_taskids() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrl.taskids)
  return &taskids_;
}

// repeated string infohashs = 4;
int BatchCtrl::infohashs_size() const {
  return infohashs_.size();
}
void BatchCtrl::clear_infohashs() {
  infohashs_.Clear();
}
const ::std::string& BatchCtrl::infohashs(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Get(index);
}
::std::string* BatchCtrl::mutable_infohashs(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Mutable(index);
}
void BatchCtrl::set_infohashs(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:bbts.message.BatchCtrl.infohashs)
  infohashs_.Mutable(index)->assign(value);
}
void BatchCtrl::set_infohashs(int index, const char* value) {
  infohashs_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bbts.message.BatchCtrl.infohashs)
}
void BatchCtrl::set_infohashs(int index, const char* value, size_t size) {
  infohashs_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bbts.message.BatchCtrl.infohashs)
}
::std::string* BatchCtrl::add_infohashs() {
  // @@protoc_insertion_point(field_add_mutable:bbts.message.BatchCtrl.infohashs)
  return infohashs_.Add();
}
void BatchCtrl::add_infohashs(const ::std::string& value) {
  infohashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrl.infohashs)
}
void BatchCtrl::add_infohashs(const char* value) {
  infohashs_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bbts.message.BatchCtrl.infohashs)
}
void BatchCtrl::add_infohashs(const char* value, size_t size) {
  infohashs_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bbts.message.BatchCtrl.infohashs)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
BatchCtrl::infohashs() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrl.infohashs)
  return infohashs_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
BatchCtrl::mutable_infohashs() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrl.infohashs)
  return &infohashs_;
}

inline const BatchCtrl* BatchCtrl::internal_default_instance() {
  return &BatchCtrl_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BaseRes::kRetCodeFieldNumber;
const int BaseRes::kFailMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BaseRes::BaseRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.BaseRes)
}

void BaseRes::InitAsDefaultInstance() {
}

BaseRes::BaseRes(const BaseRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.BaseRes)
}

void BaseRes::SharedCtor() {
  _cached_size_ = 0;
  fail_msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ret_code_ = 0;
}

BaseRes::~BaseRes() {
  // @@protoc_insertion_point(destructor:bbts.message.BaseRes)
  SharedDtor();
}

void BaseRes::SharedDtor() {
  fail_msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BaseRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseRes_descriptor_;
}

const BaseRes& BaseRes::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BaseRes> BaseRes_default_instance_;

BaseRes* BaseRes::New(::google::protobuf::Arena* arena) const {
  BaseRes* n = new BaseRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BaseRes::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.BaseRes)
  if (_has_bits_[0 / 32] & 3u) {
    ret_code_ = 0;
    if (has_fail_msg()) {
      fail_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BaseRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.BaseRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret_code = 1;
      case 1: {
        if (tag == 8) {
          set_has_ret_code();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_code_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_fail_msg;
        break;
      }

      // optional string fail_msg = 2;
      case 2: {
        if (tag == 18) {
         parse_fail_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fail_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fail_msg().data(), this->fail_msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.BaseRes.fail_msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.BaseRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.BaseRes)
  return false;
#undef DO_
}

void BaseRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.BaseRes)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret_code(), output);
  }

  // optional string fail_msg = 2;
  if (has_fail_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fail_msg().data(), this->fail_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.BaseRes.fail_msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->fail_msg(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.BaseRes)
}

::google::protobuf::uint8* BaseRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.BaseRes)
  // optional int32 ret_code = 1;
  if (has_ret_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret_code(), target);
  }

  // optional string fail_msg = 2;
  if (has_fail_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fail_msg().data(), this->fail_msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.BaseRes.fail_msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->fail_msg(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.BaseRes)
  return target;
}

size_t BaseRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.BaseRes)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 ret_code = 1;
    if (has_ret_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_code());
    }

    // optional string fail_msg = 2;
    if (has_fail_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fail_msg());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.BaseRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BaseRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BaseRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.BaseRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.BaseRes)
    UnsafeMergeFrom(*source);
  }
}

void BaseRes::MergeFrom(const BaseRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.BaseRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BaseRes::UnsafeMergeFrom(const BaseRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret_code()) {
      set_ret_code(from.ret_code());
    }
    if (from.has_fail_msg()) {
      set_has_fail_msg();
      fail_msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fail_msg_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BaseRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.BaseRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseRes::CopyFrom(const BaseRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.BaseRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BaseRes::IsInitialized() const {

  return true;
}

void BaseRes::Swap(BaseRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BaseRes::InternalSwap(BaseRes* other) {
  std::swap(ret_code_, other->ret_code_);
  fail_msg_.Swap(&other->fail_msg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BaseRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseRes_descriptor_;
  metadata.reflection = BaseRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BaseRes

// optional int32 ret_code = 1;
bool BaseRes::has_ret_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BaseRes::set_has_ret_code() {
  _has_bits_[0] |= 0x00000001u;
}
void BaseRes::clear_has_ret_code() {
  _has_bits_[0] &= ~0x00000001u;
}
void BaseRes::clear_ret_code() {
  ret_code_ = 0;
  clear_has_ret_code();
}
::google::protobuf::int32 BaseRes::ret_code() const {
  // @@protoc_insertion_point(field_get:bbts.message.BaseRes.ret_code)
  return ret_code_;
}
void BaseRes::set_ret_code(::google::protobuf::int32 value) {
  set_has_ret_code();
  ret_code_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.BaseRes.ret_code)
}

// optional string fail_msg = 2;
bool BaseRes::has_fail_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BaseRes::set_has_fail_msg() {
  _has_bits_[0] |= 0x00000002u;
}
void BaseRes::clear_has_fail_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
void BaseRes::clear_fail_msg() {
  fail_msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fail_msg();
}
const ::std::string& BaseRes::fail_msg() const {
  // @@protoc_insertion_point(field_get:bbts.message.BaseRes.fail_msg)
  return fail_msg_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseRes::set_fail_msg(const ::std::string& value) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.BaseRes.fail_msg)
}
void BaseRes::set_fail_msg(const char* value) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.BaseRes.fail_msg)
}
void BaseRes::set_fail_msg(const char* value, size_t size) {
  set_has_fail_msg();
  fail_msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.BaseRes.fail_msg)
}
::std::string* BaseRes::mutable_fail_msg() {
  set_has_fail_msg();
  // @@protoc_insertion_point(field_mutable:bbts.message.BaseRes.fail_msg)
  return fail_msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* BaseRes::release_fail_msg() {
  // @@protoc_insertion_point(field_release:bbts.message.BaseRes.fail_msg)
  clear_has_fail_msg();
  return fail_msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void BaseRes::set_allocated_fail_msg(::std::string* fail_msg) {
  if (fail_msg != NULL) {
    set_has_fail_msg();
  } else {
    clear_has_fail_msg();
  }
  fail_msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fail_msg);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.BaseRes.fail_msg)
}

inline const BaseRes* BaseRes::internal_default_instance() {
  return &BaseRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskRes::kTaskidFieldNumber;
const int TaskRes::kResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskRes::TaskRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.TaskRes)
}

void TaskRes::InitAsDefaultInstance() {
  res_ = const_cast< ::bbts::message::BaseRes*>(
      ::bbts::message::BaseRes::internal_default_instance());
}

TaskRes::TaskRes(const TaskRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.TaskRes)
}

void TaskRes::SharedCtor() {
  _cached_size_ = 0;
  res_ = NULL;
  taskid_ = GOOGLE_LONGLONG(0);
}

TaskRes::~TaskRes() {
  // @@protoc_insertion_point(destructor:bbts.message.TaskRes)
  SharedDtor();
}

void TaskRes::SharedDtor() {
  if (this != &TaskRes_default_instance_.get()) {
    delete res_;
  }
}

void TaskRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskRes_descriptor_;
}

const TaskRes& TaskRes::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TaskRes> TaskRes_default_instance_;

TaskRes* TaskRes::New(::google::protobuf::Arena* arena) const {
  TaskRes* n = new TaskRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TaskRes::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.TaskRes)
  if (_has_bits_[0 / 32] & 3u) {
    taskid_ = GOOGLE_LONGLONG(0);
    if (has_res()) {
      if (res_ != NULL) res_->::bbts::message::BaseRes::Clear();
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TaskRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.TaskRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 taskid = 1;
      case 1: {
        if (tag == 8) {
          set_has_taskid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &taskid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional .bbts.message.BaseRes res = 2;
      case 2: {
        if (tag == 18) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_res()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.TaskRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.TaskRes)
  return false;
#undef DO_
}

void TaskRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.TaskRes)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->taskid(), output);
  }

  // optional .bbts.message.BaseRes res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->res_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.TaskRes)
}

::google::protobuf::uint8* TaskRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.TaskRes)
  // optional int64 taskid = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->taskid(), target);
  }

  // optional .bbts.message.BaseRes res = 2;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->res_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.TaskRes)
  return target;
}

size_t TaskRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.TaskRes)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional int64 taskid = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->taskid());
    }

    // optional .bbts.message.BaseRes res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->res_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.TaskRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TaskRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.TaskRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.TaskRes)
    UnsafeMergeFrom(*source);
  }
}

void TaskRes::MergeFrom(const TaskRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.TaskRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TaskRes::UnsafeMergeFrom(const TaskRes& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_res()) {
      mutable_res()->::bbts::message::BaseRes::MergeFrom(from.res());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TaskRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.TaskRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskRes::CopyFrom(const TaskRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.TaskRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TaskRes::IsInitialized() const {

  return true;
}

void TaskRes::Swap(TaskRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskRes::InternalSwap(TaskRes* other) {
  std::swap(taskid_, other->taskid_);
  std::swap(res_, other->res_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TaskRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskRes_descriptor_;
  metadata.reflection = TaskRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TaskRes

// optional int64 taskid = 1;
bool TaskRes::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TaskRes::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
void TaskRes::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void TaskRes::clear_taskid() {
  taskid_ = GOOGLE_LONGLONG(0);
  clear_has_taskid();
}
::google::protobuf::int64 TaskRes::taskid() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskRes.taskid)
  return taskid_;
}
void TaskRes::set_taskid(::google::protobuf::int64 value) {
  set_has_taskid();
  taskid_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.TaskRes.taskid)
}

// optional .bbts.message.BaseRes res = 2;
bool TaskRes::has_res() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TaskRes::set_has_res() {
  _has_bits_[0] |= 0x00000002u;
}
void TaskRes::clear_has_res() {
  _has_bits_[0] &= ~0x00000002u;
}
void TaskRes::clear_res() {
  if (res_ != NULL) res_->::bbts::message::BaseRes::Clear();
  clear_has_res();
}
const ::bbts::message::BaseRes& TaskRes::res() const {
  // @@protoc_insertion_point(field_get:bbts.message.TaskRes.res)
  return res_ != NULL ? *res_
                         : *::bbts::message::BaseRes::internal_default_instance();
}
::bbts::message::BaseRes* TaskRes::mutable_res() {
  set_has_res();
  if (res_ == NULL) {
    res_ = new ::bbts::message::BaseRes;
  }
  // @@protoc_insertion_point(field_mutable:bbts.message.TaskRes.res)
  return res_;
}
::bbts::message::BaseRes* TaskRes::release_res() {
  // @@protoc_insertion_point(field_release:bbts.message.TaskRes.res)
  clear_has_res();
  ::bbts::message::BaseRes* temp = res_;
  res_ = NULL;
  return temp;
}
void TaskRes::set_allocated_res(::bbts::message::BaseRes* res) {
  delete res_;
  res_ = res;
  if (res) {
    set_has_res();
  } else {
    clear_has_res();
  }
  // @@protoc_insertion_point(field_set_allocated:bbts.message.TaskRes.res)
}

inline const TaskRes* TaskRes::internal_default_instance() {
  return &TaskRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchCtrlRes::kTasksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchCtrlRes::BatchCtrlRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.BatchCtrlRes)
}

void BatchCtrlRes::InitAsDefaultInstance() {
}

BatchCtrlRes::BatchCtrlRes(const BatchCtrlRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.BatchCtrlRes)
}

void BatchCtrlRes::SharedCtor() {
  _cached_size_ = 0;
}

BatchCtrlRes::~BatchCtrlRes() {
  // @@protoc_insertion_point(destructor:bbts.message.BatchCtrlRes)
  SharedDtor();
}

void BatchCtrlRes::SharedDtor() {
}

void BatchCtrlRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchCtrlRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchCtrlRes_descriptor_;
}

const BatchCtrlRes& BatchCtrlRes::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchCtrlRes> BatchCtrlRes_default_instance_;

BatchCtrlRes* BatchCtrlRes::New(::google::protobuf::Arena* arena) const {
  BatchCtrlRes* n = new BatchCtrlRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchCtrlRes::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.BatchCtrlRes)
  tasks_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchCtrlRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.BatchCtrlRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bbts.message.TaskRes tasks = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_tasks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_tasks;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.BatchCtrlRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.BatchCtrlRes)
  return false;
#undef DO_
}

void BatchCtrlRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.BatchCtrlRes)
  // repeated .bbts.message.TaskRes tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.BatchCtrlRes)
}

::google::protobuf::uint8* BatchCtrlRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.BatchCtrlRes)
  // repeated .bbts.message.TaskRes tasks = 1;
  for (unsigned int i = 0, n = this->tasks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->tasks(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.BatchCtrlRes)
  return target;
}

size_t BatchCtrlRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.BatchCtrlRes)
  size_t total_size = 0;

  // repeated .bbts.message.TaskRes tasks = 1;
  {
    unsigned int count = this->tasks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tasks(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchCtrlRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.BatchCtrlRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchCtrlRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchCtrlRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.BatchCtrlRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.BatchCtrlRes)
    UnsafeMergeFrom(*source);
  }
}

void BatchCtrlRes::MergeFrom(const BatchCtrlRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.BatchCtrlRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchCtrlRes::UnsafeMergeFrom(const BatchCtrlRes& from) {
  GOOGLE_DCHECK(&from != this);
  tasks_.MergeFrom(from.tasks_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BatchCtrlRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.BatchCtrlRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchCtrlRes::CopyFrom(const BatchCtrlRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.BatchCtrlRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchCtrlRes::IsInitialized() const {

  return true;
}

void BatchCtrlRes::Swap(BatchCtrlRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchCtrlRes::InternalSwap(BatchCtrlRes* other) {
  tasks_.UnsafeArenaSwap(&other->tasks_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchCtrlRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchCtrlRes_descriptor_;
  metadata.reflection = BatchCtrlRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchCtrlRes

// repeated .bbts.message.TaskRes tasks = 1;
int BatchCtrlRes::tasks_size() const {
  return tasks_.size();
}
void BatchCtrlRes::clear_tasks() {
  tasks_.Clear();
}
const ::bbts::message::TaskRes& BatchCtrlRes::tasks(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Get(index);
}
::bbts::message::TaskRes* BatchCtrlRes::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Mutable(index);
}
::bbts::message::TaskRes* BatchCtrlRes::add_tasks() {
  // @@protoc_insertion_point(field_add:bbts.message.BatchCtrlRes.tasks)
  return tasks_.Add();
}
::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >*
BatchCtrlRes::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchCtrlRes.tasks)
  return &tasks_;
}
const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskRes >&
BatchCtrlRes::tasks() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchCtrlRes.tasks)
  return tasks_;
}

inline const BatchCtrlRes* BatchCtrlRes::internal_default_instance() {
  return &BatchCtrlRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BatchListRes::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BatchListRes::BatchListRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.BatchListRes)
}

void BatchListRes::InitAsDefaultInstance() {
}

BatchListRes::BatchListRes(const BatchListRes& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.BatchListRes)
}

void BatchListRes::SharedCtor() {
  _cached_size_ = 0;
}

BatchListRes::~BatchListRes() {
  // @@protoc_insertion_point(destructor:bbts.message.BatchListRes)
  SharedDtor();
}

void BatchListRes::SharedDtor() {
}

void BatchListRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatchListRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatchListRes_descriptor_;
}

const BatchListRes& BatchListRes::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<BatchListRes> BatchListRes_default_instance_;

BatchListRes* BatchListRes::New(::google::protobuf::Arena* arena) const {
  BatchListRes* n = new BatchListRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BatchListRes::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.BatchListRes)
  status_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BatchListRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.BatchListRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .bbts.message.TaskStatus status = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_status()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_status;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.BatchListRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.BatchListRes)
  return false;
#undef DO_
}

void BatchListRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.BatchListRes)
  // repeated .bbts.message.TaskStatus status = 1;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->status(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.BatchListRes)
}

::google::protobuf::uint8* BatchListRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.BatchListRes)
  // repeated .bbts.message.TaskStatus status = 1;
  for (unsigned int i = 0, n = this->status_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->status(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.BatchListRes)
  return target;
}

size_t BatchListRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.BatchListRes)
  size_t total_size = 0;

  // repeated .bbts.message.TaskStatus status = 1;
  {
    unsigned int count = this->status_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->status(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatchListRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.BatchListRes)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const BatchListRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BatchListRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.BatchListRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.BatchListRes)
    UnsafeMergeFrom(*source);
  }
}

void BatchListRes::MergeFrom(const BatchListRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.BatchListRes)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void BatchListRes::UnsafeMergeFrom(const BatchListRes& from) {
  GOOGLE_DCHECK(&from != this);
  status_.MergeFrom(from.status_);
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void BatchListRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.BatchListRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatchListRes::CopyFrom(const BatchListRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.BatchListRes)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool BatchListRes::IsInitialized() const {

  return true;
}

void BatchListRes::Swap(BatchListRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BatchListRes::InternalSwap(BatchListRes* other) {
  status_.UnsafeArenaSwap(&other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BatchListRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatchListRes_descriptor_;
  metadata.reflection = BatchListRes_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BatchListRes

// repeated .bbts.message.TaskStatus status = 1;
int BatchListRes::status_size() const {
  return status_.size();
}
void BatchListRes::clear_status() {
  status_.Clear();
}
const ::bbts::message::TaskStatus& BatchListRes::status(int index) const {
  // @@protoc_insertion_point(field_get:bbts.message.BatchListRes.status)
  return status_.Get(index);
}
::bbts::message::TaskStatus* BatchListRes::mutable_status(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.message.BatchListRes.status)
  return status_.Mutable(index);
}
::bbts::message::TaskStatus* BatchListRes::add_status() {
  // @@protoc_insertion_point(field_add:bbts.message.BatchListRes.status)
  return status_.Add();
}
::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >*
BatchListRes::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:bbts.message.BatchListRes.status)
  return &status_;
}
const ::google::protobuf::RepeatedPtrField< ::bbts::message::TaskStatus >&
BatchListRes::status() const {
  // @@protoc_insertion_point(field_list:bbts.message.BatchListRes.status)
  return status_;
}

inline const BatchListRes* BatchListRes::internal_default_instance() {
  return &BatchListRes_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Metadata::kInfohashFieldNumber;
const int Metadata::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Metadata::Metadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_message_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.Metadata)
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.Metadata)
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  infohash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:bbts.message.Metadata)
  SharedDtor();
}

void Metadata::SharedDtor() {
  infohash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  protobuf_InitDefaults_message_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<Metadata> Metadata_default_instance_;

Metadata* Metadata::New(::google::protobuf::Arena* arena) const {
  Metadata* n = new Metadata;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.Metadata)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_infohash()) {
      infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_data()) {
      data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.Metadata)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string infohash = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_infohash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->infohash().data(), this->infohash().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.Metadata.infohash");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // optional bytes data = 2;
      case 2: {
        if (tag == 18) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.Metadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.Metadata)
  return false;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.Metadata)
  // optional string infohash = 1;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Metadata.infohash");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->infohash(), output);
  }

  // optional bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.Metadata)
}

::google::protobuf::uint8* Metadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.Metadata)
  // optional string infohash = 1;
  if (has_infohash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->infohash().data(), this->infohash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.Metadata.infohash");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->infohash(), target);
  }

  // optional bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.Metadata)
  return target;
}

size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.Metadata)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional string infohash = 1;
    if (has_infohash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->infohash());
    }

    // optional bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.Metadata)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Metadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Metadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.Metadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.Metadata)
    UnsafeMergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.Metadata)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void Metadata::UnsafeMergeFrom(const Metadata& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infohash()) {
      set_has_infohash();
      infohash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.infohash_);
    }
    if (from.has_data()) {
      set_has_data();
      data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.Metadata)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool Metadata::IsInitialized() const {

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Metadata::InternalSwap(Metadata* other) {
  infohash_.Swap(&other->infohash_);
  data_.Swap(&other->data_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Metadata

// optional string infohash = 1;
bool Metadata::has_infohash() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Metadata::set_has_infohash() {
  _has_bits_[0] |= 0x00000001u;
}
void Metadata::clear_has_infohash() {
  _has_bits_[0] &= ~0x00000001u;
}
void Metadata::clear_infohash() {
  infohash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_infohash();
}
const ::std::string& Metadata::infohash() const {
  // @@protoc_insertion_point(field_get:bbts.message.Metadata.infohash)
  return infohash_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_infohash(const ::std::string& value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Metadata.infohash)
}
void Metadata::set_infohash(const char* value) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Metadata.infohash)
}
void Metadata::set_infohash(const char* value, size_t size) {
  set_has_infohash();
  infohash_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Metadata.infohash)
}
::std::string* Metadata::mutable_infohash() {
  set_has_infohash();
  // @@protoc_insertion_point(field_mutable:bbts.message.Metadata.infohash)
  return infohash_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_infohash() {
  // @@protoc_insertion_point(field_release:bbts.message.Metadata.infohash)
  clear_has_infohash();
  return infohash_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_infohash(::std::string* infohash) {
  if (infohash != NULL) {
    set_has_infohash();
  } else {
    clear_has_infohash();
  }
  infohash_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), infohash);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Metadata.infohash)
}

// optional bytes data = 2;
bool Metadata::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Metadata::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
void Metadata::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
void Metadata::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_data();
}
const ::std::string& Metadata::data() const {
  // @@protoc_insertion_point(field_get:bbts.message.Metadata.data)
  return data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_data(const ::std::string& value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.Metadata.data)
}
void Metadata::set_data(const char* value) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.Metadata.data)
}
void Metadata::set_data(const void* value, size_t size) {
  set_has_data();
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.Metadata.data)
}
::std::string* Metadata::mutable_data() {
  set_has_data();
  // @@protoc_insertion_point(field_mutable:bbts.message.Metadata.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Metadata::release_data() {
  // @@protoc_insertion_point(field_release:bbts.message.Metadata.data)
  clear_has_data();
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Metadata::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    set_has_data();
  } else {
    clear_has_data();
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.Metadata.data)
}

inline const Metadata* Metadata::internal_default_instance() {
  return &Metadata_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
