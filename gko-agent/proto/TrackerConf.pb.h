// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TrackerConf.proto

#ifndef PROTOBUF_TrackerConf_2eproto__INCLUDED
#define PROTOBUF_TrackerConf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TrackerConf_2eproto();
void protobuf_AssignDesc_TrackerConf_2eproto();
void protobuf_ShutdownFile_TrackerConf_2eproto();

class Tracker;
class TrackerArea;
class TrackerConf;

// ===================================================================

class Tracker : public ::google::protobuf::Message {
 public:
  Tracker();
  virtual ~Tracker();
  
  Tracker(const Tracker& from);
  
  inline Tracker& operator=(const Tracker& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Tracker& default_instance();
  
  void Swap(Tracker* other);
  
  // implements Message ----------------------------------------------
  
  Tracker* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Tracker& from);
  void MergeFrom(const Tracker& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string host = 1;
  inline bool has_host() const;
  inline void clear_host();
  static const int kHostFieldNumber = 1;
  inline const ::std::string& host() const;
  inline void set_host(const ::std::string& value);
  inline void set_host(const char* value);
  inline void set_host(const char* value, size_t size);
  inline ::std::string* mutable_host();
  inline ::std::string* release_host();
  
  // optional int32 port = 2;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 2;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.message.Tracker)
 private:
  inline void set_has_host();
  inline void clear_has_host();
  inline void set_has_port();
  inline void clear_has_port();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* host_;
  ::google::protobuf::int32 port_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackerConf_2eproto();
  friend void protobuf_AssignDesc_TrackerConf_2eproto();
  friend void protobuf_ShutdownFile_TrackerConf_2eproto();
  
  void InitAsDefaultInstance();
  static Tracker* default_instance_;
};
// -------------------------------------------------------------------

class TrackerArea : public ::google::protobuf::Message {
 public:
  TrackerArea();
  virtual ~TrackerArea();
  
  TrackerArea(const TrackerArea& from);
  
  inline TrackerArea& operator=(const TrackerArea& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerArea& default_instance();
  
  void Swap(TrackerArea* other);
  
  // implements Message ----------------------------------------------
  
  TrackerArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerArea& from);
  void MergeFrom(const TrackerArea& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated string machine_room = 1;
  inline int machine_room_size() const;
  inline void clear_machine_room();
  static const int kMachineRoomFieldNumber = 1;
  inline const ::std::string& machine_room(int index) const;
  inline ::std::string* mutable_machine_room(int index);
  inline void set_machine_room(int index, const ::std::string& value);
  inline void set_machine_room(int index, const char* value);
  inline void set_machine_room(int index, const char* value, size_t size);
  inline ::std::string* add_machine_room();
  inline void add_machine_room(const ::std::string& value);
  inline void add_machine_room(const char* value);
  inline void add_machine_room(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& machine_room() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_machine_room();
  
  // repeated .bbts.message.Tracker tracker = 2;
  inline int tracker_size() const;
  inline void clear_tracker();
  static const int kTrackerFieldNumber = 2;
  inline const ::bbts::message::Tracker& tracker(int index) const;
  inline ::bbts::message::Tracker* mutable_tracker(int index);
  inline ::bbts::message::Tracker* add_tracker();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::Tracker >&
      tracker() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::message::Tracker >*
      mutable_tracker();
  
  // @@protoc_insertion_point(class_scope:bbts.message.TrackerArea)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::std::string> machine_room_;
  ::google::protobuf::RepeatedPtrField< ::bbts::message::Tracker > tracker_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackerConf_2eproto();
  friend void protobuf_AssignDesc_TrackerConf_2eproto();
  friend void protobuf_ShutdownFile_TrackerConf_2eproto();
  
  void InitAsDefaultInstance();
  static TrackerArea* default_instance_;
};
// -------------------------------------------------------------------

class TrackerConf : public ::google::protobuf::Message {
 public:
  TrackerConf();
  virtual ~TrackerConf();
  
  TrackerConf(const TrackerConf& from);
  
  inline TrackerConf& operator=(const TrackerConf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerConf& default_instance();
  
  void Swap(TrackerConf* other);
  
  // implements Message ----------------------------------------------
  
  TrackerConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerConf& from);
  void MergeFrom(const TrackerConf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bbts.message.TrackerArea area = 1;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 1;
  inline const ::bbts::message::TrackerArea& area(int index) const;
  inline ::bbts::message::TrackerArea* mutable_area(int index);
  inline ::bbts::message::TrackerArea* add_area();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TrackerArea >&
      area() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TrackerArea >*
      mutable_area();
  
  // optional .bbts.message.TrackerArea default = 2;
  inline bool has_default_() const;
  inline void clear_default_();
  static const int kDefaultFieldNumber = 2;
  inline const ::bbts::message::TrackerArea& default_() const;
  inline ::bbts::message::TrackerArea* mutable_default_();
  inline ::bbts::message::TrackerArea* release_default_();
  
  // @@protoc_insertion_point(class_scope:bbts.message.TrackerConf)
 private:
  inline void set_has_default_();
  inline void clear_has_default_();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::bbts::message::TrackerArea > area_;
  ::bbts::message::TrackerArea* default__;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_TrackerConf_2eproto();
  friend void protobuf_AssignDesc_TrackerConf_2eproto();
  friend void protobuf_ShutdownFile_TrackerConf_2eproto();
  
  void InitAsDefaultInstance();
  static TrackerConf* default_instance_;
};
// ===================================================================


// ===================================================================

// Tracker

// optional string host = 1;
inline bool Tracker::has_host() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Tracker::set_has_host() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Tracker::clear_has_host() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Tracker::clear_host() {
  if (host_ != &::google::protobuf::internal::kEmptyString) {
    host_->clear();
  }
  clear_has_host();
}
inline const ::std::string& Tracker::host() const {
  return *host_;
}
inline void Tracker::set_host(const ::std::string& value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Tracker::set_host(const char* value) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(value);
}
inline void Tracker::set_host(const char* value, size_t size) {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  host_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Tracker::mutable_host() {
  set_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    host_ = new ::std::string;
  }
  return host_;
}
inline ::std::string* Tracker::release_host() {
  clear_has_host();
  if (host_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = host_;
    host_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 port = 2;
inline bool Tracker::has_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Tracker::set_has_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Tracker::clear_has_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Tracker::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 Tracker::port() const {
  return port_;
}
inline void Tracker::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// -------------------------------------------------------------------

// TrackerArea

// repeated string machine_room = 1;
inline int TrackerArea::machine_room_size() const {
  return machine_room_.size();
}
inline void TrackerArea::clear_machine_room() {
  machine_room_.Clear();
}
inline const ::std::string& TrackerArea::machine_room(int index) const {
  return machine_room_.Get(index);
}
inline ::std::string* TrackerArea::mutable_machine_room(int index) {
  return machine_room_.Mutable(index);
}
inline void TrackerArea::set_machine_room(int index, const ::std::string& value) {
  machine_room_.Mutable(index)->assign(value);
}
inline void TrackerArea::set_machine_room(int index, const char* value) {
  machine_room_.Mutable(index)->assign(value);
}
inline void TrackerArea::set_machine_room(int index, const char* value, size_t size) {
  machine_room_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackerArea::add_machine_room() {
  return machine_room_.Add();
}
inline void TrackerArea::add_machine_room(const ::std::string& value) {
  machine_room_.Add()->assign(value);
}
inline void TrackerArea::add_machine_room(const char* value) {
  machine_room_.Add()->assign(value);
}
inline void TrackerArea::add_machine_room(const char* value, size_t size) {
  machine_room_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TrackerArea::machine_room() const {
  return machine_room_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TrackerArea::mutable_machine_room() {
  return &machine_room_;
}

// repeated .bbts.message.Tracker tracker = 2;
inline int TrackerArea::tracker_size() const {
  return tracker_.size();
}
inline void TrackerArea::clear_tracker() {
  tracker_.Clear();
}
inline const ::bbts::message::Tracker& TrackerArea::tracker(int index) const {
  return tracker_.Get(index);
}
inline ::bbts::message::Tracker* TrackerArea::mutable_tracker(int index) {
  return tracker_.Mutable(index);
}
inline ::bbts::message::Tracker* TrackerArea::add_tracker() {
  return tracker_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::Tracker >&
TrackerArea::tracker() const {
  return tracker_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::Tracker >*
TrackerArea::mutable_tracker() {
  return &tracker_;
}

// -------------------------------------------------------------------

// TrackerConf

// repeated .bbts.message.TrackerArea area = 1;
inline int TrackerConf::area_size() const {
  return area_.size();
}
inline void TrackerConf::clear_area() {
  area_.Clear();
}
inline const ::bbts::message::TrackerArea& TrackerConf::area(int index) const {
  return area_.Get(index);
}
inline ::bbts::message::TrackerArea* TrackerConf::mutable_area(int index) {
  return area_.Mutable(index);
}
inline ::bbts::message::TrackerArea* TrackerConf::add_area() {
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::message::TrackerArea >&
TrackerConf::area() const {
  return area_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::message::TrackerArea >*
TrackerConf::mutable_area() {
  return &area_;
}

// optional .bbts.message.TrackerArea default = 2;
inline bool TrackerConf::has_default_() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerConf::set_has_default_() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerConf::clear_has_default_() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerConf::clear_default_() {
  if (default__ != NULL) default__->::bbts::message::TrackerArea::Clear();
  clear_has_default_();
}
inline const ::bbts::message::TrackerArea& TrackerConf::default_() const {
  return default__ != NULL ? *default__ : *default_instance_->default__;
}
inline ::bbts::message::TrackerArea* TrackerConf::mutable_default_() {
  set_has_default_();
  if (default__ == NULL) default__ = new ::bbts::message::TrackerArea;
  return default__;
}
inline ::bbts::message::TrackerArea* TrackerConf::release_default_() {
  clear_has_default_();
  ::bbts::message::TrackerArea* temp = default__;
  default__ = NULL;
  return temp;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TrackerConf_2eproto__INCLUDED
