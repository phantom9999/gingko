// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: configure.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "configure.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace message {

namespace {

const ::google::protobuf::Descriptor* DownloadConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DownloadConfigure_reflection_ = NULL;
const ::google::protobuf::Descriptor* AgentConfigure_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AgentConfigure_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_configure_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_configure_2eproto() {
  protobuf_AddDesc_configure_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "configure.proto");
  GOOGLE_CHECK(file != NULL);
  DownloadConfigure_descriptor_ = file->message_type(0);
  static const int DownloadConfigure_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cluster_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, java_home_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, class_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, socket_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, task_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peer_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, tracker_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, connection_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peers_num_want_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, cache_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, file_pool_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_metadata_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, seeding_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, min_reconnect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, peer_connect_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, read_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, write_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, lock_disk_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, suggest_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_queued_disk_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_out_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, max_allowed_in_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, whole_pieces_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, request_queue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_buffer_low_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_buffer_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, send_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, recv_socket_buffer_size_),
  };
  DownloadConfigure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DownloadConfigure_descriptor_,
      DownloadConfigure::internal_default_instance(),
      DownloadConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, _has_bits_),
      -1,
      -1,
      sizeof(DownloadConfigure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DownloadConfigure, _internal_metadata_));
  AgentConfigure_descriptor_ = file->message_type(1);
  static const int AgentConfigure_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, working_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, dynamic_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, resume_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, lock_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, database_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, socket_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, task_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peer_stat_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, download_log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, tracker_conf_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, listen_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, worker_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, db_del_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, active_seeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_total_meta_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_total_meta_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, upload_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, download_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, connection_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peers_num_want_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, disable_os_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, cache_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, file_pool_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_metadata_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, seeding_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, min_reconnect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, peer_connect_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, read_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, write_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, lock_disk_cache_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, suggest_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_queued_disk_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_out_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, max_allowed_in_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, whole_pieces_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, request_queue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_buffer_low_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_buffer_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, send_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, recv_socket_buffer_size_),
  };
  AgentConfigure_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      AgentConfigure_descriptor_,
      AgentConfigure::internal_default_instance(),
      AgentConfigure_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, _has_bits_),
      -1,
      -1,
      sizeof(AgentConfigure),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AgentConfigure, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_configure_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DownloadConfigure_descriptor_, DownloadConfigure::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      AgentConfigure_descriptor_, AgentConfigure::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_configure_2eproto() {
  DownloadConfigure_default_instance_.Shutdown();
  delete DownloadConfigure_reflection_;
  AgentConfigure_default_instance_.Shutdown();
  delete AgentConfigure_reflection_;
}

void protobuf_InitDefaults_configure_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  DownloadConfigure_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  AgentConfigure_default_instance_.DefaultConstruct();
  DownloadConfigure_default_instance_.get_mutable()->InitAsDefaultInstance();
  AgentConfigure_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_configure_2eproto_once_);
void protobuf_InitDefaults_configure_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_configure_2eproto_once_,
                 &protobuf_InitDefaults_configure_2eproto_impl);
}
void protobuf_AddDesc_configure_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_configure_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017configure.proto\022\014bbts.message\"\264\007\n\021Down"
    "loadConfigure\022\030\n\020download_timeout\030\001 \001(\005\022"
    "\035\n\025max_announce_interval\030\002 \001(\005\022\032\n\022cluste"
    "r_thread_num\030\003 \001(\005\022\021\n\tjava_home\030\004 \001(\t\022\022\n"
    "\nclass_path\030\005 \001(\t\022\023\n\013socket_file\030\006 \001(\t\022\026"
    "\n\016task_stat_file\030\007 \001(\t\022\026\n\016peer_stat_file"
    "\030\010 \001(\t\022\031\n\021download_log_file\030\t \001(\t\022\031\n\021tra"
    "cker_conf_file\030\n \001(\t\022\024\n\014upload_limit\0303 \001"
    "(\005\022\026\n\016download_limit\0304 \001(\005\022\030\n\020connection"
    "_limit\0305 \001(\005\022\026\n\016peers_num_want\0306 \001(\005\022\022\n\n"
    "cache_size\0308 \001(\005\022\024\n\014cache_expiry\0309 \001(\005\022\026"
    "\n\016file_pool_size\030: \001(\005\022\031\n\021max_metadata_s"
    "ize\030; \001(\005\022!\n\031seeding_announce_interval\030<"
    " \001(\005\022\032\n\022min_reconnect_time\030= \001(\005\022\034\n\024peer"
    "_connect_timeout\030> \001(\005\022\034\n\024read_cache_lin"
    "e_size\030\? \001(\005\022\035\n\025write_cache_line_size\030@ "
    "\001(\005\022\027\n\017lock_disk_cache\030A \001(\010\022\024\n\014suggest_"
    "mode\030B \001(\010\022\035\n\025max_queued_disk_bytes\030C \001("
    "\005\022\035\n\025max_out_request_queue\030D \001(\005\022$\n\034max_"
    "allowed_in_request_queue\030E \001(\005\022\036\n\026whole_"
    "pieces_threshold\030F \001(\005\022\032\n\022request_queue_"
    "time\030G \001(\005\022!\n\031send_buffer_low_watermark\030"
    "H \001(\005\022\035\n\025send_buffer_watermark\030I \001(\005\022\037\n\027"
    "send_socket_buffer_size\030J \001(\005\022\037\n\027recv_so"
    "cket_buffer_size\030K \001(\005\"\325\010\n\016AgentConfigur"
    "e\022\023\n\013working_dir\030\001 \001(\t\022\031\n\021dynamic_conf_f"
    "ile\030\002 \001(\t\022\022\n\nresume_dir\030\003 \001(\t\022\021\n\tlock_fi"
    "le\030\004 \001(\t\022\025\n\rdatabase_file\030\005 \001(\t\022\023\n\013socke"
    "t_file\030\006 \001(\t\022\026\n\016task_stat_file\030\007 \001(\t\022\026\n\016"
    "peer_stat_file\030\010 \001(\t\022\031\n\021download_log_fil"
    "e\030\t \001(\t\022\031\n\021tracker_conf_file\030\n \001(\t\022\023\n\013li"
    "sten_port\030\024 \001(\005\022\031\n\021worker_thread_num\030\025 \001"
    "(\005\022\027\n\017db_del_interval\030\026 \001(\005\022\024\n\014active_se"
    "eds\030\027 \001(\005\022\032\n\022max_total_meta_num\030\030 \001(\005\022\033\n"
    "\023max_total_meta_size\030\031 \001(\005\022\024\n\014upload_lim"
    "it\0303 \001(\005\022\026\n\016download_limit\0304 \001(\005\022\030\n\020conn"
    "ection_limit\0305 \001(\005\022\026\n\016peers_num_want\0306 \001"
    "(\005\022\030\n\020disable_os_cache\0307 \001(\010\022\022\n\ncache_si"
    "ze\0308 \001(\005\022\024\n\014cache_expiry\0309 \001(\005\022\026\n\016file_p"
    "ool_size\030: \001(\005\022\031\n\021max_metadata_size\030; \001("
    "\005\022!\n\031seeding_announce_interval\030< \001(\005\022\032\n\022"
    "min_reconnect_time\030= \001(\005\022\034\n\024peer_connect"
    "_timeout\030> \001(\005\022\034\n\024read_cache_line_size\030\?"
    " \001(\005\022\035\n\025write_cache_line_size\030@ \001(\005\022\027\n\017l"
    "ock_disk_cache\030A \001(\010\022\024\n\014suggest_mode\030B \001"
    "(\010\022\035\n\025max_queued_disk_bytes\030C \001(\005\022\035\n\025max"
    "_out_request_queue\030D \001(\005\022$\n\034max_allowed_"
    "in_request_queue\030E \001(\005\022\036\n\026whole_pieces_t"
    "hreshold\030F \001(\005\022\032\n\022request_queue_time\030G \001"
    "(\005\022!\n\031send_buffer_low_watermark\030H \001(\005\022\035\n"
    "\025send_buffer_watermark\030I \001(\005\022\037\n\027send_soc"
    "ket_buffer_size\030J \001(\005\022\037\n\027recv_socket_buf"
    "fer_size\030K \001(\005", 2094);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "configure.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_configure_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_configure_2eproto_once_);
void protobuf_AddDesc_configure_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_configure_2eproto_once_,
                 &protobuf_AddDesc_configure_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_configure_2eproto {
  StaticDescriptorInitializer_configure_2eproto() {
    protobuf_AddDesc_configure_2eproto();
  }
} static_descriptor_initializer_configure_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadConfigure::kDownloadTimeoutFieldNumber;
const int DownloadConfigure::kMaxAnnounceIntervalFieldNumber;
const int DownloadConfigure::kClusterThreadNumFieldNumber;
const int DownloadConfigure::kJavaHomeFieldNumber;
const int DownloadConfigure::kClassPathFieldNumber;
const int DownloadConfigure::kSocketFileFieldNumber;
const int DownloadConfigure::kTaskStatFileFieldNumber;
const int DownloadConfigure::kPeerStatFileFieldNumber;
const int DownloadConfigure::kDownloadLogFileFieldNumber;
const int DownloadConfigure::kTrackerConfFileFieldNumber;
const int DownloadConfigure::kUploadLimitFieldNumber;
const int DownloadConfigure::kDownloadLimitFieldNumber;
const int DownloadConfigure::kConnectionLimitFieldNumber;
const int DownloadConfigure::kPeersNumWantFieldNumber;
const int DownloadConfigure::kCacheSizeFieldNumber;
const int DownloadConfigure::kCacheExpiryFieldNumber;
const int DownloadConfigure::kFilePoolSizeFieldNumber;
const int DownloadConfigure::kMaxMetadataSizeFieldNumber;
const int DownloadConfigure::kSeedingAnnounceIntervalFieldNumber;
const int DownloadConfigure::kMinReconnectTimeFieldNumber;
const int DownloadConfigure::kPeerConnectTimeoutFieldNumber;
const int DownloadConfigure::kReadCacheLineSizeFieldNumber;
const int DownloadConfigure::kWriteCacheLineSizeFieldNumber;
const int DownloadConfigure::kLockDiskCacheFieldNumber;
const int DownloadConfigure::kSuggestModeFieldNumber;
const int DownloadConfigure::kMaxQueuedDiskBytesFieldNumber;
const int DownloadConfigure::kMaxOutRequestQueueFieldNumber;
const int DownloadConfigure::kMaxAllowedInRequestQueueFieldNumber;
const int DownloadConfigure::kWholePiecesThresholdFieldNumber;
const int DownloadConfigure::kRequestQueueTimeFieldNumber;
const int DownloadConfigure::kSendBufferLowWatermarkFieldNumber;
const int DownloadConfigure::kSendBufferWatermarkFieldNumber;
const int DownloadConfigure::kSendSocketBufferSizeFieldNumber;
const int DownloadConfigure::kRecvSocketBufferSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadConfigure::DownloadConfigure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_configure_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.DownloadConfigure)
}

void DownloadConfigure::InitAsDefaultInstance() {
}

DownloadConfigure::DownloadConfigure(const DownloadConfigure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.DownloadConfigure)
}

void DownloadConfigure::SharedCtor() {
  java_home_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_stat_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_stat_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_log_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracker_conf_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&download_timeout_, 0, reinterpret_cast<char*>(&recv_socket_buffer_size_) -
    reinterpret_cast<char*>(&download_timeout_) + sizeof(recv_socket_buffer_size_));
  _cached_size_ = 0;
}

DownloadConfigure::~DownloadConfigure() {
  // @@protoc_insertion_point(destructor:bbts.message.DownloadConfigure)
  SharedDtor();
}

void DownloadConfigure::SharedDtor() {
  java_home_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  class_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_stat_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_stat_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_log_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracker_conf_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DownloadConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DownloadConfigure_descriptor_;
}

const DownloadConfigure& DownloadConfigure::default_instance() {
  protobuf_InitDefaults_configure_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<DownloadConfigure> DownloadConfigure_default_instance_;

DownloadConfigure* DownloadConfigure::New(::google::protobuf::Arena* arena) const {
  DownloadConfigure* n = new DownloadConfigure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.DownloadConfigure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DownloadConfigure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DownloadConfigure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(download_timeout_, cluster_thread_num_);
    if (has_java_home()) {
      java_home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_class_path()) {
      class_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_socket_file()) {
      socket_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_task_stat_file()) {
      task_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_peer_stat_file()) {
      peer_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(upload_limit_, cache_expiry_);
    if (has_download_log_file()) {
      download_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tracker_conf_file()) {
      tracker_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(file_pool_size_, lock_disk_cache_);
  ZR_(suggest_mode_, send_buffer_watermark_);
  ZR_(send_socket_buffer_size_, recv_socket_buffer_size_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DownloadConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.DownloadConfigure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 download_timeout = 1;
      case 1: {
        if (tag == 8) {
          set_has_download_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_max_announce_interval;
        break;
      }

      // optional int32 max_announce_interval = 2;
      case 2: {
        if (tag == 16) {
         parse_max_announce_interval:
          set_has_max_announce_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_announce_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cluster_thread_num;
        break;
      }

      // optional int32 cluster_thread_num = 3;
      case 3: {
        if (tag == 24) {
         parse_cluster_thread_num:
          set_has_cluster_thread_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cluster_thread_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_java_home;
        break;
      }

      // optional string java_home = 4;
      case 4: {
        if (tag == 34) {
         parse_java_home:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_java_home()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->java_home().data(), this->java_home().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.java_home");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_class_path;
        break;
      }

      // optional string class_path = 5;
      case 5: {
        if (tag == 42) {
         parse_class_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_class_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->class_path().data(), this->class_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.class_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_socket_file;
        break;
      }

      // optional string socket_file = 6;
      case 6: {
        if (tag == 50) {
         parse_socket_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->socket_file().data(), this->socket_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.socket_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task_stat_file;
        break;
      }

      // optional string task_stat_file = 7;
      case 7: {
        if (tag == 58) {
         parse_task_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_stat_file().data(), this->task_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.task_stat_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_peer_stat_file;
        break;
      }

      // optional string peer_stat_file = 8;
      case 8: {
        if (tag == 66) {
         parse_peer_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_stat_file().data(), this->peer_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.peer_stat_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_download_log_file;
        break;
      }

      // optional string download_log_file = 9;
      case 9: {
        if (tag == 74) {
         parse_download_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_log_file().data(), this->download_log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.download_log_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tracker_conf_file;
        break;
      }

      // optional string tracker_conf_file = 10;
      case 10: {
        if (tag == 82) {
         parse_tracker_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracker_conf_file().data(), this->tracker_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.DownloadConfigure.tracker_conf_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_upload_limit;
        break;
      }

      // optional int32 upload_limit = 51;
      case 51: {
        if (tag == 408) {
         parse_upload_limit:
          set_has_upload_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_download_limit;
        break;
      }

      // optional int32 download_limit = 52;
      case 52: {
        if (tag == 416) {
         parse_download_limit:
          set_has_download_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_connection_limit;
        break;
      }

      // optional int32 connection_limit = 53;
      case 53: {
        if (tag == 424) {
         parse_connection_limit:
          set_has_connection_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_peers_num_want;
        break;
      }

      // optional int32 peers_num_want = 54;
      case 54: {
        if (tag == 432) {
         parse_peers_num_want:
          set_has_peers_num_want();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peers_num_want_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_cache_size;
        break;
      }

      // optional int32 cache_size = 56;
      case 56: {
        if (tag == 448) {
         parse_cache_size:
          set_has_cache_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_cache_expiry;
        break;
      }

      // optional int32 cache_expiry = 57;
      case 57: {
        if (tag == 456) {
         parse_cache_expiry:
          set_has_cache_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_expiry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_file_pool_size;
        break;
      }

      // optional int32 file_pool_size = 58;
      case 58: {
        if (tag == 464) {
         parse_file_pool_size:
          set_has_file_pool_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_pool_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_max_metadata_size;
        break;
      }

      // optional int32 max_metadata_size = 59;
      case 59: {
        if (tag == 472) {
         parse_max_metadata_size:
          set_has_max_metadata_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_metadata_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_seeding_announce_interval;
        break;
      }

      // optional int32 seeding_announce_interval = 60;
      case 60: {
        if (tag == 480) {
         parse_seeding_announce_interval:
          set_has_seeding_announce_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_announce_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_min_reconnect_time;
        break;
      }

      // optional int32 min_reconnect_time = 61;
      case 61: {
        if (tag == 488) {
         parse_min_reconnect_time:
          set_has_min_reconnect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reconnect_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_peer_connect_timeout;
        break;
      }

      // optional int32 peer_connect_timeout = 62;
      case 62: {
        if (tag == 496) {
         parse_peer_connect_timeout:
          set_has_peer_connect_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_connect_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_read_cache_line_size;
        break;
      }

      // optional int32 read_cache_line_size = 63;
      case 63: {
        if (tag == 504) {
         parse_read_cache_line_size:
          set_has_read_cache_line_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_cache_line_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_write_cache_line_size;
        break;
      }

      // optional int32 write_cache_line_size = 64;
      case 64: {
        if (tag == 512) {
         parse_write_cache_line_size:
          set_has_write_cache_line_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_cache_line_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_lock_disk_cache;
        break;
      }

      // optional bool lock_disk_cache = 65;
      case 65: {
        if (tag == 520) {
         parse_lock_disk_cache:
          set_has_lock_disk_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_disk_cache_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_suggest_mode;
        break;
      }

      // optional bool suggest_mode = 66;
      case 66: {
        if (tag == 528) {
         parse_suggest_mode:
          set_has_suggest_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_mode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_max_queued_disk_bytes;
        break;
      }

      // optional int32 max_queued_disk_bytes = 67;
      case 67: {
        if (tag == 536) {
         parse_max_queued_disk_bytes:
          set_has_max_queued_disk_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queued_disk_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_max_out_request_queue;
        break;
      }

      // optional int32 max_out_request_queue = 68;
      case 68: {
        if (tag == 544) {
         parse_max_out_request_queue:
          set_has_max_out_request_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_out_request_queue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_max_allowed_in_request_queue;
        break;
      }

      // optional int32 max_allowed_in_request_queue = 69;
      case 69: {
        if (tag == 552) {
         parse_max_allowed_in_request_queue:
          set_has_max_allowed_in_request_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_in_request_queue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_whole_pieces_threshold;
        break;
      }

      // optional int32 whole_pieces_threshold = 70;
      case 70: {
        if (tag == 560) {
         parse_whole_pieces_threshold:
          set_has_whole_pieces_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whole_pieces_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_request_queue_time;
        break;
      }

      // optional int32 request_queue_time = 71;
      case 71: {
        if (tag == 568) {
         parse_request_queue_time:
          set_has_request_queue_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_queue_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_send_buffer_low_watermark;
        break;
      }

      // optional int32 send_buffer_low_watermark = 72;
      case 72: {
        if (tag == 576) {
         parse_send_buffer_low_watermark:
          set_has_send_buffer_low_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_low_watermark_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_send_buffer_watermark;
        break;
      }

      // optional int32 send_buffer_watermark = 73;
      case 73: {
        if (tag == 584) {
         parse_send_buffer_watermark:
          set_has_send_buffer_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_watermark_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_send_socket_buffer_size;
        break;
      }

      // optional int32 send_socket_buffer_size = 74;
      case 74: {
        if (tag == 592) {
         parse_send_socket_buffer_size:
          set_has_send_socket_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_socket_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_recv_socket_buffer_size;
        break;
      }

      // optional int32 recv_socket_buffer_size = 75;
      case 75: {
        if (tag == 600) {
         parse_recv_socket_buffer_size:
          set_has_recv_socket_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_socket_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.DownloadConfigure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.DownloadConfigure)
  return false;
#undef DO_
}

void DownloadConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.DownloadConfigure)
  // optional int32 download_timeout = 1;
  if (has_download_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->download_timeout(), output);
  }

  // optional int32 max_announce_interval = 2;
  if (has_max_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->max_announce_interval(), output);
  }

  // optional int32 cluster_thread_num = 3;
  if (has_cluster_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->cluster_thread_num(), output);
  }

  // optional string java_home = 4;
  if (has_java_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->java_home().data(), this->java_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.java_home");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->java_home(), output);
  }

  // optional string class_path = 5;
  if (has_class_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_path().data(), this->class_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.class_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->class_path(), output);
  }

  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.socket_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket_file(), output);
  }

  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.task_stat_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->task_stat_file(), output);
  }

  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.peer_stat_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->peer_stat_file(), output);
  }

  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.download_log_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->download_log_file(), output);
  }

  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.tracker_conf_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tracker_conf_file(), output);
  }

  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->upload_limit(), output);
  }

  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->download_limit(), output);
  }

  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->connection_limit(), output);
  }

  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->peers_num_want(), output);
  }

  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->cache_size(), output);
  }

  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->cache_expiry(), output);
  }

  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->file_pool_size(), output);
  }

  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->max_metadata_size(), output);
  }

  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->seeding_announce_interval(), output);
  }

  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->min_reconnect_time(), output);
  }

  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->peer_connect_timeout(), output);
  }

  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->read_cache_line_size(), output);
  }

  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->write_cache_line_size(), output);
  }

  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->lock_disk_cache(), output);
  }

  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->suggest_mode(), output);
  }

  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->max_queued_disk_bytes(), output);
  }

  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->max_out_request_queue(), output);
  }

  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->max_allowed_in_request_queue(), output);
  }

  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->whole_pieces_threshold(), output);
  }

  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->request_queue_time(), output);
  }

  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->send_buffer_low_watermark(), output);
  }

  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->send_buffer_watermark(), output);
  }

  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->send_socket_buffer_size(), output);
  }

  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->recv_socket_buffer_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.DownloadConfigure)
}

::google::protobuf::uint8* DownloadConfigure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.DownloadConfigure)
  // optional int32 download_timeout = 1;
  if (has_download_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->download_timeout(), target);
  }

  // optional int32 max_announce_interval = 2;
  if (has_max_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->max_announce_interval(), target);
  }

  // optional int32 cluster_thread_num = 3;
  if (has_cluster_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cluster_thread_num(), target);
  }

  // optional string java_home = 4;
  if (has_java_home()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->java_home().data(), this->java_home().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.java_home");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->java_home(), target);
  }

  // optional string class_path = 5;
  if (has_class_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->class_path().data(), this->class_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.class_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->class_path(), target);
  }

  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.socket_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->socket_file(), target);
  }

  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.task_stat_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_stat_file(), target);
  }

  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.peer_stat_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->peer_stat_file(), target);
  }

  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.download_log_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->download_log_file(), target);
  }

  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.DownloadConfigure.tracker_conf_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tracker_conf_file(), target);
  }

  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->upload_limit(), target);
  }

  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->download_limit(), target);
  }

  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->connection_limit(), target);
  }

  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->peers_num_want(), target);
  }

  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->cache_size(), target);
  }

  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->cache_expiry(), target);
  }

  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->file_pool_size(), target);
  }

  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->max_metadata_size(), target);
  }

  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->seeding_announce_interval(), target);
  }

  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->min_reconnect_time(), target);
  }

  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->peer_connect_timeout(), target);
  }

  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->read_cache_line_size(), target);
  }

  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->write_cache_line_size(), target);
  }

  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->lock_disk_cache(), target);
  }

  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->suggest_mode(), target);
  }

  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->max_queued_disk_bytes(), target);
  }

  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->max_out_request_queue(), target);
  }

  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->max_allowed_in_request_queue(), target);
  }

  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->whole_pieces_threshold(), target);
  }

  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->request_queue_time(), target);
  }

  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->send_buffer_low_watermark(), target);
  }

  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->send_buffer_watermark(), target);
  }

  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->send_socket_buffer_size(), target);
  }

  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->recv_socket_buffer_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.DownloadConfigure)
  return target;
}

size_t DownloadConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.DownloadConfigure)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 download_timeout = 1;
    if (has_download_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_timeout());
    }

    // optional int32 max_announce_interval = 2;
    if (has_max_announce_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_announce_interval());
    }

    // optional int32 cluster_thread_num = 3;
    if (has_cluster_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cluster_thread_num());
    }

    // optional string java_home = 4;
    if (has_java_home()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->java_home());
    }

    // optional string class_path = 5;
    if (has_class_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->class_path());
    }

    // optional string socket_file = 6;
    if (has_socket_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_file());
    }

    // optional string task_stat_file = 7;
    if (has_task_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_stat_file());
    }

    // optional string peer_stat_file = 8;
    if (has_peer_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_stat_file());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string download_log_file = 9;
    if (has_download_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_log_file());
    }

    // optional string tracker_conf_file = 10;
    if (has_tracker_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_conf_file());
    }

    // optional int32 upload_limit = 51;
    if (has_upload_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }

    // optional int32 download_limit = 52;
    if (has_download_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }

    // optional int32 connection_limit = 53;
    if (has_connection_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_limit());
    }

    // optional int32 peers_num_want = 54;
    if (has_peers_num_want()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peers_num_want());
    }

    // optional int32 cache_size = 56;
    if (has_cache_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }

    // optional int32 cache_expiry = 57;
    if (has_cache_expiry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_expiry());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 file_pool_size = 58;
    if (has_file_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_pool_size());
    }

    // optional int32 max_metadata_size = 59;
    if (has_max_metadata_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_metadata_size());
    }

    // optional int32 seeding_announce_interval = 60;
    if (has_seeding_announce_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_announce_interval());
    }

    // optional int32 min_reconnect_time = 61;
    if (has_min_reconnect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reconnect_time());
    }

    // optional int32 peer_connect_timeout = 62;
    if (has_peer_connect_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_connect_timeout());
    }

    // optional int32 read_cache_line_size = 63;
    if (has_read_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_cache_line_size());
    }

    // optional int32 write_cache_line_size = 64;
    if (has_write_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_cache_line_size());
    }

    // optional bool lock_disk_cache = 65;
    if (has_lock_disk_cache()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional bool suggest_mode = 66;
    if (has_suggest_mode()) {
      total_size += 2 + 1;
    }

    // optional int32 max_queued_disk_bytes = 67;
    if (has_max_queued_disk_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queued_disk_bytes());
    }

    // optional int32 max_out_request_queue = 68;
    if (has_max_out_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_out_request_queue());
    }

    // optional int32 max_allowed_in_request_queue = 69;
    if (has_max_allowed_in_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_in_request_queue());
    }

    // optional int32 whole_pieces_threshold = 70;
    if (has_whole_pieces_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whole_pieces_threshold());
    }

    // optional int32 request_queue_time = 71;
    if (has_request_queue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_queue_time());
    }

    // optional int32 send_buffer_low_watermark = 72;
    if (has_send_buffer_low_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_low_watermark());
    }

    // optional int32 send_buffer_watermark = 73;
    if (has_send_buffer_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_watermark());
    }

  }
  if (_has_bits_[32 / 32] & 3u) {
    // optional int32 send_socket_buffer_size = 74;
    if (has_send_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_socket_buffer_size());
    }

    // optional int32 recv_socket_buffer_size = 75;
    if (has_recv_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_socket_buffer_size());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadConfigure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.DownloadConfigure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const DownloadConfigure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DownloadConfigure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.DownloadConfigure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.DownloadConfigure)
    UnsafeMergeFrom(*source);
  }
}

void DownloadConfigure::MergeFrom(const DownloadConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.DownloadConfigure)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void DownloadConfigure::UnsafeMergeFrom(const DownloadConfigure& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_download_timeout()) {
      set_download_timeout(from.download_timeout());
    }
    if (from.has_max_announce_interval()) {
      set_max_announce_interval(from.max_announce_interval());
    }
    if (from.has_cluster_thread_num()) {
      set_cluster_thread_num(from.cluster_thread_num());
    }
    if (from.has_java_home()) {
      set_has_java_home();
      java_home_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.java_home_);
    }
    if (from.has_class_path()) {
      set_has_class_path();
      class_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.class_path_);
    }
    if (from.has_socket_file()) {
      set_has_socket_file();
      socket_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_file_);
    }
    if (from.has_task_stat_file()) {
      set_has_task_stat_file();
      task_stat_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_stat_file_);
    }
    if (from.has_peer_stat_file()) {
      set_has_peer_stat_file();
      peer_stat_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_stat_file_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_download_log_file()) {
      set_has_download_log_file();
      download_log_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_log_file_);
    }
    if (from.has_tracker_conf_file()) {
      set_has_tracker_conf_file();
      tracker_conf_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracker_conf_file_);
    }
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_connection_limit()) {
      set_connection_limit(from.connection_limit());
    }
    if (from.has_peers_num_want()) {
      set_peers_num_want(from.peers_num_want());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_cache_expiry()) {
      set_cache_expiry(from.cache_expiry());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_file_pool_size()) {
      set_file_pool_size(from.file_pool_size());
    }
    if (from.has_max_metadata_size()) {
      set_max_metadata_size(from.max_metadata_size());
    }
    if (from.has_seeding_announce_interval()) {
      set_seeding_announce_interval(from.seeding_announce_interval());
    }
    if (from.has_min_reconnect_time()) {
      set_min_reconnect_time(from.min_reconnect_time());
    }
    if (from.has_peer_connect_timeout()) {
      set_peer_connect_timeout(from.peer_connect_timeout());
    }
    if (from.has_read_cache_line_size()) {
      set_read_cache_line_size(from.read_cache_line_size());
    }
    if (from.has_write_cache_line_size()) {
      set_write_cache_line_size(from.write_cache_line_size());
    }
    if (from.has_lock_disk_cache()) {
      set_lock_disk_cache(from.lock_disk_cache());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_suggest_mode()) {
      set_suggest_mode(from.suggest_mode());
    }
    if (from.has_max_queued_disk_bytes()) {
      set_max_queued_disk_bytes(from.max_queued_disk_bytes());
    }
    if (from.has_max_out_request_queue()) {
      set_max_out_request_queue(from.max_out_request_queue());
    }
    if (from.has_max_allowed_in_request_queue()) {
      set_max_allowed_in_request_queue(from.max_allowed_in_request_queue());
    }
    if (from.has_whole_pieces_threshold()) {
      set_whole_pieces_threshold(from.whole_pieces_threshold());
    }
    if (from.has_request_queue_time()) {
      set_request_queue_time(from.request_queue_time());
    }
    if (from.has_send_buffer_low_watermark()) {
      set_send_buffer_low_watermark(from.send_buffer_low_watermark());
    }
    if (from.has_send_buffer_watermark()) {
      set_send_buffer_watermark(from.send_buffer_watermark());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_send_socket_buffer_size()) {
      set_send_socket_buffer_size(from.send_socket_buffer_size());
    }
    if (from.has_recv_socket_buffer_size()) {
      set_recv_socket_buffer_size(from.recv_socket_buffer_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void DownloadConfigure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.DownloadConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DownloadConfigure::CopyFrom(const DownloadConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.DownloadConfigure)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool DownloadConfigure::IsInitialized() const {

  return true;
}

void DownloadConfigure::Swap(DownloadConfigure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadConfigure::InternalSwap(DownloadConfigure* other) {
  std::swap(download_timeout_, other->download_timeout_);
  std::swap(max_announce_interval_, other->max_announce_interval_);
  std::swap(cluster_thread_num_, other->cluster_thread_num_);
  java_home_.Swap(&other->java_home_);
  class_path_.Swap(&other->class_path_);
  socket_file_.Swap(&other->socket_file_);
  task_stat_file_.Swap(&other->task_stat_file_);
  peer_stat_file_.Swap(&other->peer_stat_file_);
  download_log_file_.Swap(&other->download_log_file_);
  tracker_conf_file_.Swap(&other->tracker_conf_file_);
  std::swap(upload_limit_, other->upload_limit_);
  std::swap(download_limit_, other->download_limit_);
  std::swap(connection_limit_, other->connection_limit_);
  std::swap(peers_num_want_, other->peers_num_want_);
  std::swap(cache_size_, other->cache_size_);
  std::swap(cache_expiry_, other->cache_expiry_);
  std::swap(file_pool_size_, other->file_pool_size_);
  std::swap(max_metadata_size_, other->max_metadata_size_);
  std::swap(seeding_announce_interval_, other->seeding_announce_interval_);
  std::swap(min_reconnect_time_, other->min_reconnect_time_);
  std::swap(peer_connect_timeout_, other->peer_connect_timeout_);
  std::swap(read_cache_line_size_, other->read_cache_line_size_);
  std::swap(write_cache_line_size_, other->write_cache_line_size_);
  std::swap(lock_disk_cache_, other->lock_disk_cache_);
  std::swap(suggest_mode_, other->suggest_mode_);
  std::swap(max_queued_disk_bytes_, other->max_queued_disk_bytes_);
  std::swap(max_out_request_queue_, other->max_out_request_queue_);
  std::swap(max_allowed_in_request_queue_, other->max_allowed_in_request_queue_);
  std::swap(whole_pieces_threshold_, other->whole_pieces_threshold_);
  std::swap(request_queue_time_, other->request_queue_time_);
  std::swap(send_buffer_low_watermark_, other->send_buffer_low_watermark_);
  std::swap(send_buffer_watermark_, other->send_buffer_watermark_);
  std::swap(send_socket_buffer_size_, other->send_socket_buffer_size_);
  std::swap(recv_socket_buffer_size_, other->recv_socket_buffer_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DownloadConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DownloadConfigure_descriptor_;
  metadata.reflection = DownloadConfigure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadConfigure

// optional int32 download_timeout = 1;
bool DownloadConfigure::has_download_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DownloadConfigure::set_has_download_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
void DownloadConfigure::clear_has_download_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
void DownloadConfigure::clear_download_timeout() {
  download_timeout_ = 0;
  clear_has_download_timeout();
}
::google::protobuf::int32 DownloadConfigure::download_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.download_timeout)
  return download_timeout_;
}
void DownloadConfigure::set_download_timeout(::google::protobuf::int32 value) {
  set_has_download_timeout();
  download_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.download_timeout)
}

// optional int32 max_announce_interval = 2;
bool DownloadConfigure::has_max_announce_interval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DownloadConfigure::set_has_max_announce_interval() {
  _has_bits_[0] |= 0x00000002u;
}
void DownloadConfigure::clear_has_max_announce_interval() {
  _has_bits_[0] &= ~0x00000002u;
}
void DownloadConfigure::clear_max_announce_interval() {
  max_announce_interval_ = 0;
  clear_has_max_announce_interval();
}
::google::protobuf::int32 DownloadConfigure::max_announce_interval() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.max_announce_interval)
  return max_announce_interval_;
}
void DownloadConfigure::set_max_announce_interval(::google::protobuf::int32 value) {
  set_has_max_announce_interval();
  max_announce_interval_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.max_announce_interval)
}

// optional int32 cluster_thread_num = 3;
bool DownloadConfigure::has_cluster_thread_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DownloadConfigure::set_has_cluster_thread_num() {
  _has_bits_[0] |= 0x00000004u;
}
void DownloadConfigure::clear_has_cluster_thread_num() {
  _has_bits_[0] &= ~0x00000004u;
}
void DownloadConfigure::clear_cluster_thread_num() {
  cluster_thread_num_ = 0;
  clear_has_cluster_thread_num();
}
::google::protobuf::int32 DownloadConfigure::cluster_thread_num() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.cluster_thread_num)
  return cluster_thread_num_;
}
void DownloadConfigure::set_cluster_thread_num(::google::protobuf::int32 value) {
  set_has_cluster_thread_num();
  cluster_thread_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.cluster_thread_num)
}

// optional string java_home = 4;
bool DownloadConfigure::has_java_home() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DownloadConfigure::set_has_java_home() {
  _has_bits_[0] |= 0x00000008u;
}
void DownloadConfigure::clear_has_java_home() {
  _has_bits_[0] &= ~0x00000008u;
}
void DownloadConfigure::clear_java_home() {
  java_home_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_java_home();
}
const ::std::string& DownloadConfigure::java_home() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.java_home)
  return java_home_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_java_home(const ::std::string& value) {
  set_has_java_home();
  java_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.java_home)
}
void DownloadConfigure::set_java_home(const char* value) {
  set_has_java_home();
  java_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.java_home)
}
void DownloadConfigure::set_java_home(const char* value, size_t size) {
  set_has_java_home();
  java_home_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.java_home)
}
::std::string* DownloadConfigure::mutable_java_home() {
  set_has_java_home();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.java_home)
  return java_home_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_java_home() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.java_home)
  clear_has_java_home();
  return java_home_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_java_home(::std::string* java_home) {
  if (java_home != NULL) {
    set_has_java_home();
  } else {
    clear_has_java_home();
  }
  java_home_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), java_home);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.java_home)
}

// optional string class_path = 5;
bool DownloadConfigure::has_class_path() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DownloadConfigure::set_has_class_path() {
  _has_bits_[0] |= 0x00000010u;
}
void DownloadConfigure::clear_has_class_path() {
  _has_bits_[0] &= ~0x00000010u;
}
void DownloadConfigure::clear_class_path() {
  class_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_class_path();
}
const ::std::string& DownloadConfigure::class_path() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.class_path)
  return class_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_class_path(const ::std::string& value) {
  set_has_class_path();
  class_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.class_path)
}
void DownloadConfigure::set_class_path(const char* value) {
  set_has_class_path();
  class_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.class_path)
}
void DownloadConfigure::set_class_path(const char* value, size_t size) {
  set_has_class_path();
  class_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.class_path)
}
::std::string* DownloadConfigure::mutable_class_path() {
  set_has_class_path();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.class_path)
  return class_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_class_path() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.class_path)
  clear_has_class_path();
  return class_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_class_path(::std::string* class_path) {
  if (class_path != NULL) {
    set_has_class_path();
  } else {
    clear_has_class_path();
  }
  class_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), class_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.class_path)
}

// optional string socket_file = 6;
bool DownloadConfigure::has_socket_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DownloadConfigure::set_has_socket_file() {
  _has_bits_[0] |= 0x00000020u;
}
void DownloadConfigure::clear_has_socket_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void DownloadConfigure::clear_socket_file() {
  socket_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_socket_file();
}
const ::std::string& DownloadConfigure::socket_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.socket_file)
  return socket_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_socket_file(const ::std::string& value) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.socket_file)
}
void DownloadConfigure::set_socket_file(const char* value) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.socket_file)
}
void DownloadConfigure::set_socket_file(const char* value, size_t size) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.socket_file)
}
::std::string* DownloadConfigure::mutable_socket_file() {
  set_has_socket_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.socket_file)
  return socket_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_socket_file() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.socket_file)
  clear_has_socket_file();
  return socket_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_socket_file(::std::string* socket_file) {
  if (socket_file != NULL) {
    set_has_socket_file();
  } else {
    clear_has_socket_file();
  }
  socket_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.socket_file)
}

// optional string task_stat_file = 7;
bool DownloadConfigure::has_task_stat_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DownloadConfigure::set_has_task_stat_file() {
  _has_bits_[0] |= 0x00000040u;
}
void DownloadConfigure::clear_has_task_stat_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void DownloadConfigure::clear_task_stat_file() {
  task_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_stat_file();
}
const ::std::string& DownloadConfigure::task_stat_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.task_stat_file)
  return task_stat_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_task_stat_file(const ::std::string& value) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.task_stat_file)
}
void DownloadConfigure::set_task_stat_file(const char* value) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.task_stat_file)
}
void DownloadConfigure::set_task_stat_file(const char* value, size_t size) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.task_stat_file)
}
::std::string* DownloadConfigure::mutable_task_stat_file() {
  set_has_task_stat_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.task_stat_file)
  return task_stat_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_task_stat_file() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.task_stat_file)
  clear_has_task_stat_file();
  return task_stat_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_task_stat_file(::std::string* task_stat_file) {
  if (task_stat_file != NULL) {
    set_has_task_stat_file();
  } else {
    clear_has_task_stat_file();
  }
  task_stat_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_stat_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.task_stat_file)
}

// optional string peer_stat_file = 8;
bool DownloadConfigure::has_peer_stat_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DownloadConfigure::set_has_peer_stat_file() {
  _has_bits_[0] |= 0x00000080u;
}
void DownloadConfigure::clear_has_peer_stat_file() {
  _has_bits_[0] &= ~0x00000080u;
}
void DownloadConfigure::clear_peer_stat_file() {
  peer_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_stat_file();
}
const ::std::string& DownloadConfigure::peer_stat_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.peer_stat_file)
  return peer_stat_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_peer_stat_file(const ::std::string& value) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.peer_stat_file)
}
void DownloadConfigure::set_peer_stat_file(const char* value) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.peer_stat_file)
}
void DownloadConfigure::set_peer_stat_file(const char* value, size_t size) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.peer_stat_file)
}
::std::string* DownloadConfigure::mutable_peer_stat_file() {
  set_has_peer_stat_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.peer_stat_file)
  return peer_stat_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_peer_stat_file() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.peer_stat_file)
  clear_has_peer_stat_file();
  return peer_stat_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_peer_stat_file(::std::string* peer_stat_file) {
  if (peer_stat_file != NULL) {
    set_has_peer_stat_file();
  } else {
    clear_has_peer_stat_file();
  }
  peer_stat_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_stat_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.peer_stat_file)
}

// optional string download_log_file = 9;
bool DownloadConfigure::has_download_log_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DownloadConfigure::set_has_download_log_file() {
  _has_bits_[0] |= 0x00000100u;
}
void DownloadConfigure::clear_has_download_log_file() {
  _has_bits_[0] &= ~0x00000100u;
}
void DownloadConfigure::clear_download_log_file() {
  download_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_log_file();
}
const ::std::string& DownloadConfigure::download_log_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.download_log_file)
  return download_log_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_download_log_file(const ::std::string& value) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.download_log_file)
}
void DownloadConfigure::set_download_log_file(const char* value) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.download_log_file)
}
void DownloadConfigure::set_download_log_file(const char* value, size_t size) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.download_log_file)
}
::std::string* DownloadConfigure::mutable_download_log_file() {
  set_has_download_log_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.download_log_file)
  return download_log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_download_log_file() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.download_log_file)
  clear_has_download_log_file();
  return download_log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_download_log_file(::std::string* download_log_file) {
  if (download_log_file != NULL) {
    set_has_download_log_file();
  } else {
    clear_has_download_log_file();
  }
  download_log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_log_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.download_log_file)
}

// optional string tracker_conf_file = 10;
bool DownloadConfigure::has_tracker_conf_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DownloadConfigure::set_has_tracker_conf_file() {
  _has_bits_[0] |= 0x00000200u;
}
void DownloadConfigure::clear_has_tracker_conf_file() {
  _has_bits_[0] &= ~0x00000200u;
}
void DownloadConfigure::clear_tracker_conf_file() {
  tracker_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_conf_file();
}
const ::std::string& DownloadConfigure::tracker_conf_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.tracker_conf_file)
  return tracker_conf_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_tracker_conf_file(const ::std::string& value) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.tracker_conf_file)
}
void DownloadConfigure::set_tracker_conf_file(const char* value) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.DownloadConfigure.tracker_conf_file)
}
void DownloadConfigure::set_tracker_conf_file(const char* value, size_t size) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.DownloadConfigure.tracker_conf_file)
}
::std::string* DownloadConfigure::mutable_tracker_conf_file() {
  set_has_tracker_conf_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.DownloadConfigure.tracker_conf_file)
  return tracker_conf_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadConfigure::release_tracker_conf_file() {
  // @@protoc_insertion_point(field_release:bbts.message.DownloadConfigure.tracker_conf_file)
  clear_has_tracker_conf_file();
  return tracker_conf_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadConfigure::set_allocated_tracker_conf_file(::std::string* tracker_conf_file) {
  if (tracker_conf_file != NULL) {
    set_has_tracker_conf_file();
  } else {
    clear_has_tracker_conf_file();
  }
  tracker_conf_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_conf_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.DownloadConfigure.tracker_conf_file)
}

// optional int32 upload_limit = 51;
bool DownloadConfigure::has_upload_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DownloadConfigure::set_has_upload_limit() {
  _has_bits_[0] |= 0x00000400u;
}
void DownloadConfigure::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
void DownloadConfigure::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
::google::protobuf::int32 DownloadConfigure::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.upload_limit)
  return upload_limit_;
}
void DownloadConfigure::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.upload_limit)
}

// optional int32 download_limit = 52;
bool DownloadConfigure::has_download_limit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DownloadConfigure::set_has_download_limit() {
  _has_bits_[0] |= 0x00000800u;
}
void DownloadConfigure::clear_has_download_limit() {
  _has_bits_[0] &= ~0x00000800u;
}
void DownloadConfigure::clear_download_limit() {
  download_limit_ = 0;
  clear_has_download_limit();
}
::google::protobuf::int32 DownloadConfigure::download_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.download_limit)
  return download_limit_;
}
void DownloadConfigure::set_download_limit(::google::protobuf::int32 value) {
  set_has_download_limit();
  download_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.download_limit)
}

// optional int32 connection_limit = 53;
bool DownloadConfigure::has_connection_limit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void DownloadConfigure::set_has_connection_limit() {
  _has_bits_[0] |= 0x00001000u;
}
void DownloadConfigure::clear_has_connection_limit() {
  _has_bits_[0] &= ~0x00001000u;
}
void DownloadConfigure::clear_connection_limit() {
  connection_limit_ = 0;
  clear_has_connection_limit();
}
::google::protobuf::int32 DownloadConfigure::connection_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.connection_limit)
  return connection_limit_;
}
void DownloadConfigure::set_connection_limit(::google::protobuf::int32 value) {
  set_has_connection_limit();
  connection_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.connection_limit)
}

// optional int32 peers_num_want = 54;
bool DownloadConfigure::has_peers_num_want() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void DownloadConfigure::set_has_peers_num_want() {
  _has_bits_[0] |= 0x00002000u;
}
void DownloadConfigure::clear_has_peers_num_want() {
  _has_bits_[0] &= ~0x00002000u;
}
void DownloadConfigure::clear_peers_num_want() {
  peers_num_want_ = 0;
  clear_has_peers_num_want();
}
::google::protobuf::int32 DownloadConfigure::peers_num_want() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.peers_num_want)
  return peers_num_want_;
}
void DownloadConfigure::set_peers_num_want(::google::protobuf::int32 value) {
  set_has_peers_num_want();
  peers_num_want_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.peers_num_want)
}

// optional int32 cache_size = 56;
bool DownloadConfigure::has_cache_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void DownloadConfigure::set_has_cache_size() {
  _has_bits_[0] |= 0x00004000u;
}
void DownloadConfigure::clear_has_cache_size() {
  _has_bits_[0] &= ~0x00004000u;
}
void DownloadConfigure::clear_cache_size() {
  cache_size_ = 0;
  clear_has_cache_size();
}
::google::protobuf::int32 DownloadConfigure::cache_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.cache_size)
  return cache_size_;
}
void DownloadConfigure::set_cache_size(::google::protobuf::int32 value) {
  set_has_cache_size();
  cache_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.cache_size)
}

// optional int32 cache_expiry = 57;
bool DownloadConfigure::has_cache_expiry() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void DownloadConfigure::set_has_cache_expiry() {
  _has_bits_[0] |= 0x00008000u;
}
void DownloadConfigure::clear_has_cache_expiry() {
  _has_bits_[0] &= ~0x00008000u;
}
void DownloadConfigure::clear_cache_expiry() {
  cache_expiry_ = 0;
  clear_has_cache_expiry();
}
::google::protobuf::int32 DownloadConfigure::cache_expiry() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.cache_expiry)
  return cache_expiry_;
}
void DownloadConfigure::set_cache_expiry(::google::protobuf::int32 value) {
  set_has_cache_expiry();
  cache_expiry_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.cache_expiry)
}

// optional int32 file_pool_size = 58;
bool DownloadConfigure::has_file_pool_size() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DownloadConfigure::set_has_file_pool_size() {
  _has_bits_[0] |= 0x00010000u;
}
void DownloadConfigure::clear_has_file_pool_size() {
  _has_bits_[0] &= ~0x00010000u;
}
void DownloadConfigure::clear_file_pool_size() {
  file_pool_size_ = 0;
  clear_has_file_pool_size();
}
::google::protobuf::int32 DownloadConfigure::file_pool_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.file_pool_size)
  return file_pool_size_;
}
void DownloadConfigure::set_file_pool_size(::google::protobuf::int32 value) {
  set_has_file_pool_size();
  file_pool_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.file_pool_size)
}

// optional int32 max_metadata_size = 59;
bool DownloadConfigure::has_max_metadata_size() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DownloadConfigure::set_has_max_metadata_size() {
  _has_bits_[0] |= 0x00020000u;
}
void DownloadConfigure::clear_has_max_metadata_size() {
  _has_bits_[0] &= ~0x00020000u;
}
void DownloadConfigure::clear_max_metadata_size() {
  max_metadata_size_ = 0;
  clear_has_max_metadata_size();
}
::google::protobuf::int32 DownloadConfigure::max_metadata_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.max_metadata_size)
  return max_metadata_size_;
}
void DownloadConfigure::set_max_metadata_size(::google::protobuf::int32 value) {
  set_has_max_metadata_size();
  max_metadata_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.max_metadata_size)
}

// optional int32 seeding_announce_interval = 60;
bool DownloadConfigure::has_seeding_announce_interval() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DownloadConfigure::set_has_seeding_announce_interval() {
  _has_bits_[0] |= 0x00040000u;
}
void DownloadConfigure::clear_has_seeding_announce_interval() {
  _has_bits_[0] &= ~0x00040000u;
}
void DownloadConfigure::clear_seeding_announce_interval() {
  seeding_announce_interval_ = 0;
  clear_has_seeding_announce_interval();
}
::google::protobuf::int32 DownloadConfigure::seeding_announce_interval() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.seeding_announce_interval)
  return seeding_announce_interval_;
}
void DownloadConfigure::set_seeding_announce_interval(::google::protobuf::int32 value) {
  set_has_seeding_announce_interval();
  seeding_announce_interval_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.seeding_announce_interval)
}

// optional int32 min_reconnect_time = 61;
bool DownloadConfigure::has_min_reconnect_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DownloadConfigure::set_has_min_reconnect_time() {
  _has_bits_[0] |= 0x00080000u;
}
void DownloadConfigure::clear_has_min_reconnect_time() {
  _has_bits_[0] &= ~0x00080000u;
}
void DownloadConfigure::clear_min_reconnect_time() {
  min_reconnect_time_ = 0;
  clear_has_min_reconnect_time();
}
::google::protobuf::int32 DownloadConfigure::min_reconnect_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.min_reconnect_time)
  return min_reconnect_time_;
}
void DownloadConfigure::set_min_reconnect_time(::google::protobuf::int32 value) {
  set_has_min_reconnect_time();
  min_reconnect_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.min_reconnect_time)
}

// optional int32 peer_connect_timeout = 62;
bool DownloadConfigure::has_peer_connect_timeout() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DownloadConfigure::set_has_peer_connect_timeout() {
  _has_bits_[0] |= 0x00100000u;
}
void DownloadConfigure::clear_has_peer_connect_timeout() {
  _has_bits_[0] &= ~0x00100000u;
}
void DownloadConfigure::clear_peer_connect_timeout() {
  peer_connect_timeout_ = 0;
  clear_has_peer_connect_timeout();
}
::google::protobuf::int32 DownloadConfigure::peer_connect_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.peer_connect_timeout)
  return peer_connect_timeout_;
}
void DownloadConfigure::set_peer_connect_timeout(::google::protobuf::int32 value) {
  set_has_peer_connect_timeout();
  peer_connect_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.peer_connect_timeout)
}

// optional int32 read_cache_line_size = 63;
bool DownloadConfigure::has_read_cache_line_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void DownloadConfigure::set_has_read_cache_line_size() {
  _has_bits_[0] |= 0x00200000u;
}
void DownloadConfigure::clear_has_read_cache_line_size() {
  _has_bits_[0] &= ~0x00200000u;
}
void DownloadConfigure::clear_read_cache_line_size() {
  read_cache_line_size_ = 0;
  clear_has_read_cache_line_size();
}
::google::protobuf::int32 DownloadConfigure::read_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.read_cache_line_size)
  return read_cache_line_size_;
}
void DownloadConfigure::set_read_cache_line_size(::google::protobuf::int32 value) {
  set_has_read_cache_line_size();
  read_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.read_cache_line_size)
}

// optional int32 write_cache_line_size = 64;
bool DownloadConfigure::has_write_cache_line_size() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void DownloadConfigure::set_has_write_cache_line_size() {
  _has_bits_[0] |= 0x00400000u;
}
void DownloadConfigure::clear_has_write_cache_line_size() {
  _has_bits_[0] &= ~0x00400000u;
}
void DownloadConfigure::clear_write_cache_line_size() {
  write_cache_line_size_ = 0;
  clear_has_write_cache_line_size();
}
::google::protobuf::int32 DownloadConfigure::write_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.write_cache_line_size)
  return write_cache_line_size_;
}
void DownloadConfigure::set_write_cache_line_size(::google::protobuf::int32 value) {
  set_has_write_cache_line_size();
  write_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.write_cache_line_size)
}

// optional bool lock_disk_cache = 65;
bool DownloadConfigure::has_lock_disk_cache() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void DownloadConfigure::set_has_lock_disk_cache() {
  _has_bits_[0] |= 0x00800000u;
}
void DownloadConfigure::clear_has_lock_disk_cache() {
  _has_bits_[0] &= ~0x00800000u;
}
void DownloadConfigure::clear_lock_disk_cache() {
  lock_disk_cache_ = false;
  clear_has_lock_disk_cache();
}
bool DownloadConfigure::lock_disk_cache() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.lock_disk_cache)
  return lock_disk_cache_;
}
void DownloadConfigure::set_lock_disk_cache(bool value) {
  set_has_lock_disk_cache();
  lock_disk_cache_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.lock_disk_cache)
}

// optional bool suggest_mode = 66;
bool DownloadConfigure::has_suggest_mode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void DownloadConfigure::set_has_suggest_mode() {
  _has_bits_[0] |= 0x01000000u;
}
void DownloadConfigure::clear_has_suggest_mode() {
  _has_bits_[0] &= ~0x01000000u;
}
void DownloadConfigure::clear_suggest_mode() {
  suggest_mode_ = false;
  clear_has_suggest_mode();
}
bool DownloadConfigure::suggest_mode() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.suggest_mode)
  return suggest_mode_;
}
void DownloadConfigure::set_suggest_mode(bool value) {
  set_has_suggest_mode();
  suggest_mode_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.suggest_mode)
}

// optional int32 max_queued_disk_bytes = 67;
bool DownloadConfigure::has_max_queued_disk_bytes() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void DownloadConfigure::set_has_max_queued_disk_bytes() {
  _has_bits_[0] |= 0x02000000u;
}
void DownloadConfigure::clear_has_max_queued_disk_bytes() {
  _has_bits_[0] &= ~0x02000000u;
}
void DownloadConfigure::clear_max_queued_disk_bytes() {
  max_queued_disk_bytes_ = 0;
  clear_has_max_queued_disk_bytes();
}
::google::protobuf::int32 DownloadConfigure::max_queued_disk_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.max_queued_disk_bytes)
  return max_queued_disk_bytes_;
}
void DownloadConfigure::set_max_queued_disk_bytes(::google::protobuf::int32 value) {
  set_has_max_queued_disk_bytes();
  max_queued_disk_bytes_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.max_queued_disk_bytes)
}

// optional int32 max_out_request_queue = 68;
bool DownloadConfigure::has_max_out_request_queue() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void DownloadConfigure::set_has_max_out_request_queue() {
  _has_bits_[0] |= 0x04000000u;
}
void DownloadConfigure::clear_has_max_out_request_queue() {
  _has_bits_[0] &= ~0x04000000u;
}
void DownloadConfigure::clear_max_out_request_queue() {
  max_out_request_queue_ = 0;
  clear_has_max_out_request_queue();
}
::google::protobuf::int32 DownloadConfigure::max_out_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.max_out_request_queue)
  return max_out_request_queue_;
}
void DownloadConfigure::set_max_out_request_queue(::google::protobuf::int32 value) {
  set_has_max_out_request_queue();
  max_out_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.max_out_request_queue)
}

// optional int32 max_allowed_in_request_queue = 69;
bool DownloadConfigure::has_max_allowed_in_request_queue() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void DownloadConfigure::set_has_max_allowed_in_request_queue() {
  _has_bits_[0] |= 0x08000000u;
}
void DownloadConfigure::clear_has_max_allowed_in_request_queue() {
  _has_bits_[0] &= ~0x08000000u;
}
void DownloadConfigure::clear_max_allowed_in_request_queue() {
  max_allowed_in_request_queue_ = 0;
  clear_has_max_allowed_in_request_queue();
}
::google::protobuf::int32 DownloadConfigure::max_allowed_in_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.max_allowed_in_request_queue)
  return max_allowed_in_request_queue_;
}
void DownloadConfigure::set_max_allowed_in_request_queue(::google::protobuf::int32 value) {
  set_has_max_allowed_in_request_queue();
  max_allowed_in_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.max_allowed_in_request_queue)
}

// optional int32 whole_pieces_threshold = 70;
bool DownloadConfigure::has_whole_pieces_threshold() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void DownloadConfigure::set_has_whole_pieces_threshold() {
  _has_bits_[0] |= 0x10000000u;
}
void DownloadConfigure::clear_has_whole_pieces_threshold() {
  _has_bits_[0] &= ~0x10000000u;
}
void DownloadConfigure::clear_whole_pieces_threshold() {
  whole_pieces_threshold_ = 0;
  clear_has_whole_pieces_threshold();
}
::google::protobuf::int32 DownloadConfigure::whole_pieces_threshold() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.whole_pieces_threshold)
  return whole_pieces_threshold_;
}
void DownloadConfigure::set_whole_pieces_threshold(::google::protobuf::int32 value) {
  set_has_whole_pieces_threshold();
  whole_pieces_threshold_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.whole_pieces_threshold)
}

// optional int32 request_queue_time = 71;
bool DownloadConfigure::has_request_queue_time() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void DownloadConfigure::set_has_request_queue_time() {
  _has_bits_[0] |= 0x20000000u;
}
void DownloadConfigure::clear_has_request_queue_time() {
  _has_bits_[0] &= ~0x20000000u;
}
void DownloadConfigure::clear_request_queue_time() {
  request_queue_time_ = 0;
  clear_has_request_queue_time();
}
::google::protobuf::int32 DownloadConfigure::request_queue_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.request_queue_time)
  return request_queue_time_;
}
void DownloadConfigure::set_request_queue_time(::google::protobuf::int32 value) {
  set_has_request_queue_time();
  request_queue_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.request_queue_time)
}

// optional int32 send_buffer_low_watermark = 72;
bool DownloadConfigure::has_send_buffer_low_watermark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void DownloadConfigure::set_has_send_buffer_low_watermark() {
  _has_bits_[0] |= 0x40000000u;
}
void DownloadConfigure::clear_has_send_buffer_low_watermark() {
  _has_bits_[0] &= ~0x40000000u;
}
void DownloadConfigure::clear_send_buffer_low_watermark() {
  send_buffer_low_watermark_ = 0;
  clear_has_send_buffer_low_watermark();
}
::google::protobuf::int32 DownloadConfigure::send_buffer_low_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.send_buffer_low_watermark)
  return send_buffer_low_watermark_;
}
void DownloadConfigure::set_send_buffer_low_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_low_watermark();
  send_buffer_low_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.send_buffer_low_watermark)
}

// optional int32 send_buffer_watermark = 73;
bool DownloadConfigure::has_send_buffer_watermark() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void DownloadConfigure::set_has_send_buffer_watermark() {
  _has_bits_[0] |= 0x80000000u;
}
void DownloadConfigure::clear_has_send_buffer_watermark() {
  _has_bits_[0] &= ~0x80000000u;
}
void DownloadConfigure::clear_send_buffer_watermark() {
  send_buffer_watermark_ = 0;
  clear_has_send_buffer_watermark();
}
::google::protobuf::int32 DownloadConfigure::send_buffer_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.send_buffer_watermark)
  return send_buffer_watermark_;
}
void DownloadConfigure::set_send_buffer_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_watermark();
  send_buffer_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.send_buffer_watermark)
}

// optional int32 send_socket_buffer_size = 74;
bool DownloadConfigure::has_send_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void DownloadConfigure::set_has_send_socket_buffer_size() {
  _has_bits_[1] |= 0x00000001u;
}
void DownloadConfigure::clear_has_send_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000001u;
}
void DownloadConfigure::clear_send_socket_buffer_size() {
  send_socket_buffer_size_ = 0;
  clear_has_send_socket_buffer_size();
}
::google::protobuf::int32 DownloadConfigure::send_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.send_socket_buffer_size)
  return send_socket_buffer_size_;
}
void DownloadConfigure::set_send_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_send_socket_buffer_size();
  send_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.send_socket_buffer_size)
}

// optional int32 recv_socket_buffer_size = 75;
bool DownloadConfigure::has_recv_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void DownloadConfigure::set_has_recv_socket_buffer_size() {
  _has_bits_[1] |= 0x00000002u;
}
void DownloadConfigure::clear_has_recv_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000002u;
}
void DownloadConfigure::clear_recv_socket_buffer_size() {
  recv_socket_buffer_size_ = 0;
  clear_has_recv_socket_buffer_size();
}
::google::protobuf::int32 DownloadConfigure::recv_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.DownloadConfigure.recv_socket_buffer_size)
  return recv_socket_buffer_size_;
}
void DownloadConfigure::set_recv_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_recv_socket_buffer_size();
  recv_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.DownloadConfigure.recv_socket_buffer_size)
}

inline const DownloadConfigure* DownloadConfigure::internal_default_instance() {
  return &DownloadConfigure_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AgentConfigure::kWorkingDirFieldNumber;
const int AgentConfigure::kDynamicConfFileFieldNumber;
const int AgentConfigure::kResumeDirFieldNumber;
const int AgentConfigure::kLockFileFieldNumber;
const int AgentConfigure::kDatabaseFileFieldNumber;
const int AgentConfigure::kSocketFileFieldNumber;
const int AgentConfigure::kTaskStatFileFieldNumber;
const int AgentConfigure::kPeerStatFileFieldNumber;
const int AgentConfigure::kDownloadLogFileFieldNumber;
const int AgentConfigure::kTrackerConfFileFieldNumber;
const int AgentConfigure::kListenPortFieldNumber;
const int AgentConfigure::kWorkerThreadNumFieldNumber;
const int AgentConfigure::kDbDelIntervalFieldNumber;
const int AgentConfigure::kActiveSeedsFieldNumber;
const int AgentConfigure::kMaxTotalMetaNumFieldNumber;
const int AgentConfigure::kMaxTotalMetaSizeFieldNumber;
const int AgentConfigure::kUploadLimitFieldNumber;
const int AgentConfigure::kDownloadLimitFieldNumber;
const int AgentConfigure::kConnectionLimitFieldNumber;
const int AgentConfigure::kPeersNumWantFieldNumber;
const int AgentConfigure::kDisableOsCacheFieldNumber;
const int AgentConfigure::kCacheSizeFieldNumber;
const int AgentConfigure::kCacheExpiryFieldNumber;
const int AgentConfigure::kFilePoolSizeFieldNumber;
const int AgentConfigure::kMaxMetadataSizeFieldNumber;
const int AgentConfigure::kSeedingAnnounceIntervalFieldNumber;
const int AgentConfigure::kMinReconnectTimeFieldNumber;
const int AgentConfigure::kPeerConnectTimeoutFieldNumber;
const int AgentConfigure::kReadCacheLineSizeFieldNumber;
const int AgentConfigure::kWriteCacheLineSizeFieldNumber;
const int AgentConfigure::kLockDiskCacheFieldNumber;
const int AgentConfigure::kSuggestModeFieldNumber;
const int AgentConfigure::kMaxQueuedDiskBytesFieldNumber;
const int AgentConfigure::kMaxOutRequestQueueFieldNumber;
const int AgentConfigure::kMaxAllowedInRequestQueueFieldNumber;
const int AgentConfigure::kWholePiecesThresholdFieldNumber;
const int AgentConfigure::kRequestQueueTimeFieldNumber;
const int AgentConfigure::kSendBufferLowWatermarkFieldNumber;
const int AgentConfigure::kSendBufferWatermarkFieldNumber;
const int AgentConfigure::kSendSocketBufferSizeFieldNumber;
const int AgentConfigure::kRecvSocketBufferSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AgentConfigure::AgentConfigure()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_configure_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.message.AgentConfigure)
}

void AgentConfigure::InitAsDefaultInstance() {
}

AgentConfigure::AgentConfigure(const AgentConfigure& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.message.AgentConfigure)
}

void AgentConfigure::SharedCtor() {
  working_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_conf_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_stat_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_stat_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_log_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracker_conf_file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&listen_port_, 0, reinterpret_cast<char*>(&recv_socket_buffer_size_) -
    reinterpret_cast<char*>(&listen_port_) + sizeof(recv_socket_buffer_size_));
  _cached_size_ = 0;
}

AgentConfigure::~AgentConfigure() {
  // @@protoc_insertion_point(destructor:bbts.message.AgentConfigure)
  SharedDtor();
}

void AgentConfigure::SharedDtor() {
  working_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dynamic_conf_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  resume_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lock_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  socket_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_stat_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  peer_stat_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  download_log_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracker_conf_file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AgentConfigure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AgentConfigure::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AgentConfigure_descriptor_;
}

const AgentConfigure& AgentConfigure::default_instance() {
  protobuf_InitDefaults_configure_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<AgentConfigure> AgentConfigure_default_instance_;

AgentConfigure* AgentConfigure::New(::google::protobuf::Arena* arena) const {
  AgentConfigure* n = new AgentConfigure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AgentConfigure::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.message.AgentConfigure)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(AgentConfigure, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<AgentConfigure*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    if (has_working_dir()) {
      working_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_dynamic_conf_file()) {
      dynamic_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_resume_dir()) {
      resume_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_lock_file()) {
      lock_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_database_file()) {
      database_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_socket_file()) {
      socket_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_task_stat_file()) {
      task_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_peer_stat_file()) {
      peer_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ZR_(listen_port_, max_total_meta_size_);
    if (has_download_log_file()) {
      download_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_tracker_conf_file()) {
      tracker_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ZR_(upload_limit_, file_pool_size_);
    disable_os_cache_ = false;
  }
  ZR_(max_metadata_size_, peer_connect_timeout_);
  ZR_(lock_disk_cache_, write_cache_line_size_);
  ZR_(max_queued_disk_bytes_, send_socket_buffer_size_);
  recv_socket_buffer_size_ = 0;

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool AgentConfigure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.message.AgentConfigure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string working_dir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_working_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->working_dir().data(), this->working_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.working_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dynamic_conf_file;
        break;
      }

      // optional string dynamic_conf_file = 2;
      case 2: {
        if (tag == 18) {
         parse_dynamic_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dynamic_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.dynamic_conf_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_resume_dir;
        break;
      }

      // optional string resume_dir = 3;
      case 3: {
        if (tag == 26) {
         parse_resume_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resume_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->resume_dir().data(), this->resume_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.resume_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lock_file;
        break;
      }

      // optional string lock_file = 4;
      case 4: {
        if (tag == 34) {
         parse_lock_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lock_file().data(), this->lock_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.lock_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_database_file;
        break;
      }

      // optional string database_file = 5;
      case 5: {
        if (tag == 42) {
         parse_database_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database_file().data(), this->database_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.database_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_socket_file;
        break;
      }

      // optional string socket_file = 6;
      case 6: {
        if (tag == 50) {
         parse_socket_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_socket_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->socket_file().data(), this->socket_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.socket_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_task_stat_file;
        break;
      }

      // optional string task_stat_file = 7;
      case 7: {
        if (tag == 58) {
         parse_task_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_task_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->task_stat_file().data(), this->task_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.task_stat_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_peer_stat_file;
        break;
      }

      // optional string peer_stat_file = 8;
      case 8: {
        if (tag == 66) {
         parse_peer_stat_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_stat_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->peer_stat_file().data(), this->peer_stat_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.peer_stat_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_download_log_file;
        break;
      }

      // optional string download_log_file = 9;
      case 9: {
        if (tag == 74) {
         parse_download_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_download_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->download_log_file().data(), this->download_log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.download_log_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_tracker_conf_file;
        break;
      }

      // optional string tracker_conf_file = 10;
      case 10: {
        if (tag == 82) {
         parse_tracker_conf_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tracker_conf_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tracker_conf_file().data(), this->tracker_conf_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.message.AgentConfigure.tracker_conf_file");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_listen_port;
        break;
      }

      // optional int32 listen_port = 20;
      case 20: {
        if (tag == 160) {
         parse_listen_port:
          set_has_listen_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_worker_thread_num;
        break;
      }

      // optional int32 worker_thread_num = 21;
      case 21: {
        if (tag == 168) {
         parse_worker_thread_num:
          set_has_worker_thread_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_thread_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_db_del_interval;
        break;
      }

      // optional int32 db_del_interval = 22;
      case 22: {
        if (tag == 176) {
         parse_db_del_interval:
          set_has_db_del_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &db_del_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_active_seeds;
        break;
      }

      // optional int32 active_seeds = 23;
      case 23: {
        if (tag == 184) {
         parse_active_seeds:
          set_has_active_seeds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_seeds_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(192)) goto parse_max_total_meta_num;
        break;
      }

      // optional int32 max_total_meta_num = 24;
      case 24: {
        if (tag == 192) {
         parse_max_total_meta_num:
          set_has_max_total_meta_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_meta_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(200)) goto parse_max_total_meta_size;
        break;
      }

      // optional int32 max_total_meta_size = 25;
      case 25: {
        if (tag == 200) {
         parse_max_total_meta_size:
          set_has_max_total_meta_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_total_meta_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(408)) goto parse_upload_limit;
        break;
      }

      // optional int32 upload_limit = 51;
      case 51: {
        if (tag == 408) {
         parse_upload_limit:
          set_has_upload_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(416)) goto parse_download_limit;
        break;
      }

      // optional int32 download_limit = 52;
      case 52: {
        if (tag == 416) {
         parse_download_limit:
          set_has_download_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(424)) goto parse_connection_limit;
        break;
      }

      // optional int32 connection_limit = 53;
      case 53: {
        if (tag == 424) {
         parse_connection_limit:
          set_has_connection_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_limit_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(432)) goto parse_peers_num_want;
        break;
      }

      // optional int32 peers_num_want = 54;
      case 54: {
        if (tag == 432) {
         parse_peers_num_want:
          set_has_peers_num_want();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peers_num_want_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(440)) goto parse_disable_os_cache;
        break;
      }

      // optional bool disable_os_cache = 55;
      case 55: {
        if (tag == 440) {
         parse_disable_os_cache:
          set_has_disable_os_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_os_cache_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_cache_size;
        break;
      }

      // optional int32 cache_size = 56;
      case 56: {
        if (tag == 448) {
         parse_cache_size:
          set_has_cache_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(456)) goto parse_cache_expiry;
        break;
      }

      // optional int32 cache_expiry = 57;
      case 57: {
        if (tag == 456) {
         parse_cache_expiry:
          set_has_cache_expiry();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_expiry_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_file_pool_size;
        break;
      }

      // optional int32 file_pool_size = 58;
      case 58: {
        if (tag == 464) {
         parse_file_pool_size:
          set_has_file_pool_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_pool_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(472)) goto parse_max_metadata_size;
        break;
      }

      // optional int32 max_metadata_size = 59;
      case 59: {
        if (tag == 472) {
         parse_max_metadata_size:
          set_has_max_metadata_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_metadata_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(480)) goto parse_seeding_announce_interval;
        break;
      }

      // optional int32 seeding_announce_interval = 60;
      case 60: {
        if (tag == 480) {
         parse_seeding_announce_interval:
          set_has_seeding_announce_interval();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seeding_announce_interval_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(488)) goto parse_min_reconnect_time;
        break;
      }

      // optional int32 min_reconnect_time = 61;
      case 61: {
        if (tag == 488) {
         parse_min_reconnect_time:
          set_has_min_reconnect_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reconnect_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_peer_connect_timeout;
        break;
      }

      // optional int32 peer_connect_timeout = 62;
      case 62: {
        if (tag == 496) {
         parse_peer_connect_timeout:
          set_has_peer_connect_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_connect_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_read_cache_line_size;
        break;
      }

      // optional int32 read_cache_line_size = 63;
      case 63: {
        if (tag == 504) {
         parse_read_cache_line_size:
          set_has_read_cache_line_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_cache_line_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_write_cache_line_size;
        break;
      }

      // optional int32 write_cache_line_size = 64;
      case 64: {
        if (tag == 512) {
         parse_write_cache_line_size:
          set_has_write_cache_line_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_cache_line_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(520)) goto parse_lock_disk_cache;
        break;
      }

      // optional bool lock_disk_cache = 65;
      case 65: {
        if (tag == 520) {
         parse_lock_disk_cache:
          set_has_lock_disk_cache();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_disk_cache_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_suggest_mode;
        break;
      }

      // optional bool suggest_mode = 66;
      case 66: {
        if (tag == 528) {
         parse_suggest_mode:
          set_has_suggest_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_mode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(536)) goto parse_max_queued_disk_bytes;
        break;
      }

      // optional int32 max_queued_disk_bytes = 67;
      case 67: {
        if (tag == 536) {
         parse_max_queued_disk_bytes:
          set_has_max_queued_disk_bytes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queued_disk_bytes_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(544)) goto parse_max_out_request_queue;
        break;
      }

      // optional int32 max_out_request_queue = 68;
      case 68: {
        if (tag == 544) {
         parse_max_out_request_queue:
          set_has_max_out_request_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_out_request_queue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(552)) goto parse_max_allowed_in_request_queue;
        break;
      }

      // optional int32 max_allowed_in_request_queue = 69;
      case 69: {
        if (tag == 552) {
         parse_max_allowed_in_request_queue:
          set_has_max_allowed_in_request_queue();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_in_request_queue_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_whole_pieces_threshold;
        break;
      }

      // optional int32 whole_pieces_threshold = 70;
      case 70: {
        if (tag == 560) {
         parse_whole_pieces_threshold:
          set_has_whole_pieces_threshold();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whole_pieces_threshold_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_request_queue_time;
        break;
      }

      // optional int32 request_queue_time = 71;
      case 71: {
        if (tag == 568) {
         parse_request_queue_time:
          set_has_request_queue_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_queue_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_send_buffer_low_watermark;
        break;
      }

      // optional int32 send_buffer_low_watermark = 72;
      case 72: {
        if (tag == 576) {
         parse_send_buffer_low_watermark:
          set_has_send_buffer_low_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_low_watermark_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_send_buffer_watermark;
        break;
      }

      // optional int32 send_buffer_watermark = 73;
      case 73: {
        if (tag == 584) {
         parse_send_buffer_watermark:
          set_has_send_buffer_watermark();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_watermark_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(592)) goto parse_send_socket_buffer_size;
        break;
      }

      // optional int32 send_socket_buffer_size = 74;
      case 74: {
        if (tag == 592) {
         parse_send_socket_buffer_size:
          set_has_send_socket_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_socket_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(600)) goto parse_recv_socket_buffer_size;
        break;
      }

      // optional int32 recv_socket_buffer_size = 75;
      case 75: {
        if (tag == 600) {
         parse_recv_socket_buffer_size:
          set_has_recv_socket_buffer_size();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_socket_buffer_size_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.message.AgentConfigure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.message.AgentConfigure)
  return false;
#undef DO_
}

void AgentConfigure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.message.AgentConfigure)
  // optional string working_dir = 1;
  if (has_working_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->working_dir().data(), this->working_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.working_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->working_dir(), output);
  }

  // optional string dynamic_conf_file = 2;
  if (has_dynamic_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.dynamic_conf_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dynamic_conf_file(), output);
  }

  // optional string resume_dir = 3;
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.resume_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->resume_dir(), output);
  }

  // optional string lock_file = 4;
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.lock_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lock_file(), output);
  }

  // optional string database_file = 5;
  if (has_database_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_file().data(), this->database_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.database_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->database_file(), output);
  }

  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.socket_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->socket_file(), output);
  }

  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.task_stat_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->task_stat_file(), output);
  }

  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.peer_stat_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->peer_stat_file(), output);
  }

  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.download_log_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->download_log_file(), output);
  }

  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.tracker_conf_file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->tracker_conf_file(), output);
  }

  // optional int32 listen_port = 20;
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->listen_port(), output);
  }

  // optional int32 worker_thread_num = 21;
  if (has_worker_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->worker_thread_num(), output);
  }

  // optional int32 db_del_interval = 22;
  if (has_db_del_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->db_del_interval(), output);
  }

  // optional int32 active_seeds = 23;
  if (has_active_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->active_seeds(), output);
  }

  // optional int32 max_total_meta_num = 24;
  if (has_max_total_meta_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->max_total_meta_num(), output);
  }

  // optional int32 max_total_meta_size = 25;
  if (has_max_total_meta_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->max_total_meta_size(), output);
  }

  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->upload_limit(), output);
  }

  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->download_limit(), output);
  }

  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->connection_limit(), output);
  }

  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->peers_num_want(), output);
  }

  // optional bool disable_os_cache = 55;
  if (has_disable_os_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(55, this->disable_os_cache(), output);
  }

  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->cache_size(), output);
  }

  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->cache_expiry(), output);
  }

  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->file_pool_size(), output);
  }

  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(59, this->max_metadata_size(), output);
  }

  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->seeding_announce_interval(), output);
  }

  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->min_reconnect_time(), output);
  }

  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->peer_connect_timeout(), output);
  }

  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->read_cache_line_size(), output);
  }

  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->write_cache_line_size(), output);
  }

  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->lock_disk_cache(), output);
  }

  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(66, this->suggest_mode(), output);
  }

  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->max_queued_disk_bytes(), output);
  }

  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->max_out_request_queue(), output);
  }

  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->max_allowed_in_request_queue(), output);
  }

  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->whole_pieces_threshold(), output);
  }

  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->request_queue_time(), output);
  }

  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->send_buffer_low_watermark(), output);
  }

  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->send_buffer_watermark(), output);
  }

  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(74, this->send_socket_buffer_size(), output);
  }

  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(75, this->recv_socket_buffer_size(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.message.AgentConfigure)
}

::google::protobuf::uint8* AgentConfigure::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.message.AgentConfigure)
  // optional string working_dir = 1;
  if (has_working_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->working_dir().data(), this->working_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.working_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->working_dir(), target);
  }

  // optional string dynamic_conf_file = 2;
  if (has_dynamic_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dynamic_conf_file().data(), this->dynamic_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.dynamic_conf_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dynamic_conf_file(), target);
  }

  // optional string resume_dir = 3;
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.resume_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->resume_dir(), target);
  }

  // optional string lock_file = 4;
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.lock_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lock_file(), target);
  }

  // optional string database_file = 5;
  if (has_database_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database_file().data(), this->database_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.database_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->database_file(), target);
  }

  // optional string socket_file = 6;
  if (has_socket_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->socket_file().data(), this->socket_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.socket_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->socket_file(), target);
  }

  // optional string task_stat_file = 7;
  if (has_task_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->task_stat_file().data(), this->task_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.task_stat_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->task_stat_file(), target);
  }

  // optional string peer_stat_file = 8;
  if (has_peer_stat_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->peer_stat_file().data(), this->peer_stat_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.peer_stat_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->peer_stat_file(), target);
  }

  // optional string download_log_file = 9;
  if (has_download_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->download_log_file().data(), this->download_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.download_log_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->download_log_file(), target);
  }

  // optional string tracker_conf_file = 10;
  if (has_tracker_conf_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tracker_conf_file().data(), this->tracker_conf_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.message.AgentConfigure.tracker_conf_file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->tracker_conf_file(), target);
  }

  // optional int32 listen_port = 20;
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->listen_port(), target);
  }

  // optional int32 worker_thread_num = 21;
  if (has_worker_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->worker_thread_num(), target);
  }

  // optional int32 db_del_interval = 22;
  if (has_db_del_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->db_del_interval(), target);
  }

  // optional int32 active_seeds = 23;
  if (has_active_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->active_seeds(), target);
  }

  // optional int32 max_total_meta_num = 24;
  if (has_max_total_meta_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->max_total_meta_num(), target);
  }

  // optional int32 max_total_meta_size = 25;
  if (has_max_total_meta_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->max_total_meta_size(), target);
  }

  // optional int32 upload_limit = 51;
  if (has_upload_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->upload_limit(), target);
  }

  // optional int32 download_limit = 52;
  if (has_download_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->download_limit(), target);
  }

  // optional int32 connection_limit = 53;
  if (has_connection_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->connection_limit(), target);
  }

  // optional int32 peers_num_want = 54;
  if (has_peers_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->peers_num_want(), target);
  }

  // optional bool disable_os_cache = 55;
  if (has_disable_os_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(55, this->disable_os_cache(), target);
  }

  // optional int32 cache_size = 56;
  if (has_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->cache_size(), target);
  }

  // optional int32 cache_expiry = 57;
  if (has_cache_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->cache_expiry(), target);
  }

  // optional int32 file_pool_size = 58;
  if (has_file_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->file_pool_size(), target);
  }

  // optional int32 max_metadata_size = 59;
  if (has_max_metadata_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(59, this->max_metadata_size(), target);
  }

  // optional int32 seeding_announce_interval = 60;
  if (has_seeding_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->seeding_announce_interval(), target);
  }

  // optional int32 min_reconnect_time = 61;
  if (has_min_reconnect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->min_reconnect_time(), target);
  }

  // optional int32 peer_connect_timeout = 62;
  if (has_peer_connect_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->peer_connect_timeout(), target);
  }

  // optional int32 read_cache_line_size = 63;
  if (has_read_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->read_cache_line_size(), target);
  }

  // optional int32 write_cache_line_size = 64;
  if (has_write_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->write_cache_line_size(), target);
  }

  // optional bool lock_disk_cache = 65;
  if (has_lock_disk_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(65, this->lock_disk_cache(), target);
  }

  // optional bool suggest_mode = 66;
  if (has_suggest_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(66, this->suggest_mode(), target);
  }

  // optional int32 max_queued_disk_bytes = 67;
  if (has_max_queued_disk_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->max_queued_disk_bytes(), target);
  }

  // optional int32 max_out_request_queue = 68;
  if (has_max_out_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->max_out_request_queue(), target);
  }

  // optional int32 max_allowed_in_request_queue = 69;
  if (has_max_allowed_in_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->max_allowed_in_request_queue(), target);
  }

  // optional int32 whole_pieces_threshold = 70;
  if (has_whole_pieces_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->whole_pieces_threshold(), target);
  }

  // optional int32 request_queue_time = 71;
  if (has_request_queue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->request_queue_time(), target);
  }

  // optional int32 send_buffer_low_watermark = 72;
  if (has_send_buffer_low_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->send_buffer_low_watermark(), target);
  }

  // optional int32 send_buffer_watermark = 73;
  if (has_send_buffer_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->send_buffer_watermark(), target);
  }

  // optional int32 send_socket_buffer_size = 74;
  if (has_send_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(74, this->send_socket_buffer_size(), target);
  }

  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(75, this->recv_socket_buffer_size(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.message.AgentConfigure)
  return target;
}

size_t AgentConfigure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.message.AgentConfigure)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string working_dir = 1;
    if (has_working_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->working_dir());
    }

    // optional string dynamic_conf_file = 2;
    if (has_dynamic_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dynamic_conf_file());
    }

    // optional string resume_dir = 3;
    if (has_resume_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resume_dir());
    }

    // optional string lock_file = 4;
    if (has_lock_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lock_file());
    }

    // optional string database_file = 5;
    if (has_database_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database_file());
    }

    // optional string socket_file = 6;
    if (has_socket_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->socket_file());
    }

    // optional string task_stat_file = 7;
    if (has_task_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->task_stat_file());
    }

    // optional string peer_stat_file = 8;
    if (has_peer_stat_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_stat_file());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional string download_log_file = 9;
    if (has_download_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->download_log_file());
    }

    // optional string tracker_conf_file = 10;
    if (has_tracker_conf_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tracker_conf_file());
    }

    // optional int32 listen_port = 20;
    if (has_listen_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listen_port());
    }

    // optional int32 worker_thread_num = 21;
    if (has_worker_thread_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->worker_thread_num());
    }

    // optional int32 db_del_interval = 22;
    if (has_db_del_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->db_del_interval());
    }

    // optional int32 active_seeds = 23;
    if (has_active_seeds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_seeds());
    }

    // optional int32 max_total_meta_num = 24;
    if (has_max_total_meta_num()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_total_meta_num());
    }

    // optional int32 max_total_meta_size = 25;
    if (has_max_total_meta_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_total_meta_size());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 upload_limit = 51;
    if (has_upload_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_limit());
    }

    // optional int32 download_limit = 52;
    if (has_download_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_limit());
    }

    // optional int32 connection_limit = 53;
    if (has_connection_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_limit());
    }

    // optional int32 peers_num_want = 54;
    if (has_peers_num_want()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peers_num_want());
    }

    // optional bool disable_os_cache = 55;
    if (has_disable_os_cache()) {
      total_size += 2 + 1;
    }

    // optional int32 cache_size = 56;
    if (has_cache_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }

    // optional int32 cache_expiry = 57;
    if (has_cache_expiry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_expiry());
    }

    // optional int32 file_pool_size = 58;
    if (has_file_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_pool_size());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 max_metadata_size = 59;
    if (has_max_metadata_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_metadata_size());
    }

    // optional int32 seeding_announce_interval = 60;
    if (has_seeding_announce_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seeding_announce_interval());
    }

    // optional int32 min_reconnect_time = 61;
    if (has_min_reconnect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reconnect_time());
    }

    // optional int32 peer_connect_timeout = 62;
    if (has_peer_connect_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_connect_timeout());
    }

    // optional int32 read_cache_line_size = 63;
    if (has_read_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_cache_line_size());
    }

    // optional int32 write_cache_line_size = 64;
    if (has_write_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_cache_line_size());
    }

    // optional bool lock_disk_cache = 65;
    if (has_lock_disk_cache()) {
      total_size += 2 + 1;
    }

    // optional bool suggest_mode = 66;
    if (has_suggest_mode()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 max_queued_disk_bytes = 67;
    if (has_max_queued_disk_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queued_disk_bytes());
    }

    // optional int32 max_out_request_queue = 68;
    if (has_max_out_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_out_request_queue());
    }

    // optional int32 max_allowed_in_request_queue = 69;
    if (has_max_allowed_in_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_in_request_queue());
    }

    // optional int32 whole_pieces_threshold = 70;
    if (has_whole_pieces_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whole_pieces_threshold());
    }

    // optional int32 request_queue_time = 71;
    if (has_request_queue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_queue_time());
    }

    // optional int32 send_buffer_low_watermark = 72;
    if (has_send_buffer_low_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_low_watermark());
    }

    // optional int32 send_buffer_watermark = 73;
    if (has_send_buffer_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_watermark());
    }

    // optional int32 send_socket_buffer_size = 74;
    if (has_send_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_socket_buffer_size());
    }

  }
  // optional int32 recv_socket_buffer_size = 75;
  if (has_recv_socket_buffer_size()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recv_socket_buffer_size());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AgentConfigure::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.message.AgentConfigure)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const AgentConfigure* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AgentConfigure>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.message.AgentConfigure)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.message.AgentConfigure)
    UnsafeMergeFrom(*source);
  }
}

void AgentConfigure::MergeFrom(const AgentConfigure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.message.AgentConfigure)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void AgentConfigure::UnsafeMergeFrom(const AgentConfigure& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_working_dir()) {
      set_has_working_dir();
      working_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.working_dir_);
    }
    if (from.has_dynamic_conf_file()) {
      set_has_dynamic_conf_file();
      dynamic_conf_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dynamic_conf_file_);
    }
    if (from.has_resume_dir()) {
      set_has_resume_dir();
      resume_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.resume_dir_);
    }
    if (from.has_lock_file()) {
      set_has_lock_file();
      lock_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lock_file_);
    }
    if (from.has_database_file()) {
      set_has_database_file();
      database_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_file_);
    }
    if (from.has_socket_file()) {
      set_has_socket_file();
      socket_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.socket_file_);
    }
    if (from.has_task_stat_file()) {
      set_has_task_stat_file();
      task_stat_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.task_stat_file_);
    }
    if (from.has_peer_stat_file()) {
      set_has_peer_stat_file();
      peer_stat_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.peer_stat_file_);
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_download_log_file()) {
      set_has_download_log_file();
      download_log_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.download_log_file_);
    }
    if (from.has_tracker_conf_file()) {
      set_has_tracker_conf_file();
      tracker_conf_file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tracker_conf_file_);
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
    if (from.has_worker_thread_num()) {
      set_worker_thread_num(from.worker_thread_num());
    }
    if (from.has_db_del_interval()) {
      set_db_del_interval(from.db_del_interval());
    }
    if (from.has_active_seeds()) {
      set_active_seeds(from.active_seeds());
    }
    if (from.has_max_total_meta_num()) {
      set_max_total_meta_num(from.max_total_meta_num());
    }
    if (from.has_max_total_meta_size()) {
      set_max_total_meta_size(from.max_total_meta_size());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_upload_limit()) {
      set_upload_limit(from.upload_limit());
    }
    if (from.has_download_limit()) {
      set_download_limit(from.download_limit());
    }
    if (from.has_connection_limit()) {
      set_connection_limit(from.connection_limit());
    }
    if (from.has_peers_num_want()) {
      set_peers_num_want(from.peers_num_want());
    }
    if (from.has_disable_os_cache()) {
      set_disable_os_cache(from.disable_os_cache());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_cache_expiry()) {
      set_cache_expiry(from.cache_expiry());
    }
    if (from.has_file_pool_size()) {
      set_file_pool_size(from.file_pool_size());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_max_metadata_size()) {
      set_max_metadata_size(from.max_metadata_size());
    }
    if (from.has_seeding_announce_interval()) {
      set_seeding_announce_interval(from.seeding_announce_interval());
    }
    if (from.has_min_reconnect_time()) {
      set_min_reconnect_time(from.min_reconnect_time());
    }
    if (from.has_peer_connect_timeout()) {
      set_peer_connect_timeout(from.peer_connect_timeout());
    }
    if (from.has_read_cache_line_size()) {
      set_read_cache_line_size(from.read_cache_line_size());
    }
    if (from.has_write_cache_line_size()) {
      set_write_cache_line_size(from.write_cache_line_size());
    }
    if (from.has_lock_disk_cache()) {
      set_lock_disk_cache(from.lock_disk_cache());
    }
    if (from.has_suggest_mode()) {
      set_suggest_mode(from.suggest_mode());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_max_queued_disk_bytes()) {
      set_max_queued_disk_bytes(from.max_queued_disk_bytes());
    }
    if (from.has_max_out_request_queue()) {
      set_max_out_request_queue(from.max_out_request_queue());
    }
    if (from.has_max_allowed_in_request_queue()) {
      set_max_allowed_in_request_queue(from.max_allowed_in_request_queue());
    }
    if (from.has_whole_pieces_threshold()) {
      set_whole_pieces_threshold(from.whole_pieces_threshold());
    }
    if (from.has_request_queue_time()) {
      set_request_queue_time(from.request_queue_time());
    }
    if (from.has_send_buffer_low_watermark()) {
      set_send_buffer_low_watermark(from.send_buffer_low_watermark());
    }
    if (from.has_send_buffer_watermark()) {
      set_send_buffer_watermark(from.send_buffer_watermark());
    }
    if (from.has_send_socket_buffer_size()) {
      set_send_socket_buffer_size(from.send_socket_buffer_size());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_recv_socket_buffer_size()) {
      set_recv_socket_buffer_size(from.recv_socket_buffer_size());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void AgentConfigure::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.message.AgentConfigure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AgentConfigure::CopyFrom(const AgentConfigure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.message.AgentConfigure)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool AgentConfigure::IsInitialized() const {

  return true;
}

void AgentConfigure::Swap(AgentConfigure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AgentConfigure::InternalSwap(AgentConfigure* other) {
  working_dir_.Swap(&other->working_dir_);
  dynamic_conf_file_.Swap(&other->dynamic_conf_file_);
  resume_dir_.Swap(&other->resume_dir_);
  lock_file_.Swap(&other->lock_file_);
  database_file_.Swap(&other->database_file_);
  socket_file_.Swap(&other->socket_file_);
  task_stat_file_.Swap(&other->task_stat_file_);
  peer_stat_file_.Swap(&other->peer_stat_file_);
  download_log_file_.Swap(&other->download_log_file_);
  tracker_conf_file_.Swap(&other->tracker_conf_file_);
  std::swap(listen_port_, other->listen_port_);
  std::swap(worker_thread_num_, other->worker_thread_num_);
  std::swap(db_del_interval_, other->db_del_interval_);
  std::swap(active_seeds_, other->active_seeds_);
  std::swap(max_total_meta_num_, other->max_total_meta_num_);
  std::swap(max_total_meta_size_, other->max_total_meta_size_);
  std::swap(upload_limit_, other->upload_limit_);
  std::swap(download_limit_, other->download_limit_);
  std::swap(connection_limit_, other->connection_limit_);
  std::swap(peers_num_want_, other->peers_num_want_);
  std::swap(disable_os_cache_, other->disable_os_cache_);
  std::swap(cache_size_, other->cache_size_);
  std::swap(cache_expiry_, other->cache_expiry_);
  std::swap(file_pool_size_, other->file_pool_size_);
  std::swap(max_metadata_size_, other->max_metadata_size_);
  std::swap(seeding_announce_interval_, other->seeding_announce_interval_);
  std::swap(min_reconnect_time_, other->min_reconnect_time_);
  std::swap(peer_connect_timeout_, other->peer_connect_timeout_);
  std::swap(read_cache_line_size_, other->read_cache_line_size_);
  std::swap(write_cache_line_size_, other->write_cache_line_size_);
  std::swap(lock_disk_cache_, other->lock_disk_cache_);
  std::swap(suggest_mode_, other->suggest_mode_);
  std::swap(max_queued_disk_bytes_, other->max_queued_disk_bytes_);
  std::swap(max_out_request_queue_, other->max_out_request_queue_);
  std::swap(max_allowed_in_request_queue_, other->max_allowed_in_request_queue_);
  std::swap(whole_pieces_threshold_, other->whole_pieces_threshold_);
  std::swap(request_queue_time_, other->request_queue_time_);
  std::swap(send_buffer_low_watermark_, other->send_buffer_low_watermark_);
  std::swap(send_buffer_watermark_, other->send_buffer_watermark_);
  std::swap(send_socket_buffer_size_, other->send_socket_buffer_size_);
  std::swap(recv_socket_buffer_size_, other->recv_socket_buffer_size_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata AgentConfigure::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AgentConfigure_descriptor_;
  metadata.reflection = AgentConfigure_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AgentConfigure

// optional string working_dir = 1;
bool AgentConfigure::has_working_dir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void AgentConfigure::set_has_working_dir() {
  _has_bits_[0] |= 0x00000001u;
}
void AgentConfigure::clear_has_working_dir() {
  _has_bits_[0] &= ~0x00000001u;
}
void AgentConfigure::clear_working_dir() {
  working_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_working_dir();
}
const ::std::string& AgentConfigure::working_dir() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.working_dir)
  return working_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_working_dir(const ::std::string& value) {
  set_has_working_dir();
  working_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.working_dir)
}
void AgentConfigure::set_working_dir(const char* value) {
  set_has_working_dir();
  working_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.working_dir)
}
void AgentConfigure::set_working_dir(const char* value, size_t size) {
  set_has_working_dir();
  working_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.working_dir)
}
::std::string* AgentConfigure::mutable_working_dir() {
  set_has_working_dir();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.working_dir)
  return working_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_working_dir() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.working_dir)
  clear_has_working_dir();
  return working_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_working_dir(::std::string* working_dir) {
  if (working_dir != NULL) {
    set_has_working_dir();
  } else {
    clear_has_working_dir();
  }
  working_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), working_dir);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.working_dir)
}

// optional string dynamic_conf_file = 2;
bool AgentConfigure::has_dynamic_conf_file() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void AgentConfigure::set_has_dynamic_conf_file() {
  _has_bits_[0] |= 0x00000002u;
}
void AgentConfigure::clear_has_dynamic_conf_file() {
  _has_bits_[0] &= ~0x00000002u;
}
void AgentConfigure::clear_dynamic_conf_file() {
  dynamic_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_dynamic_conf_file();
}
const ::std::string& AgentConfigure::dynamic_conf_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.dynamic_conf_file)
  return dynamic_conf_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_dynamic_conf_file(const ::std::string& value) {
  set_has_dynamic_conf_file();
  dynamic_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.dynamic_conf_file)
}
void AgentConfigure::set_dynamic_conf_file(const char* value) {
  set_has_dynamic_conf_file();
  dynamic_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.dynamic_conf_file)
}
void AgentConfigure::set_dynamic_conf_file(const char* value, size_t size) {
  set_has_dynamic_conf_file();
  dynamic_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.dynamic_conf_file)
}
::std::string* AgentConfigure::mutable_dynamic_conf_file() {
  set_has_dynamic_conf_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.dynamic_conf_file)
  return dynamic_conf_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_dynamic_conf_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.dynamic_conf_file)
  clear_has_dynamic_conf_file();
  return dynamic_conf_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_dynamic_conf_file(::std::string* dynamic_conf_file) {
  if (dynamic_conf_file != NULL) {
    set_has_dynamic_conf_file();
  } else {
    clear_has_dynamic_conf_file();
  }
  dynamic_conf_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dynamic_conf_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.dynamic_conf_file)
}

// optional string resume_dir = 3;
bool AgentConfigure::has_resume_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void AgentConfigure::set_has_resume_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void AgentConfigure::clear_has_resume_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void AgentConfigure::clear_resume_dir() {
  resume_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_resume_dir();
}
const ::std::string& AgentConfigure::resume_dir() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.resume_dir)
  return resume_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_resume_dir(const ::std::string& value) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.resume_dir)
}
void AgentConfigure::set_resume_dir(const char* value) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.resume_dir)
}
void AgentConfigure::set_resume_dir(const char* value, size_t size) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.resume_dir)
}
::std::string* AgentConfigure::mutable_resume_dir() {
  set_has_resume_dir();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.resume_dir)
  return resume_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_resume_dir() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.resume_dir)
  clear_has_resume_dir();
  return resume_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_resume_dir(::std::string* resume_dir) {
  if (resume_dir != NULL) {
    set_has_resume_dir();
  } else {
    clear_has_resume_dir();
  }
  resume_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resume_dir);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.resume_dir)
}

// optional string lock_file = 4;
bool AgentConfigure::has_lock_file() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void AgentConfigure::set_has_lock_file() {
  _has_bits_[0] |= 0x00000008u;
}
void AgentConfigure::clear_has_lock_file() {
  _has_bits_[0] &= ~0x00000008u;
}
void AgentConfigure::clear_lock_file() {
  lock_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lock_file();
}
const ::std::string& AgentConfigure::lock_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.lock_file)
  return lock_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_lock_file(const ::std::string& value) {
  set_has_lock_file();
  lock_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.lock_file)
}
void AgentConfigure::set_lock_file(const char* value) {
  set_has_lock_file();
  lock_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.lock_file)
}
void AgentConfigure::set_lock_file(const char* value, size_t size) {
  set_has_lock_file();
  lock_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.lock_file)
}
::std::string* AgentConfigure::mutable_lock_file() {
  set_has_lock_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.lock_file)
  return lock_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_lock_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.lock_file)
  clear_has_lock_file();
  return lock_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_lock_file(::std::string* lock_file) {
  if (lock_file != NULL) {
    set_has_lock_file();
  } else {
    clear_has_lock_file();
  }
  lock_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lock_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.lock_file)
}

// optional string database_file = 5;
bool AgentConfigure::has_database_file() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void AgentConfigure::set_has_database_file() {
  _has_bits_[0] |= 0x00000010u;
}
void AgentConfigure::clear_has_database_file() {
  _has_bits_[0] &= ~0x00000010u;
}
void AgentConfigure::clear_database_file() {
  database_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_database_file();
}
const ::std::string& AgentConfigure::database_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.database_file)
  return database_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_database_file(const ::std::string& value) {
  set_has_database_file();
  database_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.database_file)
}
void AgentConfigure::set_database_file(const char* value) {
  set_has_database_file();
  database_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.database_file)
}
void AgentConfigure::set_database_file(const char* value, size_t size) {
  set_has_database_file();
  database_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.database_file)
}
::std::string* AgentConfigure::mutable_database_file() {
  set_has_database_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.database_file)
  return database_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_database_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.database_file)
  clear_has_database_file();
  return database_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_database_file(::std::string* database_file) {
  if (database_file != NULL) {
    set_has_database_file();
  } else {
    clear_has_database_file();
  }
  database_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.database_file)
}

// optional string socket_file = 6;
bool AgentConfigure::has_socket_file() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void AgentConfigure::set_has_socket_file() {
  _has_bits_[0] |= 0x00000020u;
}
void AgentConfigure::clear_has_socket_file() {
  _has_bits_[0] &= ~0x00000020u;
}
void AgentConfigure::clear_socket_file() {
  socket_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_socket_file();
}
const ::std::string& AgentConfigure::socket_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.socket_file)
  return socket_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_socket_file(const ::std::string& value) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.socket_file)
}
void AgentConfigure::set_socket_file(const char* value) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.socket_file)
}
void AgentConfigure::set_socket_file(const char* value, size_t size) {
  set_has_socket_file();
  socket_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.socket_file)
}
::std::string* AgentConfigure::mutable_socket_file() {
  set_has_socket_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.socket_file)
  return socket_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_socket_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.socket_file)
  clear_has_socket_file();
  return socket_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_socket_file(::std::string* socket_file) {
  if (socket_file != NULL) {
    set_has_socket_file();
  } else {
    clear_has_socket_file();
  }
  socket_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), socket_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.socket_file)
}

// optional string task_stat_file = 7;
bool AgentConfigure::has_task_stat_file() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void AgentConfigure::set_has_task_stat_file() {
  _has_bits_[0] |= 0x00000040u;
}
void AgentConfigure::clear_has_task_stat_file() {
  _has_bits_[0] &= ~0x00000040u;
}
void AgentConfigure::clear_task_stat_file() {
  task_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_stat_file();
}
const ::std::string& AgentConfigure::task_stat_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.task_stat_file)
  return task_stat_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_task_stat_file(const ::std::string& value) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.task_stat_file)
}
void AgentConfigure::set_task_stat_file(const char* value) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.task_stat_file)
}
void AgentConfigure::set_task_stat_file(const char* value, size_t size) {
  set_has_task_stat_file();
  task_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.task_stat_file)
}
::std::string* AgentConfigure::mutable_task_stat_file() {
  set_has_task_stat_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.task_stat_file)
  return task_stat_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_task_stat_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.task_stat_file)
  clear_has_task_stat_file();
  return task_stat_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_task_stat_file(::std::string* task_stat_file) {
  if (task_stat_file != NULL) {
    set_has_task_stat_file();
  } else {
    clear_has_task_stat_file();
  }
  task_stat_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_stat_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.task_stat_file)
}

// optional string peer_stat_file = 8;
bool AgentConfigure::has_peer_stat_file() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void AgentConfigure::set_has_peer_stat_file() {
  _has_bits_[0] |= 0x00000080u;
}
void AgentConfigure::clear_has_peer_stat_file() {
  _has_bits_[0] &= ~0x00000080u;
}
void AgentConfigure::clear_peer_stat_file() {
  peer_stat_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_peer_stat_file();
}
const ::std::string& AgentConfigure::peer_stat_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.peer_stat_file)
  return peer_stat_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_peer_stat_file(const ::std::string& value) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.peer_stat_file)
}
void AgentConfigure::set_peer_stat_file(const char* value) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.peer_stat_file)
}
void AgentConfigure::set_peer_stat_file(const char* value, size_t size) {
  set_has_peer_stat_file();
  peer_stat_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.peer_stat_file)
}
::std::string* AgentConfigure::mutable_peer_stat_file() {
  set_has_peer_stat_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.peer_stat_file)
  return peer_stat_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_peer_stat_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.peer_stat_file)
  clear_has_peer_stat_file();
  return peer_stat_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_peer_stat_file(::std::string* peer_stat_file) {
  if (peer_stat_file != NULL) {
    set_has_peer_stat_file();
  } else {
    clear_has_peer_stat_file();
  }
  peer_stat_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peer_stat_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.peer_stat_file)
}

// optional string download_log_file = 9;
bool AgentConfigure::has_download_log_file() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void AgentConfigure::set_has_download_log_file() {
  _has_bits_[0] |= 0x00000100u;
}
void AgentConfigure::clear_has_download_log_file() {
  _has_bits_[0] &= ~0x00000100u;
}
void AgentConfigure::clear_download_log_file() {
  download_log_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_download_log_file();
}
const ::std::string& AgentConfigure::download_log_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.download_log_file)
  return download_log_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_download_log_file(const ::std::string& value) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.download_log_file)
}
void AgentConfigure::set_download_log_file(const char* value) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.download_log_file)
}
void AgentConfigure::set_download_log_file(const char* value, size_t size) {
  set_has_download_log_file();
  download_log_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.download_log_file)
}
::std::string* AgentConfigure::mutable_download_log_file() {
  set_has_download_log_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.download_log_file)
  return download_log_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_download_log_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.download_log_file)
  clear_has_download_log_file();
  return download_log_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_download_log_file(::std::string* download_log_file) {
  if (download_log_file != NULL) {
    set_has_download_log_file();
  } else {
    clear_has_download_log_file();
  }
  download_log_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), download_log_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.download_log_file)
}

// optional string tracker_conf_file = 10;
bool AgentConfigure::has_tracker_conf_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void AgentConfigure::set_has_tracker_conf_file() {
  _has_bits_[0] |= 0x00000200u;
}
void AgentConfigure::clear_has_tracker_conf_file() {
  _has_bits_[0] &= ~0x00000200u;
}
void AgentConfigure::clear_tracker_conf_file() {
  tracker_conf_file_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracker_conf_file();
}
const ::std::string& AgentConfigure::tracker_conf_file() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.tracker_conf_file)
  return tracker_conf_file_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_tracker_conf_file(const ::std::string& value) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.tracker_conf_file)
}
void AgentConfigure::set_tracker_conf_file(const char* value) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.message.AgentConfigure.tracker_conf_file)
}
void AgentConfigure::set_tracker_conf_file(const char* value, size_t size) {
  set_has_tracker_conf_file();
  tracker_conf_file_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.message.AgentConfigure.tracker_conf_file)
}
::std::string* AgentConfigure::mutable_tracker_conf_file() {
  set_has_tracker_conf_file();
  // @@protoc_insertion_point(field_mutable:bbts.message.AgentConfigure.tracker_conf_file)
  return tracker_conf_file_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* AgentConfigure::release_tracker_conf_file() {
  // @@protoc_insertion_point(field_release:bbts.message.AgentConfigure.tracker_conf_file)
  clear_has_tracker_conf_file();
  return tracker_conf_file_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void AgentConfigure::set_allocated_tracker_conf_file(::std::string* tracker_conf_file) {
  if (tracker_conf_file != NULL) {
    set_has_tracker_conf_file();
  } else {
    clear_has_tracker_conf_file();
  }
  tracker_conf_file_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracker_conf_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.message.AgentConfigure.tracker_conf_file)
}

// optional int32 listen_port = 20;
bool AgentConfigure::has_listen_port() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void AgentConfigure::set_has_listen_port() {
  _has_bits_[0] |= 0x00000400u;
}
void AgentConfigure::clear_has_listen_port() {
  _has_bits_[0] &= ~0x00000400u;
}
void AgentConfigure::clear_listen_port() {
  listen_port_ = 0;
  clear_has_listen_port();
}
::google::protobuf::int32 AgentConfigure::listen_port() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.listen_port)
  return listen_port_;
}
void AgentConfigure::set_listen_port(::google::protobuf::int32 value) {
  set_has_listen_port();
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.listen_port)
}

// optional int32 worker_thread_num = 21;
bool AgentConfigure::has_worker_thread_num() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void AgentConfigure::set_has_worker_thread_num() {
  _has_bits_[0] |= 0x00000800u;
}
void AgentConfigure::clear_has_worker_thread_num() {
  _has_bits_[0] &= ~0x00000800u;
}
void AgentConfigure::clear_worker_thread_num() {
  worker_thread_num_ = 0;
  clear_has_worker_thread_num();
}
::google::protobuf::int32 AgentConfigure::worker_thread_num() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.worker_thread_num)
  return worker_thread_num_;
}
void AgentConfigure::set_worker_thread_num(::google::protobuf::int32 value) {
  set_has_worker_thread_num();
  worker_thread_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.worker_thread_num)
}

// optional int32 db_del_interval = 22;
bool AgentConfigure::has_db_del_interval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void AgentConfigure::set_has_db_del_interval() {
  _has_bits_[0] |= 0x00001000u;
}
void AgentConfigure::clear_has_db_del_interval() {
  _has_bits_[0] &= ~0x00001000u;
}
void AgentConfigure::clear_db_del_interval() {
  db_del_interval_ = 0;
  clear_has_db_del_interval();
}
::google::protobuf::int32 AgentConfigure::db_del_interval() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.db_del_interval)
  return db_del_interval_;
}
void AgentConfigure::set_db_del_interval(::google::protobuf::int32 value) {
  set_has_db_del_interval();
  db_del_interval_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.db_del_interval)
}

// optional int32 active_seeds = 23;
bool AgentConfigure::has_active_seeds() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void AgentConfigure::set_has_active_seeds() {
  _has_bits_[0] |= 0x00002000u;
}
void AgentConfigure::clear_has_active_seeds() {
  _has_bits_[0] &= ~0x00002000u;
}
void AgentConfigure::clear_active_seeds() {
  active_seeds_ = 0;
  clear_has_active_seeds();
}
::google::protobuf::int32 AgentConfigure::active_seeds() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.active_seeds)
  return active_seeds_;
}
void AgentConfigure::set_active_seeds(::google::protobuf::int32 value) {
  set_has_active_seeds();
  active_seeds_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.active_seeds)
}

// optional int32 max_total_meta_num = 24;
bool AgentConfigure::has_max_total_meta_num() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void AgentConfigure::set_has_max_total_meta_num() {
  _has_bits_[0] |= 0x00004000u;
}
void AgentConfigure::clear_has_max_total_meta_num() {
  _has_bits_[0] &= ~0x00004000u;
}
void AgentConfigure::clear_max_total_meta_num() {
  max_total_meta_num_ = 0;
  clear_has_max_total_meta_num();
}
::google::protobuf::int32 AgentConfigure::max_total_meta_num() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_total_meta_num)
  return max_total_meta_num_;
}
void AgentConfigure::set_max_total_meta_num(::google::protobuf::int32 value) {
  set_has_max_total_meta_num();
  max_total_meta_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_total_meta_num)
}

// optional int32 max_total_meta_size = 25;
bool AgentConfigure::has_max_total_meta_size() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void AgentConfigure::set_has_max_total_meta_size() {
  _has_bits_[0] |= 0x00008000u;
}
void AgentConfigure::clear_has_max_total_meta_size() {
  _has_bits_[0] &= ~0x00008000u;
}
void AgentConfigure::clear_max_total_meta_size() {
  max_total_meta_size_ = 0;
  clear_has_max_total_meta_size();
}
::google::protobuf::int32 AgentConfigure::max_total_meta_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_total_meta_size)
  return max_total_meta_size_;
}
void AgentConfigure::set_max_total_meta_size(::google::protobuf::int32 value) {
  set_has_max_total_meta_size();
  max_total_meta_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_total_meta_size)
}

// optional int32 upload_limit = 51;
bool AgentConfigure::has_upload_limit() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void AgentConfigure::set_has_upload_limit() {
  _has_bits_[0] |= 0x00010000u;
}
void AgentConfigure::clear_has_upload_limit() {
  _has_bits_[0] &= ~0x00010000u;
}
void AgentConfigure::clear_upload_limit() {
  upload_limit_ = 0;
  clear_has_upload_limit();
}
::google::protobuf::int32 AgentConfigure::upload_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.upload_limit)
  return upload_limit_;
}
void AgentConfigure::set_upload_limit(::google::protobuf::int32 value) {
  set_has_upload_limit();
  upload_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.upload_limit)
}

// optional int32 download_limit = 52;
bool AgentConfigure::has_download_limit() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void AgentConfigure::set_has_download_limit() {
  _has_bits_[0] |= 0x00020000u;
}
void AgentConfigure::clear_has_download_limit() {
  _has_bits_[0] &= ~0x00020000u;
}
void AgentConfigure::clear_download_limit() {
  download_limit_ = 0;
  clear_has_download_limit();
}
::google::protobuf::int32 AgentConfigure::download_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.download_limit)
  return download_limit_;
}
void AgentConfigure::set_download_limit(::google::protobuf::int32 value) {
  set_has_download_limit();
  download_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.download_limit)
}

// optional int32 connection_limit = 53;
bool AgentConfigure::has_connection_limit() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void AgentConfigure::set_has_connection_limit() {
  _has_bits_[0] |= 0x00040000u;
}
void AgentConfigure::clear_has_connection_limit() {
  _has_bits_[0] &= ~0x00040000u;
}
void AgentConfigure::clear_connection_limit() {
  connection_limit_ = 0;
  clear_has_connection_limit();
}
::google::protobuf::int32 AgentConfigure::connection_limit() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.connection_limit)
  return connection_limit_;
}
void AgentConfigure::set_connection_limit(::google::protobuf::int32 value) {
  set_has_connection_limit();
  connection_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.connection_limit)
}

// optional int32 peers_num_want = 54;
bool AgentConfigure::has_peers_num_want() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void AgentConfigure::set_has_peers_num_want() {
  _has_bits_[0] |= 0x00080000u;
}
void AgentConfigure::clear_has_peers_num_want() {
  _has_bits_[0] &= ~0x00080000u;
}
void AgentConfigure::clear_peers_num_want() {
  peers_num_want_ = 0;
  clear_has_peers_num_want();
}
::google::protobuf::int32 AgentConfigure::peers_num_want() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.peers_num_want)
  return peers_num_want_;
}
void AgentConfigure::set_peers_num_want(::google::protobuf::int32 value) {
  set_has_peers_num_want();
  peers_num_want_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.peers_num_want)
}

// optional bool disable_os_cache = 55;
bool AgentConfigure::has_disable_os_cache() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void AgentConfigure::set_has_disable_os_cache() {
  _has_bits_[0] |= 0x00100000u;
}
void AgentConfigure::clear_has_disable_os_cache() {
  _has_bits_[0] &= ~0x00100000u;
}
void AgentConfigure::clear_disable_os_cache() {
  disable_os_cache_ = false;
  clear_has_disable_os_cache();
}
bool AgentConfigure::disable_os_cache() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.disable_os_cache)
  return disable_os_cache_;
}
void AgentConfigure::set_disable_os_cache(bool value) {
  set_has_disable_os_cache();
  disable_os_cache_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.disable_os_cache)
}

// optional int32 cache_size = 56;
bool AgentConfigure::has_cache_size() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void AgentConfigure::set_has_cache_size() {
  _has_bits_[0] |= 0x00200000u;
}
void AgentConfigure::clear_has_cache_size() {
  _has_bits_[0] &= ~0x00200000u;
}
void AgentConfigure::clear_cache_size() {
  cache_size_ = 0;
  clear_has_cache_size();
}
::google::protobuf::int32 AgentConfigure::cache_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.cache_size)
  return cache_size_;
}
void AgentConfigure::set_cache_size(::google::protobuf::int32 value) {
  set_has_cache_size();
  cache_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.cache_size)
}

// optional int32 cache_expiry = 57;
bool AgentConfigure::has_cache_expiry() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void AgentConfigure::set_has_cache_expiry() {
  _has_bits_[0] |= 0x00400000u;
}
void AgentConfigure::clear_has_cache_expiry() {
  _has_bits_[0] &= ~0x00400000u;
}
void AgentConfigure::clear_cache_expiry() {
  cache_expiry_ = 0;
  clear_has_cache_expiry();
}
::google::protobuf::int32 AgentConfigure::cache_expiry() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.cache_expiry)
  return cache_expiry_;
}
void AgentConfigure::set_cache_expiry(::google::protobuf::int32 value) {
  set_has_cache_expiry();
  cache_expiry_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.cache_expiry)
}

// optional int32 file_pool_size = 58;
bool AgentConfigure::has_file_pool_size() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void AgentConfigure::set_has_file_pool_size() {
  _has_bits_[0] |= 0x00800000u;
}
void AgentConfigure::clear_has_file_pool_size() {
  _has_bits_[0] &= ~0x00800000u;
}
void AgentConfigure::clear_file_pool_size() {
  file_pool_size_ = 0;
  clear_has_file_pool_size();
}
::google::protobuf::int32 AgentConfigure::file_pool_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.file_pool_size)
  return file_pool_size_;
}
void AgentConfigure::set_file_pool_size(::google::protobuf::int32 value) {
  set_has_file_pool_size();
  file_pool_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.file_pool_size)
}

// optional int32 max_metadata_size = 59;
bool AgentConfigure::has_max_metadata_size() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void AgentConfigure::set_has_max_metadata_size() {
  _has_bits_[0] |= 0x01000000u;
}
void AgentConfigure::clear_has_max_metadata_size() {
  _has_bits_[0] &= ~0x01000000u;
}
void AgentConfigure::clear_max_metadata_size() {
  max_metadata_size_ = 0;
  clear_has_max_metadata_size();
}
::google::protobuf::int32 AgentConfigure::max_metadata_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_metadata_size)
  return max_metadata_size_;
}
void AgentConfigure::set_max_metadata_size(::google::protobuf::int32 value) {
  set_has_max_metadata_size();
  max_metadata_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_metadata_size)
}

// optional int32 seeding_announce_interval = 60;
bool AgentConfigure::has_seeding_announce_interval() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void AgentConfigure::set_has_seeding_announce_interval() {
  _has_bits_[0] |= 0x02000000u;
}
void AgentConfigure::clear_has_seeding_announce_interval() {
  _has_bits_[0] &= ~0x02000000u;
}
void AgentConfigure::clear_seeding_announce_interval() {
  seeding_announce_interval_ = 0;
  clear_has_seeding_announce_interval();
}
::google::protobuf::int32 AgentConfigure::seeding_announce_interval() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.seeding_announce_interval)
  return seeding_announce_interval_;
}
void AgentConfigure::set_seeding_announce_interval(::google::protobuf::int32 value) {
  set_has_seeding_announce_interval();
  seeding_announce_interval_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.seeding_announce_interval)
}

// optional int32 min_reconnect_time = 61;
bool AgentConfigure::has_min_reconnect_time() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void AgentConfigure::set_has_min_reconnect_time() {
  _has_bits_[0] |= 0x04000000u;
}
void AgentConfigure::clear_has_min_reconnect_time() {
  _has_bits_[0] &= ~0x04000000u;
}
void AgentConfigure::clear_min_reconnect_time() {
  min_reconnect_time_ = 0;
  clear_has_min_reconnect_time();
}
::google::protobuf::int32 AgentConfigure::min_reconnect_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.min_reconnect_time)
  return min_reconnect_time_;
}
void AgentConfigure::set_min_reconnect_time(::google::protobuf::int32 value) {
  set_has_min_reconnect_time();
  min_reconnect_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.min_reconnect_time)
}

// optional int32 peer_connect_timeout = 62;
bool AgentConfigure::has_peer_connect_timeout() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void AgentConfigure::set_has_peer_connect_timeout() {
  _has_bits_[0] |= 0x08000000u;
}
void AgentConfigure::clear_has_peer_connect_timeout() {
  _has_bits_[0] &= ~0x08000000u;
}
void AgentConfigure::clear_peer_connect_timeout() {
  peer_connect_timeout_ = 0;
  clear_has_peer_connect_timeout();
}
::google::protobuf::int32 AgentConfigure::peer_connect_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.peer_connect_timeout)
  return peer_connect_timeout_;
}
void AgentConfigure::set_peer_connect_timeout(::google::protobuf::int32 value) {
  set_has_peer_connect_timeout();
  peer_connect_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.peer_connect_timeout)
}

// optional int32 read_cache_line_size = 63;
bool AgentConfigure::has_read_cache_line_size() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void AgentConfigure::set_has_read_cache_line_size() {
  _has_bits_[0] |= 0x10000000u;
}
void AgentConfigure::clear_has_read_cache_line_size() {
  _has_bits_[0] &= ~0x10000000u;
}
void AgentConfigure::clear_read_cache_line_size() {
  read_cache_line_size_ = 0;
  clear_has_read_cache_line_size();
}
::google::protobuf::int32 AgentConfigure::read_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.read_cache_line_size)
  return read_cache_line_size_;
}
void AgentConfigure::set_read_cache_line_size(::google::protobuf::int32 value) {
  set_has_read_cache_line_size();
  read_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.read_cache_line_size)
}

// optional int32 write_cache_line_size = 64;
bool AgentConfigure::has_write_cache_line_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void AgentConfigure::set_has_write_cache_line_size() {
  _has_bits_[0] |= 0x20000000u;
}
void AgentConfigure::clear_has_write_cache_line_size() {
  _has_bits_[0] &= ~0x20000000u;
}
void AgentConfigure::clear_write_cache_line_size() {
  write_cache_line_size_ = 0;
  clear_has_write_cache_line_size();
}
::google::protobuf::int32 AgentConfigure::write_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.write_cache_line_size)
  return write_cache_line_size_;
}
void AgentConfigure::set_write_cache_line_size(::google::protobuf::int32 value) {
  set_has_write_cache_line_size();
  write_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.write_cache_line_size)
}

// optional bool lock_disk_cache = 65;
bool AgentConfigure::has_lock_disk_cache() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void AgentConfigure::set_has_lock_disk_cache() {
  _has_bits_[0] |= 0x40000000u;
}
void AgentConfigure::clear_has_lock_disk_cache() {
  _has_bits_[0] &= ~0x40000000u;
}
void AgentConfigure::clear_lock_disk_cache() {
  lock_disk_cache_ = false;
  clear_has_lock_disk_cache();
}
bool AgentConfigure::lock_disk_cache() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.lock_disk_cache)
  return lock_disk_cache_;
}
void AgentConfigure::set_lock_disk_cache(bool value) {
  set_has_lock_disk_cache();
  lock_disk_cache_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.lock_disk_cache)
}

// optional bool suggest_mode = 66;
bool AgentConfigure::has_suggest_mode() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void AgentConfigure::set_has_suggest_mode() {
  _has_bits_[0] |= 0x80000000u;
}
void AgentConfigure::clear_has_suggest_mode() {
  _has_bits_[0] &= ~0x80000000u;
}
void AgentConfigure::clear_suggest_mode() {
  suggest_mode_ = false;
  clear_has_suggest_mode();
}
bool AgentConfigure::suggest_mode() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.suggest_mode)
  return suggest_mode_;
}
void AgentConfigure::set_suggest_mode(bool value) {
  set_has_suggest_mode();
  suggest_mode_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.suggest_mode)
}

// optional int32 max_queued_disk_bytes = 67;
bool AgentConfigure::has_max_queued_disk_bytes() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void AgentConfigure::set_has_max_queued_disk_bytes() {
  _has_bits_[1] |= 0x00000001u;
}
void AgentConfigure::clear_has_max_queued_disk_bytes() {
  _has_bits_[1] &= ~0x00000001u;
}
void AgentConfigure::clear_max_queued_disk_bytes() {
  max_queued_disk_bytes_ = 0;
  clear_has_max_queued_disk_bytes();
}
::google::protobuf::int32 AgentConfigure::max_queued_disk_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_queued_disk_bytes)
  return max_queued_disk_bytes_;
}
void AgentConfigure::set_max_queued_disk_bytes(::google::protobuf::int32 value) {
  set_has_max_queued_disk_bytes();
  max_queued_disk_bytes_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_queued_disk_bytes)
}

// optional int32 max_out_request_queue = 68;
bool AgentConfigure::has_max_out_request_queue() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void AgentConfigure::set_has_max_out_request_queue() {
  _has_bits_[1] |= 0x00000002u;
}
void AgentConfigure::clear_has_max_out_request_queue() {
  _has_bits_[1] &= ~0x00000002u;
}
void AgentConfigure::clear_max_out_request_queue() {
  max_out_request_queue_ = 0;
  clear_has_max_out_request_queue();
}
::google::protobuf::int32 AgentConfigure::max_out_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_out_request_queue)
  return max_out_request_queue_;
}
void AgentConfigure::set_max_out_request_queue(::google::protobuf::int32 value) {
  set_has_max_out_request_queue();
  max_out_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_out_request_queue)
}

// optional int32 max_allowed_in_request_queue = 69;
bool AgentConfigure::has_max_allowed_in_request_queue() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void AgentConfigure::set_has_max_allowed_in_request_queue() {
  _has_bits_[1] |= 0x00000004u;
}
void AgentConfigure::clear_has_max_allowed_in_request_queue() {
  _has_bits_[1] &= ~0x00000004u;
}
void AgentConfigure::clear_max_allowed_in_request_queue() {
  max_allowed_in_request_queue_ = 0;
  clear_has_max_allowed_in_request_queue();
}
::google::protobuf::int32 AgentConfigure::max_allowed_in_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.max_allowed_in_request_queue)
  return max_allowed_in_request_queue_;
}
void AgentConfigure::set_max_allowed_in_request_queue(::google::protobuf::int32 value) {
  set_has_max_allowed_in_request_queue();
  max_allowed_in_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.max_allowed_in_request_queue)
}

// optional int32 whole_pieces_threshold = 70;
bool AgentConfigure::has_whole_pieces_threshold() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void AgentConfigure::set_has_whole_pieces_threshold() {
  _has_bits_[1] |= 0x00000008u;
}
void AgentConfigure::clear_has_whole_pieces_threshold() {
  _has_bits_[1] &= ~0x00000008u;
}
void AgentConfigure::clear_whole_pieces_threshold() {
  whole_pieces_threshold_ = 0;
  clear_has_whole_pieces_threshold();
}
::google::protobuf::int32 AgentConfigure::whole_pieces_threshold() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.whole_pieces_threshold)
  return whole_pieces_threshold_;
}
void AgentConfigure::set_whole_pieces_threshold(::google::protobuf::int32 value) {
  set_has_whole_pieces_threshold();
  whole_pieces_threshold_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.whole_pieces_threshold)
}

// optional int32 request_queue_time = 71;
bool AgentConfigure::has_request_queue_time() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void AgentConfigure::set_has_request_queue_time() {
  _has_bits_[1] |= 0x00000010u;
}
void AgentConfigure::clear_has_request_queue_time() {
  _has_bits_[1] &= ~0x00000010u;
}
void AgentConfigure::clear_request_queue_time() {
  request_queue_time_ = 0;
  clear_has_request_queue_time();
}
::google::protobuf::int32 AgentConfigure::request_queue_time() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.request_queue_time)
  return request_queue_time_;
}
void AgentConfigure::set_request_queue_time(::google::protobuf::int32 value) {
  set_has_request_queue_time();
  request_queue_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.request_queue_time)
}

// optional int32 send_buffer_low_watermark = 72;
bool AgentConfigure::has_send_buffer_low_watermark() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void AgentConfigure::set_has_send_buffer_low_watermark() {
  _has_bits_[1] |= 0x00000020u;
}
void AgentConfigure::clear_has_send_buffer_low_watermark() {
  _has_bits_[1] &= ~0x00000020u;
}
void AgentConfigure::clear_send_buffer_low_watermark() {
  send_buffer_low_watermark_ = 0;
  clear_has_send_buffer_low_watermark();
}
::google::protobuf::int32 AgentConfigure::send_buffer_low_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.send_buffer_low_watermark)
  return send_buffer_low_watermark_;
}
void AgentConfigure::set_send_buffer_low_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_low_watermark();
  send_buffer_low_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.send_buffer_low_watermark)
}

// optional int32 send_buffer_watermark = 73;
bool AgentConfigure::has_send_buffer_watermark() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void AgentConfigure::set_has_send_buffer_watermark() {
  _has_bits_[1] |= 0x00000040u;
}
void AgentConfigure::clear_has_send_buffer_watermark() {
  _has_bits_[1] &= ~0x00000040u;
}
void AgentConfigure::clear_send_buffer_watermark() {
  send_buffer_watermark_ = 0;
  clear_has_send_buffer_watermark();
}
::google::protobuf::int32 AgentConfigure::send_buffer_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.send_buffer_watermark)
  return send_buffer_watermark_;
}
void AgentConfigure::set_send_buffer_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_watermark();
  send_buffer_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.send_buffer_watermark)
}

// optional int32 send_socket_buffer_size = 74;
bool AgentConfigure::has_send_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void AgentConfigure::set_has_send_socket_buffer_size() {
  _has_bits_[1] |= 0x00000080u;
}
void AgentConfigure::clear_has_send_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000080u;
}
void AgentConfigure::clear_send_socket_buffer_size() {
  send_socket_buffer_size_ = 0;
  clear_has_send_socket_buffer_size();
}
::google::protobuf::int32 AgentConfigure::send_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.send_socket_buffer_size)
  return send_socket_buffer_size_;
}
void AgentConfigure::set_send_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_send_socket_buffer_size();
  send_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.send_socket_buffer_size)
}

// optional int32 recv_socket_buffer_size = 75;
bool AgentConfigure::has_recv_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void AgentConfigure::set_has_recv_socket_buffer_size() {
  _has_bits_[1] |= 0x00000100u;
}
void AgentConfigure::clear_has_recv_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000100u;
}
void AgentConfigure::clear_recv_socket_buffer_size() {
  recv_socket_buffer_size_ = 0;
  clear_has_recv_socket_buffer_size();
}
::google::protobuf::int32 AgentConfigure::recv_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.message.AgentConfigure.recv_socket_buffer_size)
  return recv_socket_buffer_size_;
}
void AgentConfigure::set_recv_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_recv_socket_buffer_size();
  recv_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.message.AgentConfigure.recv_socket_buffer_size)
}

inline const AgentConfigure* AgentConfigure::internal_default_instance() {
  return &AgentConfigure_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace message
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
