// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Announce.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::bbts::tracker;

class AnnounceHandler : virtual public AnnounceIf {
 public:
  AnnounceHandler() {
    // Your initialization goes here
  }

  void announce( ::bbts::tracker::AnnounceResponse& _return, const  ::bbts::tracker::AnnounceRequest& announce_request) {
    // Your implementation goes here
    printf("announce\n");
  }

  void StopByInfohash( ::bbts::tracker::BaseResponse& _return, const  ::bbts::tracker::ControlByInfohashRequest& request) {
    // Your implementation goes here
    printf("StopByInfohash\n");
  }

  void ResumeByInfohash( ::bbts::tracker::BaseResponse& _return, const  ::bbts::tracker::ControlByInfohashRequest& request) {
    // Your implementation goes here
    printf("ResumeByInfohash\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<AnnounceHandler> handler(new AnnounceHandler());
  shared_ptr<TProcessor> processor(new AnnounceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

