/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "inner_types.h"

#include <algorithm>

namespace bbts { namespace tracker {

const char* StoredPeerInfo::ascii_fingerprint = "578FAFAE033AC49C3C188070A34F35BD";
const uint8_t StoredPeerInfo::binary_fingerprint[16] = {0x57,0x8F,0xAF,0xAE,0x03,0x3A,0xC4,0x9C,0x3C,0x18,0x80,0x70,0xA3,0x4F,0x35,0xBD};

uint32_t StoredPeerInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->info_hash);
          this->__isset.info_hash = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->peer_id);
          this->__isset.peer_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ip);
          this->__isset.ip = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->uploaded);
          this->__isset.uploaded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->downloaded);
          this->__isset.downloaded = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->left);
          this->__isset.left = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->status = ( ::bbts::tracker::Status::type)ecast0;
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->want_number);
          this->__isset.want_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->expire_time);
          this->__isset.expire_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->timestamp_start);
          this->__isset.timestamp_start = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_seed);
          this->__isset.is_seed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->tracker_id);
          this->__isset.tracker_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->idc);
          this->__isset.idc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t StoredPeerInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("StoredPeerInfo");

  if (this->__isset.info_hash) {
    xfer += oprot->writeFieldBegin("info_hash", ::apache::thrift::protocol::T_STRING, 1);
    xfer += oprot->writeString(this->info_hash);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.peer_id) {
    xfer += oprot->writeFieldBegin("peer_id", ::apache::thrift::protocol::T_STRING, 2);
    xfer += oprot->writeString(this->peer_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.ip) {
    xfer += oprot->writeFieldBegin("ip", ::apache::thrift::protocol::T_STRING, 3);
    xfer += oprot->writeString(this->ip);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.port) {
    xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_I32, 4);
    xfer += oprot->writeI32(this->port);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.uploaded) {
    xfer += oprot->writeFieldBegin("uploaded", ::apache::thrift::protocol::T_I64, 5);
    xfer += oprot->writeI64(this->uploaded);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.downloaded) {
    xfer += oprot->writeFieldBegin("downloaded", ::apache::thrift::protocol::T_I64, 6);
    xfer += oprot->writeI64(this->downloaded);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.left) {
    xfer += oprot->writeFieldBegin("left", ::apache::thrift::protocol::T_I64, 7);
    xfer += oprot->writeI64(this->left);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.status) {
    xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I32, 8);
    xfer += oprot->writeI32((int32_t)this->status);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.want_number) {
    xfer += oprot->writeFieldBegin("want_number", ::apache::thrift::protocol::T_I32, 9);
    xfer += oprot->writeI32(this->want_number);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.expire_time) {
    xfer += oprot->writeFieldBegin("expire_time", ::apache::thrift::protocol::T_I64, 10);
    xfer += oprot->writeI64(this->expire_time);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.timestamp_start) {
    xfer += oprot->writeFieldBegin("timestamp_start", ::apache::thrift::protocol::T_I64, 11);
    xfer += oprot->writeI64(this->timestamp_start);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.is_seed) {
    xfer += oprot->writeFieldBegin("is_seed", ::apache::thrift::protocol::T_BOOL, 12);
    xfer += oprot->writeBool(this->is_seed);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.tracker_id) {
    xfer += oprot->writeFieldBegin("tracker_id", ::apache::thrift::protocol::T_STRING, 13);
    xfer += oprot->writeString(this->tracker_id);
    xfer += oprot->writeFieldEnd();
  }
  if (this->__isset.idc) {
    xfer += oprot->writeFieldBegin("idc", ::apache::thrift::protocol::T_STRING, 14);
    xfer += oprot->writeString(this->idc);
    xfer += oprot->writeFieldEnd();
  }
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(StoredPeerInfo &a, StoredPeerInfo &b) {
  using ::std::swap;
  swap(a.info_hash, b.info_hash);
  swap(a.peer_id, b.peer_id);
  swap(a.ip, b.ip);
  swap(a.port, b.port);
  swap(a.uploaded, b.uploaded);
  swap(a.downloaded, b.downloaded);
  swap(a.left, b.left);
  swap(a.status, b.status);
  swap(a.want_number, b.want_number);
  swap(a.expire_time, b.expire_time);
  swap(a.timestamp_start, b.timestamp_start);
  swap(a.is_seed, b.is_seed);
  swap(a.tracker_id, b.tracker_id);
  swap(a.idc, b.idc);
  swap(a.__isset, b.__isset);
}

}} // namespace
