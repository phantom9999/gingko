// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GroupConf.proto

#ifndef PROTOBUF_GroupConf_2eproto__INCLUDED
#define PROTOBUF_GroupConf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bbts {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_GroupConf_2eproto();
void protobuf_InitDefaults_GroupConf_2eproto();
void protobuf_AssignDesc_GroupConf_2eproto();
void protobuf_ShutdownFile_GroupConf_2eproto();

class GroupConfig;

// ===================================================================

class GroupConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.GroupConfig) */ {
 public:
  GroupConfig();
  virtual ~GroupConfig();

  GroupConfig(const GroupConfig& from);

  inline GroupConfig& operator=(const GroupConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GroupConfig& default_instance();

  static const GroupConfig* internal_default_instance();

  void Swap(GroupConfig* other);

  // implements Message ----------------------------------------------

  inline GroupConfig* New() const { return New(NULL); }

  GroupConfig* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GroupConfig& from);
  void MergeFrom(const GroupConfig& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GroupConfig* other);
  void UnsafeMergeFrom(const GroupConfig& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 timeout = 1 [default = -1];
  bool has_timeout() const;
  void clear_timeout();
  static const int kTimeoutFieldNumber = 1;
  ::google::protobuf::int32 timeout() const;
  void set_timeout(::google::protobuf::int32 value);

  // required int32 upload_rate_limit = 2 [default = 100];
  bool has_upload_rate_limit() const;
  void clear_upload_rate_limit();
  static const int kUploadRateLimitFieldNumber = 2;
  ::google::protobuf::int32 upload_rate_limit() const;
  void set_upload_rate_limit(::google::protobuf::int32 value);

  // required int32 download_rate_limit = 3 [default = 100];
  bool has_download_rate_limit() const;
  void clear_download_rate_limit();
  static const int kDownloadRateLimitFieldNumber = 3;
  ::google::protobuf::int32 download_rate_limit() const;
  void set_download_rate_limit(::google::protobuf::int32 value);

  // required int32 connection_limit = 4 [default = 8000];
  bool has_connection_limit() const;
  void clear_connection_limit();
  static const int kConnectionLimitFieldNumber = 4;
  ::google::protobuf::int32 connection_limit() const;
  void set_connection_limit(::google::protobuf::int32 value);

  // optional int32 finished_timeout = 5 [default = 3600];
  bool has_finished_timeout() const;
  void clear_finished_timeout();
  static const int kFinishedTimeoutFieldNumber = 5;
  ::google::protobuf::int32 finished_timeout() const;
  void set_finished_timeout(::google::protobuf::int32 value);

  // optional int32 max_cluster_thread_num = 6 [default = 10];
  bool has_max_cluster_thread_num() const;
  void clear_max_cluster_thread_num();
  static const int kMaxClusterThreadNumFieldNumber = 6;
  ::google::protobuf::int32 max_cluster_thread_num() const;
  void set_max_cluster_thread_num(::google::protobuf::int32 value);

  // optional bool is_allow_all_add = 7 [default = false];
  bool has_is_allow_all_add() const;
  void clear_is_allow_all_add();
  static const int kIsAllowAllAddFieldNumber = 7;
  bool is_allow_all_add() const;
  void set_is_allow_all_add(bool value);

  // optional string absolute_path = 11;
  bool has_absolute_path() const;
  void clear_absolute_path();
  static const int kAbsolutePathFieldNumber = 11;
  const ::std::string& absolute_path() const;
  void set_absolute_path(const ::std::string& value);
  void set_absolute_path(const char* value);
  void set_absolute_path(const char* value, size_t size);
  ::std::string* mutable_absolute_path();
  ::std::string* release_absolute_path();
  void set_allocated_absolute_path(::std::string* absolute_path);

  // optional string group_data_path = 12 [default = "/bbts-group-data"];
  bool has_group_data_path() const;
  void clear_group_data_path();
  static const int kGroupDataPathFieldNumber = 12;
  const ::std::string& group_data_path() const;
  void set_group_data_path(const ::std::string& value);
  void set_group_data_path(const char* value);
  void set_group_data_path(const char* value, size_t size);
  ::std::string* mutable_group_data_path();
  ::std::string* release_group_data_path();
  void set_allocated_group_data_path(::std::string* group_data_path);

  // optional string log_file = 13 [default = "bbts-group.log"];
  bool has_log_file() const;
  void clear_log_file();
  static const int kLogFileFieldNumber = 13;
  const ::std::string& log_file() const;
  void set_log_file(const ::std::string& value);
  void set_log_file(const char* value);
  void set_log_file(const char* value, size_t size);
  ::std::string* mutable_log_file();
  ::std::string* release_log_file();
  void set_allocated_log_file(::std::string* log_file);

  // optional string resume_dir = 14 [default = "bbts-group.resume"];
  bool has_resume_dir() const;
  void clear_resume_dir();
  static const int kResumeDirFieldNumber = 14;
  const ::std::string& resume_dir() const;
  void set_resume_dir(const ::std::string& value);
  void set_resume_dir(const char* value);
  void set_resume_dir(const char* value, size_t size);
  ::std::string* mutable_resume_dir();
  ::std::string* release_resume_dir();
  void set_allocated_resume_dir(::std::string* resume_dir);

  // optional string lock_file = 15 [default = "bbts-group.lock"];
  bool has_lock_file() const;
  void clear_lock_file();
  static const int kLockFileFieldNumber = 15;
  const ::std::string& lock_file() const;
  void set_lock_file(const ::std::string& value);
  void set_lock_file(const char* value);
  void set_lock_file(const char* value, size_t size);
  ::std::string* mutable_lock_file();
  ::std::string* release_lock_file();
  void set_allocated_lock_file(::std::string* lock_file);

  // optional string unix_socket = 16 [default = "bbts-group.sock"];
  bool has_unix_socket() const;
  void clear_unix_socket();
  static const int kUnixSocketFieldNumber = 16;
  const ::std::string& unix_socket() const;
  void set_unix_socket(const ::std::string& value);
  void set_unix_socket(const char* value);
  void set_unix_socket(const char* value, size_t size);
  ::std::string* mutable_unix_socket();
  ::std::string* release_unix_socket();
  void set_allocated_unix_socket(::std::string* unix_socket);

  // optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
  bool has_peer_stat_log_file() const;
  void clear_peer_stat_log_file();
  static const int kPeerStatLogFileFieldNumber = 17;
  const ::std::string& peer_stat_log_file() const;
  void set_peer_stat_log_file(const ::std::string& value);
  void set_peer_stat_log_file(const char* value);
  void set_peer_stat_log_file(const char* value, size_t size);
  ::std::string* mutable_peer_stat_log_file();
  ::std::string* release_peer_stat_log_file();
  void set_allocated_peer_stat_log_file(::std::string* peer_stat_log_file);

  // optional int32 max_metadata_size = 31 [default = 50];
  bool has_max_metadata_size() const;
  void clear_max_metadata_size();
  static const int kMaxMetadataSizeFieldNumber = 31;
  ::google::protobuf::int32 max_metadata_size() const;
  void set_max_metadata_size(::google::protobuf::int32 value);

  // optional int32 peers_num_want = 32 [default = 25];
  bool has_peers_num_want() const;
  void clear_peers_num_want();
  static const int kPeersNumWantFieldNumber = 32;
  ::google::protobuf::int32 peers_num_want() const;
  void set_peers_num_want(::google::protobuf::int32 value);

  // optional bool disk_io_read_mode = 33 [default = true];
  bool has_disk_io_read_mode() const;
  void clear_disk_io_read_mode();
  static const int kDiskIoReadModeFieldNumber = 33;
  bool disk_io_read_mode() const;
  void set_disk_io_read_mode(bool value);

  // optional bool disk_io_write_mode = 34 [default = true];
  bool has_disk_io_write_mode() const;
  void clear_disk_io_write_mode();
  static const int kDiskIoWriteModeFieldNumber = 34;
  bool disk_io_write_mode() const;
  void set_disk_io_write_mode(bool value);

  // optional int32 seed_announce_interval = 35 [default = 1800];
  bool has_seed_announce_interval() const;
  void clear_seed_announce_interval();
  static const int kSeedAnnounceIntervalFieldNumber = 35;
  ::google::protobuf::int32 seed_announce_interval() const;
  void set_seed_announce_interval(::google::protobuf::int32 value);

  // optional int32 min_reconnect_time = 36 [default = 1];
  bool has_min_reconnect_time() const;
  void clear_min_reconnect_time();
  static const int kMinReconnectTimeFieldNumber = 36;
  ::google::protobuf::int32 min_reconnect_time() const;
  void set_min_reconnect_time(::google::protobuf::int32 value);

  // optional int32 max_queued_disk_bytes = 37 [default = 20];
  bool has_max_queued_disk_bytes() const;
  void clear_max_queued_disk_bytes();
  static const int kMaxQueuedDiskBytesFieldNumber = 37;
  ::google::protobuf::int32 max_queued_disk_bytes() const;
  void set_max_queued_disk_bytes(::google::protobuf::int32 value);

  // optional int32 max_out_request_queue = 38 [default = 1500];
  bool has_max_out_request_queue() const;
  void clear_max_out_request_queue();
  static const int kMaxOutRequestQueueFieldNumber = 38;
  ::google::protobuf::int32 max_out_request_queue() const;
  void set_max_out_request_queue(::google::protobuf::int32 value);

  // optional int32 max_allowed_in_request_queue = 39 [default = 2000];
  bool has_max_allowed_in_request_queue() const;
  void clear_max_allowed_in_request_queue();
  static const int kMaxAllowedInRequestQueueFieldNumber = 39;
  ::google::protobuf::int32 max_allowed_in_request_queue() const;
  void set_max_allowed_in_request_queue(::google::protobuf::int32 value);

  // optional int32 whole_pieces_threshold = 40 [default = 20];
  bool has_whole_pieces_threshold() const;
  void clear_whole_pieces_threshold();
  static const int kWholePiecesThresholdFieldNumber = 40;
  ::google::protobuf::int32 whole_pieces_threshold() const;
  void set_whole_pieces_threshold(::google::protobuf::int32 value);

  // optional int32 request_queue_time = 41 [default = 3];
  bool has_request_queue_time() const;
  void clear_request_queue_time();
  static const int kRequestQueueTimeFieldNumber = 41;
  ::google::protobuf::int32 request_queue_time() const;
  void set_request_queue_time(::google::protobuf::int32 value);

  // optional int32 cache_size = 42 [default = 128];
  bool has_cache_size() const;
  void clear_cache_size();
  static const int kCacheSizeFieldNumber = 42;
  ::google::protobuf::int32 cache_size() const;
  void set_cache_size(::google::protobuf::int32 value);

  // optional int32 cache_expiry = 43 [default = 300];
  bool has_cache_expiry() const;
  void clear_cache_expiry();
  static const int kCacheExpiryFieldNumber = 43;
  ::google::protobuf::int32 cache_expiry() const;
  void set_cache_expiry(::google::protobuf::int32 value);

  // optional int32 read_cache_line_size = 44 [default = 32];
  bool has_read_cache_line_size() const;
  void clear_read_cache_line_size();
  static const int kReadCacheLineSizeFieldNumber = 44;
  ::google::protobuf::int32 read_cache_line_size() const;
  void set_read_cache_line_size(::google::protobuf::int32 value);

  // optional int32 write_cache_line_size = 45 [default = 32];
  bool has_write_cache_line_size() const;
  void clear_write_cache_line_size();
  static const int kWriteCacheLineSizeFieldNumber = 45;
  ::google::protobuf::int32 write_cache_line_size() const;
  void set_write_cache_line_size(::google::protobuf::int32 value);

  // optional int32 file_pool_size = 46 [default = 500];
  bool has_file_pool_size() const;
  void clear_file_pool_size();
  static const int kFilePoolSizeFieldNumber = 46;
  ::google::protobuf::int32 file_pool_size() const;
  void set_file_pool_size(::google::protobuf::int32 value);

  // optional int32 send_buffer_watermark = 47 [default = 10];
  bool has_send_buffer_watermark() const;
  void clear_send_buffer_watermark();
  static const int kSendBufferWatermarkFieldNumber = 47;
  ::google::protobuf::int32 send_buffer_watermark() const;
  void set_send_buffer_watermark(::google::protobuf::int32 value);

  // optional int32 send_buffer_low_watermark = 48 [default = 1024];
  bool has_send_buffer_low_watermark() const;
  void clear_send_buffer_low_watermark();
  static const int kSendBufferLowWatermarkFieldNumber = 48;
  ::google::protobuf::int32 send_buffer_low_watermark() const;
  void set_send_buffer_low_watermark(::google::protobuf::int32 value);

  // optional int32 send_socket_buffer_size = 49 [default = 2048];
  bool has_send_socket_buffer_size() const;
  void clear_send_socket_buffer_size();
  static const int kSendSocketBufferSizeFieldNumber = 49;
  ::google::protobuf::int32 send_socket_buffer_size() const;
  void set_send_socket_buffer_size(::google::protobuf::int32 value);

  // optional int32 recv_socket_buffer_size = 50 [default = 2048];
  bool has_recv_socket_buffer_size() const;
  void clear_recv_socket_buffer_size();
  static const int kRecvSocketBufferSizeFieldNumber = 50;
  ::google::protobuf::int32 recv_socket_buffer_size() const;
  void set_recv_socket_buffer_size(::google::protobuf::int32 value);

  // optional int32 active_seeds = 51 [default = 32000];
  bool has_active_seeds() const;
  void clear_active_seeds();
  static const int kActiveSeedsFieldNumber = 51;
  ::google::protobuf::int32 active_seeds() const;
  void set_active_seeds(::google::protobuf::int32 value);

  // optional int32 active_limit = 52 [default = 32000];
  bool has_active_limit() const;
  void clear_active_limit();
  static const int kActiveLimitFieldNumber = 52;
  ::google::protobuf::int32 active_limit() const;
  void set_active_limit(::google::protobuf::int32 value);

  // optional int32 active_downloads = 53 [default = 32000];
  bool has_active_downloads() const;
  void clear_active_downloads();
  static const int kActiveDownloadsFieldNumber = 53;
  ::google::protobuf::int32 active_downloads() const;
  void set_active_downloads(::google::protobuf::int32 value);

  // optional bool suggest_mode = 54 [default = true];
  bool has_suggest_mode() const;
  void clear_suggest_mode();
  static const int kSuggestModeFieldNumber = 54;
  bool suggest_mode() const;
  void set_suggest_mode(bool value);

  // optional int32 listen_port = 55 [default = 18000];
  bool has_listen_port() const;
  void clear_listen_port();
  static const int kListenPortFieldNumber = 55;
  ::google::protobuf::int32 listen_port() const;
  void set_listen_port(::google::protobuf::int32 value);

  // optional int32 peer_connection_timeout = 56 [default = 3];
  bool has_peer_connection_timeout() const;
  void clear_peer_connection_timeout();
  static const int kPeerConnectionTimeoutFieldNumber = 56;
  ::google::protobuf::int32 peer_connection_timeout() const;
  void set_peer_connection_timeout(::google::protobuf::int32 value);

  // optional bool disable_os_cache = 57 [default = false];
  bool has_disable_os_cache() const;
  void clear_disable_os_cache();
  static const int kDisableOsCacheFieldNumber = 57;
  bool disable_os_cache() const;
  void set_disable_os_cache(bool value);

  // @@protoc_insertion_point(class_scope:bbts.GroupConfig)
 private:
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_upload_rate_limit();
  inline void clear_has_upload_rate_limit();
  inline void set_has_download_rate_limit();
  inline void clear_has_download_rate_limit();
  inline void set_has_connection_limit();
  inline void clear_has_connection_limit();
  inline void set_has_finished_timeout();
  inline void clear_has_finished_timeout();
  inline void set_has_max_cluster_thread_num();
  inline void clear_has_max_cluster_thread_num();
  inline void set_has_is_allow_all_add();
  inline void clear_has_is_allow_all_add();
  inline void set_has_absolute_path();
  inline void clear_has_absolute_path();
  inline void set_has_group_data_path();
  inline void clear_has_group_data_path();
  inline void set_has_log_file();
  inline void clear_has_log_file();
  inline void set_has_resume_dir();
  inline void clear_has_resume_dir();
  inline void set_has_lock_file();
  inline void clear_has_lock_file();
  inline void set_has_unix_socket();
  inline void clear_has_unix_socket();
  inline void set_has_peer_stat_log_file();
  inline void clear_has_peer_stat_log_file();
  inline void set_has_max_metadata_size();
  inline void clear_has_max_metadata_size();
  inline void set_has_peers_num_want();
  inline void clear_has_peers_num_want();
  inline void set_has_disk_io_read_mode();
  inline void clear_has_disk_io_read_mode();
  inline void set_has_disk_io_write_mode();
  inline void clear_has_disk_io_write_mode();
  inline void set_has_seed_announce_interval();
  inline void clear_has_seed_announce_interval();
  inline void set_has_min_reconnect_time();
  inline void clear_has_min_reconnect_time();
  inline void set_has_max_queued_disk_bytes();
  inline void clear_has_max_queued_disk_bytes();
  inline void set_has_max_out_request_queue();
  inline void clear_has_max_out_request_queue();
  inline void set_has_max_allowed_in_request_queue();
  inline void clear_has_max_allowed_in_request_queue();
  inline void set_has_whole_pieces_threshold();
  inline void clear_has_whole_pieces_threshold();
  inline void set_has_request_queue_time();
  inline void clear_has_request_queue_time();
  inline void set_has_cache_size();
  inline void clear_has_cache_size();
  inline void set_has_cache_expiry();
  inline void clear_has_cache_expiry();
  inline void set_has_read_cache_line_size();
  inline void clear_has_read_cache_line_size();
  inline void set_has_write_cache_line_size();
  inline void clear_has_write_cache_line_size();
  inline void set_has_file_pool_size();
  inline void clear_has_file_pool_size();
  inline void set_has_send_buffer_watermark();
  inline void clear_has_send_buffer_watermark();
  inline void set_has_send_buffer_low_watermark();
  inline void clear_has_send_buffer_low_watermark();
  inline void set_has_send_socket_buffer_size();
  inline void clear_has_send_socket_buffer_size();
  inline void set_has_recv_socket_buffer_size();
  inline void clear_has_recv_socket_buffer_size();
  inline void set_has_active_seeds();
  inline void clear_has_active_seeds();
  inline void set_has_active_limit();
  inline void clear_has_active_limit();
  inline void set_has_active_downloads();
  inline void clear_has_active_downloads();
  inline void set_has_suggest_mode();
  inline void clear_has_suggest_mode();
  inline void set_has_listen_port();
  inline void clear_has_listen_port();
  inline void set_has_peer_connection_timeout();
  inline void clear_has_peer_connection_timeout();
  inline void set_has_disable_os_cache();
  inline void clear_has_disable_os_cache();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::google::protobuf::internal::ArenaStringPtr absolute_path_;
  static ::std::string* _default_group_data_path_;
  ::google::protobuf::internal::ArenaStringPtr group_data_path_;
  static ::std::string* _default_log_file_;
  ::google::protobuf::internal::ArenaStringPtr log_file_;
  static ::std::string* _default_resume_dir_;
  ::google::protobuf::internal::ArenaStringPtr resume_dir_;
  static ::std::string* _default_lock_file_;
  ::google::protobuf::internal::ArenaStringPtr lock_file_;
  static ::std::string* _default_unix_socket_;
  ::google::protobuf::internal::ArenaStringPtr unix_socket_;
  static ::std::string* _default_peer_stat_log_file_;
  ::google::protobuf::internal::ArenaStringPtr peer_stat_log_file_;
  bool is_allow_all_add_;
  bool disable_os_cache_;
  ::google::protobuf::int32 timeout_;
  ::google::protobuf::int32 upload_rate_limit_;
  ::google::protobuf::int32 download_rate_limit_;
  ::google::protobuf::int32 connection_limit_;
  ::google::protobuf::int32 finished_timeout_;
  ::google::protobuf::int32 max_cluster_thread_num_;
  ::google::protobuf::int32 max_metadata_size_;
  ::google::protobuf::int32 peers_num_want_;
  ::google::protobuf::int32 seed_announce_interval_;
  ::google::protobuf::int32 min_reconnect_time_;
  ::google::protobuf::int32 max_queued_disk_bytes_;
  ::google::protobuf::int32 max_out_request_queue_;
  ::google::protobuf::int32 max_allowed_in_request_queue_;
  ::google::protobuf::int32 whole_pieces_threshold_;
  bool disk_io_read_mode_;
  bool disk_io_write_mode_;
  bool suggest_mode_;
  ::google::protobuf::int32 request_queue_time_;
  ::google::protobuf::int32 cache_size_;
  ::google::protobuf::int32 cache_expiry_;
  ::google::protobuf::int32 read_cache_line_size_;
  ::google::protobuf::int32 write_cache_line_size_;
  ::google::protobuf::int32 file_pool_size_;
  ::google::protobuf::int32 send_buffer_watermark_;
  ::google::protobuf::int32 send_buffer_low_watermark_;
  ::google::protobuf::int32 send_socket_buffer_size_;
  ::google::protobuf::int32 recv_socket_buffer_size_;
  ::google::protobuf::int32 active_seeds_;
  ::google::protobuf::int32 active_limit_;
  ::google::protobuf::int32 active_downloads_;
  ::google::protobuf::int32 listen_port_;
  ::google::protobuf::int32 peer_connection_timeout_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_GroupConf_2eproto_impl();
  friend void  protobuf_AddDesc_GroupConf_2eproto_impl();
  friend void protobuf_AssignDesc_GroupConf_2eproto();
  friend void protobuf_ShutdownFile_GroupConf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<GroupConfig> GroupConfig_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// GroupConfig

// required int32 timeout = 1 [default = -1];
inline bool GroupConfig::has_timeout() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GroupConfig::set_has_timeout() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GroupConfig::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GroupConfig::clear_timeout() {
  timeout_ = -1;
  clear_has_timeout();
}
inline ::google::protobuf::int32 GroupConfig::timeout() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.timeout)
  return timeout_;
}
inline void GroupConfig::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.timeout)
}

// required int32 upload_rate_limit = 2 [default = 100];
inline bool GroupConfig::has_upload_rate_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GroupConfig::set_has_upload_rate_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GroupConfig::clear_has_upload_rate_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GroupConfig::clear_upload_rate_limit() {
  upload_rate_limit_ = 100;
  clear_has_upload_rate_limit();
}
inline ::google::protobuf::int32 GroupConfig::upload_rate_limit() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.upload_rate_limit)
  return upload_rate_limit_;
}
inline void GroupConfig::set_upload_rate_limit(::google::protobuf::int32 value) {
  set_has_upload_rate_limit();
  upload_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.upload_rate_limit)
}

// required int32 download_rate_limit = 3 [default = 100];
inline bool GroupConfig::has_download_rate_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GroupConfig::set_has_download_rate_limit() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GroupConfig::clear_has_download_rate_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GroupConfig::clear_download_rate_limit() {
  download_rate_limit_ = 100;
  clear_has_download_rate_limit();
}
inline ::google::protobuf::int32 GroupConfig::download_rate_limit() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.download_rate_limit)
  return download_rate_limit_;
}
inline void GroupConfig::set_download_rate_limit(::google::protobuf::int32 value) {
  set_has_download_rate_limit();
  download_rate_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.download_rate_limit)
}

// required int32 connection_limit = 4 [default = 8000];
inline bool GroupConfig::has_connection_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GroupConfig::set_has_connection_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GroupConfig::clear_has_connection_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GroupConfig::clear_connection_limit() {
  connection_limit_ = 8000;
  clear_has_connection_limit();
}
inline ::google::protobuf::int32 GroupConfig::connection_limit() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.connection_limit)
  return connection_limit_;
}
inline void GroupConfig::set_connection_limit(::google::protobuf::int32 value) {
  set_has_connection_limit();
  connection_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.connection_limit)
}

// optional int32 finished_timeout = 5 [default = 3600];
inline bool GroupConfig::has_finished_timeout() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GroupConfig::set_has_finished_timeout() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GroupConfig::clear_has_finished_timeout() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GroupConfig::clear_finished_timeout() {
  finished_timeout_ = 3600;
  clear_has_finished_timeout();
}
inline ::google::protobuf::int32 GroupConfig::finished_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.finished_timeout)
  return finished_timeout_;
}
inline void GroupConfig::set_finished_timeout(::google::protobuf::int32 value) {
  set_has_finished_timeout();
  finished_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.finished_timeout)
}

// optional int32 max_cluster_thread_num = 6 [default = 10];
inline bool GroupConfig::has_max_cluster_thread_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GroupConfig::set_has_max_cluster_thread_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GroupConfig::clear_has_max_cluster_thread_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GroupConfig::clear_max_cluster_thread_num() {
  max_cluster_thread_num_ = 10;
  clear_has_max_cluster_thread_num();
}
inline ::google::protobuf::int32 GroupConfig::max_cluster_thread_num() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.max_cluster_thread_num)
  return max_cluster_thread_num_;
}
inline void GroupConfig::set_max_cluster_thread_num(::google::protobuf::int32 value) {
  set_has_max_cluster_thread_num();
  max_cluster_thread_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.max_cluster_thread_num)
}

// optional bool is_allow_all_add = 7 [default = false];
inline bool GroupConfig::has_is_allow_all_add() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GroupConfig::set_has_is_allow_all_add() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GroupConfig::clear_has_is_allow_all_add() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GroupConfig::clear_is_allow_all_add() {
  is_allow_all_add_ = false;
  clear_has_is_allow_all_add();
}
inline bool GroupConfig::is_allow_all_add() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.is_allow_all_add)
  return is_allow_all_add_;
}
inline void GroupConfig::set_is_allow_all_add(bool value) {
  set_has_is_allow_all_add();
  is_allow_all_add_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.is_allow_all_add)
}

// optional string absolute_path = 11;
inline bool GroupConfig::has_absolute_path() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GroupConfig::set_has_absolute_path() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GroupConfig::clear_has_absolute_path() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GroupConfig::clear_absolute_path() {
  absolute_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_absolute_path();
}
inline const ::std::string& GroupConfig::absolute_path() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.absolute_path)
  return absolute_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupConfig::set_absolute_path(const ::std::string& value) {
  set_has_absolute_path();
  absolute_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.absolute_path)
}
inline void GroupConfig::set_absolute_path(const char* value) {
  set_has_absolute_path();
  absolute_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.absolute_path)
}
inline void GroupConfig::set_absolute_path(const char* value, size_t size) {
  set_has_absolute_path();
  absolute_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.absolute_path)
}
inline ::std::string* GroupConfig::mutable_absolute_path() {
  set_has_absolute_path();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.absolute_path)
  return absolute_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GroupConfig::release_absolute_path() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.absolute_path)
  clear_has_absolute_path();
  return absolute_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GroupConfig::set_allocated_absolute_path(::std::string* absolute_path) {
  if (absolute_path != NULL) {
    set_has_absolute_path();
  } else {
    clear_has_absolute_path();
  }
  absolute_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), absolute_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.absolute_path)
}

// optional string group_data_path = 12 [default = "/bbts-group-data"];
inline bool GroupConfig::has_group_data_path() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GroupConfig::set_has_group_data_path() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GroupConfig::clear_has_group_data_path() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GroupConfig::clear_group_data_path() {
  group_data_path_.ClearToDefaultNoArena(_default_group_data_path_);
  clear_has_group_data_path();
}
inline const ::std::string& GroupConfig::group_data_path() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.group_data_path)
  return group_data_path_.GetNoArena(_default_group_data_path_);
}
inline void GroupConfig::set_group_data_path(const ::std::string& value) {
  set_has_group_data_path();
  group_data_path_.SetNoArena(_default_group_data_path_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.group_data_path)
}
inline void GroupConfig::set_group_data_path(const char* value) {
  set_has_group_data_path();
  group_data_path_.SetNoArena(_default_group_data_path_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.group_data_path)
}
inline void GroupConfig::set_group_data_path(const char* value, size_t size) {
  set_has_group_data_path();
  group_data_path_.SetNoArena(_default_group_data_path_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.group_data_path)
}
inline ::std::string* GroupConfig::mutable_group_data_path() {
  set_has_group_data_path();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.group_data_path)
  return group_data_path_.MutableNoArena(_default_group_data_path_);
}
inline ::std::string* GroupConfig::release_group_data_path() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.group_data_path)
  clear_has_group_data_path();
  return group_data_path_.ReleaseNoArena(_default_group_data_path_);
}
inline void GroupConfig::set_allocated_group_data_path(::std::string* group_data_path) {
  if (group_data_path != NULL) {
    set_has_group_data_path();
  } else {
    clear_has_group_data_path();
  }
  group_data_path_.SetAllocatedNoArena(_default_group_data_path_, group_data_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.group_data_path)
}

// optional string log_file = 13 [default = "bbts-group.log"];
inline bool GroupConfig::has_log_file() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GroupConfig::set_has_log_file() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GroupConfig::clear_has_log_file() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GroupConfig::clear_log_file() {
  log_file_.ClearToDefaultNoArena(_default_log_file_);
  clear_has_log_file();
}
inline const ::std::string& GroupConfig::log_file() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.log_file)
  return log_file_.GetNoArena(_default_log_file_);
}
inline void GroupConfig::set_log_file(const ::std::string& value) {
  set_has_log_file();
  log_file_.SetNoArena(_default_log_file_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.log_file)
}
inline void GroupConfig::set_log_file(const char* value) {
  set_has_log_file();
  log_file_.SetNoArena(_default_log_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.log_file)
}
inline void GroupConfig::set_log_file(const char* value, size_t size) {
  set_has_log_file();
  log_file_.SetNoArena(_default_log_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.log_file)
}
inline ::std::string* GroupConfig::mutable_log_file() {
  set_has_log_file();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.log_file)
  return log_file_.MutableNoArena(_default_log_file_);
}
inline ::std::string* GroupConfig::release_log_file() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.log_file)
  clear_has_log_file();
  return log_file_.ReleaseNoArena(_default_log_file_);
}
inline void GroupConfig::set_allocated_log_file(::std::string* log_file) {
  if (log_file != NULL) {
    set_has_log_file();
  } else {
    clear_has_log_file();
  }
  log_file_.SetAllocatedNoArena(_default_log_file_, log_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.log_file)
}

// optional string resume_dir = 14 [default = "bbts-group.resume"];
inline bool GroupConfig::has_resume_dir() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GroupConfig::set_has_resume_dir() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GroupConfig::clear_has_resume_dir() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GroupConfig::clear_resume_dir() {
  resume_dir_.ClearToDefaultNoArena(_default_resume_dir_);
  clear_has_resume_dir();
}
inline const ::std::string& GroupConfig::resume_dir() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.resume_dir)
  return resume_dir_.GetNoArena(_default_resume_dir_);
}
inline void GroupConfig::set_resume_dir(const ::std::string& value) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(_default_resume_dir_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.resume_dir)
}
inline void GroupConfig::set_resume_dir(const char* value) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(_default_resume_dir_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.resume_dir)
}
inline void GroupConfig::set_resume_dir(const char* value, size_t size) {
  set_has_resume_dir();
  resume_dir_.SetNoArena(_default_resume_dir_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.resume_dir)
}
inline ::std::string* GroupConfig::mutable_resume_dir() {
  set_has_resume_dir();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.resume_dir)
  return resume_dir_.MutableNoArena(_default_resume_dir_);
}
inline ::std::string* GroupConfig::release_resume_dir() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.resume_dir)
  clear_has_resume_dir();
  return resume_dir_.ReleaseNoArena(_default_resume_dir_);
}
inline void GroupConfig::set_allocated_resume_dir(::std::string* resume_dir) {
  if (resume_dir != NULL) {
    set_has_resume_dir();
  } else {
    clear_has_resume_dir();
  }
  resume_dir_.SetAllocatedNoArena(_default_resume_dir_, resume_dir);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.resume_dir)
}

// optional string lock_file = 15 [default = "bbts-group.lock"];
inline bool GroupConfig::has_lock_file() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GroupConfig::set_has_lock_file() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GroupConfig::clear_has_lock_file() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GroupConfig::clear_lock_file() {
  lock_file_.ClearToDefaultNoArena(_default_lock_file_);
  clear_has_lock_file();
}
inline const ::std::string& GroupConfig::lock_file() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.lock_file)
  return lock_file_.GetNoArena(_default_lock_file_);
}
inline void GroupConfig::set_lock_file(const ::std::string& value) {
  set_has_lock_file();
  lock_file_.SetNoArena(_default_lock_file_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.lock_file)
}
inline void GroupConfig::set_lock_file(const char* value) {
  set_has_lock_file();
  lock_file_.SetNoArena(_default_lock_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.lock_file)
}
inline void GroupConfig::set_lock_file(const char* value, size_t size) {
  set_has_lock_file();
  lock_file_.SetNoArena(_default_lock_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.lock_file)
}
inline ::std::string* GroupConfig::mutable_lock_file() {
  set_has_lock_file();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.lock_file)
  return lock_file_.MutableNoArena(_default_lock_file_);
}
inline ::std::string* GroupConfig::release_lock_file() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.lock_file)
  clear_has_lock_file();
  return lock_file_.ReleaseNoArena(_default_lock_file_);
}
inline void GroupConfig::set_allocated_lock_file(::std::string* lock_file) {
  if (lock_file != NULL) {
    set_has_lock_file();
  } else {
    clear_has_lock_file();
  }
  lock_file_.SetAllocatedNoArena(_default_lock_file_, lock_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.lock_file)
}

// optional string unix_socket = 16 [default = "bbts-group.sock"];
inline bool GroupConfig::has_unix_socket() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GroupConfig::set_has_unix_socket() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GroupConfig::clear_has_unix_socket() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GroupConfig::clear_unix_socket() {
  unix_socket_.ClearToDefaultNoArena(_default_unix_socket_);
  clear_has_unix_socket();
}
inline const ::std::string& GroupConfig::unix_socket() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.unix_socket)
  return unix_socket_.GetNoArena(_default_unix_socket_);
}
inline void GroupConfig::set_unix_socket(const ::std::string& value) {
  set_has_unix_socket();
  unix_socket_.SetNoArena(_default_unix_socket_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.unix_socket)
}
inline void GroupConfig::set_unix_socket(const char* value) {
  set_has_unix_socket();
  unix_socket_.SetNoArena(_default_unix_socket_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.unix_socket)
}
inline void GroupConfig::set_unix_socket(const char* value, size_t size) {
  set_has_unix_socket();
  unix_socket_.SetNoArena(_default_unix_socket_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.unix_socket)
}
inline ::std::string* GroupConfig::mutable_unix_socket() {
  set_has_unix_socket();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.unix_socket)
  return unix_socket_.MutableNoArena(_default_unix_socket_);
}
inline ::std::string* GroupConfig::release_unix_socket() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.unix_socket)
  clear_has_unix_socket();
  return unix_socket_.ReleaseNoArena(_default_unix_socket_);
}
inline void GroupConfig::set_allocated_unix_socket(::std::string* unix_socket) {
  if (unix_socket != NULL) {
    set_has_unix_socket();
  } else {
    clear_has_unix_socket();
  }
  unix_socket_.SetAllocatedNoArena(_default_unix_socket_, unix_socket);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.unix_socket)
}

// optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
inline bool GroupConfig::has_peer_stat_log_file() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GroupConfig::set_has_peer_stat_log_file() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GroupConfig::clear_has_peer_stat_log_file() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GroupConfig::clear_peer_stat_log_file() {
  peer_stat_log_file_.ClearToDefaultNoArena(_default_peer_stat_log_file_);
  clear_has_peer_stat_log_file();
}
inline const ::std::string& GroupConfig::peer_stat_log_file() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.peer_stat_log_file)
  return peer_stat_log_file_.GetNoArena(_default_peer_stat_log_file_);
}
inline void GroupConfig::set_peer_stat_log_file(const ::std::string& value) {
  set_has_peer_stat_log_file();
  peer_stat_log_file_.SetNoArena(_default_peer_stat_log_file_, value);
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.peer_stat_log_file)
}
inline void GroupConfig::set_peer_stat_log_file(const char* value) {
  set_has_peer_stat_log_file();
  peer_stat_log_file_.SetNoArena(_default_peer_stat_log_file_, ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.GroupConfig.peer_stat_log_file)
}
inline void GroupConfig::set_peer_stat_log_file(const char* value, size_t size) {
  set_has_peer_stat_log_file();
  peer_stat_log_file_.SetNoArena(_default_peer_stat_log_file_,
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.GroupConfig.peer_stat_log_file)
}
inline ::std::string* GroupConfig::mutable_peer_stat_log_file() {
  set_has_peer_stat_log_file();
  // @@protoc_insertion_point(field_mutable:bbts.GroupConfig.peer_stat_log_file)
  return peer_stat_log_file_.MutableNoArena(_default_peer_stat_log_file_);
}
inline ::std::string* GroupConfig::release_peer_stat_log_file() {
  // @@protoc_insertion_point(field_release:bbts.GroupConfig.peer_stat_log_file)
  clear_has_peer_stat_log_file();
  return peer_stat_log_file_.ReleaseNoArena(_default_peer_stat_log_file_);
}
inline void GroupConfig::set_allocated_peer_stat_log_file(::std::string* peer_stat_log_file) {
  if (peer_stat_log_file != NULL) {
    set_has_peer_stat_log_file();
  } else {
    clear_has_peer_stat_log_file();
  }
  peer_stat_log_file_.SetAllocatedNoArena(_default_peer_stat_log_file_, peer_stat_log_file);
  // @@protoc_insertion_point(field_set_allocated:bbts.GroupConfig.peer_stat_log_file)
}

// optional int32 max_metadata_size = 31 [default = 50];
inline bool GroupConfig::has_max_metadata_size() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GroupConfig::set_has_max_metadata_size() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GroupConfig::clear_has_max_metadata_size() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GroupConfig::clear_max_metadata_size() {
  max_metadata_size_ = 50;
  clear_has_max_metadata_size();
}
inline ::google::protobuf::int32 GroupConfig::max_metadata_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.max_metadata_size)
  return max_metadata_size_;
}
inline void GroupConfig::set_max_metadata_size(::google::protobuf::int32 value) {
  set_has_max_metadata_size();
  max_metadata_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.max_metadata_size)
}

// optional int32 peers_num_want = 32 [default = 25];
inline bool GroupConfig::has_peers_num_want() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GroupConfig::set_has_peers_num_want() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GroupConfig::clear_has_peers_num_want() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GroupConfig::clear_peers_num_want() {
  peers_num_want_ = 25;
  clear_has_peers_num_want();
}
inline ::google::protobuf::int32 GroupConfig::peers_num_want() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.peers_num_want)
  return peers_num_want_;
}
inline void GroupConfig::set_peers_num_want(::google::protobuf::int32 value) {
  set_has_peers_num_want();
  peers_num_want_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.peers_num_want)
}

// optional bool disk_io_read_mode = 33 [default = true];
inline bool GroupConfig::has_disk_io_read_mode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GroupConfig::set_has_disk_io_read_mode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GroupConfig::clear_has_disk_io_read_mode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GroupConfig::clear_disk_io_read_mode() {
  disk_io_read_mode_ = true;
  clear_has_disk_io_read_mode();
}
inline bool GroupConfig::disk_io_read_mode() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.disk_io_read_mode)
  return disk_io_read_mode_;
}
inline void GroupConfig::set_disk_io_read_mode(bool value) {
  set_has_disk_io_read_mode();
  disk_io_read_mode_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.disk_io_read_mode)
}

// optional bool disk_io_write_mode = 34 [default = true];
inline bool GroupConfig::has_disk_io_write_mode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GroupConfig::set_has_disk_io_write_mode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GroupConfig::clear_has_disk_io_write_mode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GroupConfig::clear_disk_io_write_mode() {
  disk_io_write_mode_ = true;
  clear_has_disk_io_write_mode();
}
inline bool GroupConfig::disk_io_write_mode() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.disk_io_write_mode)
  return disk_io_write_mode_;
}
inline void GroupConfig::set_disk_io_write_mode(bool value) {
  set_has_disk_io_write_mode();
  disk_io_write_mode_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.disk_io_write_mode)
}

// optional int32 seed_announce_interval = 35 [default = 1800];
inline bool GroupConfig::has_seed_announce_interval() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GroupConfig::set_has_seed_announce_interval() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GroupConfig::clear_has_seed_announce_interval() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GroupConfig::clear_seed_announce_interval() {
  seed_announce_interval_ = 1800;
  clear_has_seed_announce_interval();
}
inline ::google::protobuf::int32 GroupConfig::seed_announce_interval() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.seed_announce_interval)
  return seed_announce_interval_;
}
inline void GroupConfig::set_seed_announce_interval(::google::protobuf::int32 value) {
  set_has_seed_announce_interval();
  seed_announce_interval_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.seed_announce_interval)
}

// optional int32 min_reconnect_time = 36 [default = 1];
inline bool GroupConfig::has_min_reconnect_time() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GroupConfig::set_has_min_reconnect_time() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GroupConfig::clear_has_min_reconnect_time() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GroupConfig::clear_min_reconnect_time() {
  min_reconnect_time_ = 1;
  clear_has_min_reconnect_time();
}
inline ::google::protobuf::int32 GroupConfig::min_reconnect_time() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.min_reconnect_time)
  return min_reconnect_time_;
}
inline void GroupConfig::set_min_reconnect_time(::google::protobuf::int32 value) {
  set_has_min_reconnect_time();
  min_reconnect_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.min_reconnect_time)
}

// optional int32 max_queued_disk_bytes = 37 [default = 20];
inline bool GroupConfig::has_max_queued_disk_bytes() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void GroupConfig::set_has_max_queued_disk_bytes() {
  _has_bits_[0] |= 0x00100000u;
}
inline void GroupConfig::clear_has_max_queued_disk_bytes() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void GroupConfig::clear_max_queued_disk_bytes() {
  max_queued_disk_bytes_ = 20;
  clear_has_max_queued_disk_bytes();
}
inline ::google::protobuf::int32 GroupConfig::max_queued_disk_bytes() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.max_queued_disk_bytes)
  return max_queued_disk_bytes_;
}
inline void GroupConfig::set_max_queued_disk_bytes(::google::protobuf::int32 value) {
  set_has_max_queued_disk_bytes();
  max_queued_disk_bytes_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.max_queued_disk_bytes)
}

// optional int32 max_out_request_queue = 38 [default = 1500];
inline bool GroupConfig::has_max_out_request_queue() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GroupConfig::set_has_max_out_request_queue() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GroupConfig::clear_has_max_out_request_queue() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GroupConfig::clear_max_out_request_queue() {
  max_out_request_queue_ = 1500;
  clear_has_max_out_request_queue();
}
inline ::google::protobuf::int32 GroupConfig::max_out_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.max_out_request_queue)
  return max_out_request_queue_;
}
inline void GroupConfig::set_max_out_request_queue(::google::protobuf::int32 value) {
  set_has_max_out_request_queue();
  max_out_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.max_out_request_queue)
}

// optional int32 max_allowed_in_request_queue = 39 [default = 2000];
inline bool GroupConfig::has_max_allowed_in_request_queue() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void GroupConfig::set_has_max_allowed_in_request_queue() {
  _has_bits_[0] |= 0x00400000u;
}
inline void GroupConfig::clear_has_max_allowed_in_request_queue() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void GroupConfig::clear_max_allowed_in_request_queue() {
  max_allowed_in_request_queue_ = 2000;
  clear_has_max_allowed_in_request_queue();
}
inline ::google::protobuf::int32 GroupConfig::max_allowed_in_request_queue() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.max_allowed_in_request_queue)
  return max_allowed_in_request_queue_;
}
inline void GroupConfig::set_max_allowed_in_request_queue(::google::protobuf::int32 value) {
  set_has_max_allowed_in_request_queue();
  max_allowed_in_request_queue_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.max_allowed_in_request_queue)
}

// optional int32 whole_pieces_threshold = 40 [default = 20];
inline bool GroupConfig::has_whole_pieces_threshold() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void GroupConfig::set_has_whole_pieces_threshold() {
  _has_bits_[0] |= 0x00800000u;
}
inline void GroupConfig::clear_has_whole_pieces_threshold() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void GroupConfig::clear_whole_pieces_threshold() {
  whole_pieces_threshold_ = 20;
  clear_has_whole_pieces_threshold();
}
inline ::google::protobuf::int32 GroupConfig::whole_pieces_threshold() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.whole_pieces_threshold)
  return whole_pieces_threshold_;
}
inline void GroupConfig::set_whole_pieces_threshold(::google::protobuf::int32 value) {
  set_has_whole_pieces_threshold();
  whole_pieces_threshold_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.whole_pieces_threshold)
}

// optional int32 request_queue_time = 41 [default = 3];
inline bool GroupConfig::has_request_queue_time() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void GroupConfig::set_has_request_queue_time() {
  _has_bits_[0] |= 0x01000000u;
}
inline void GroupConfig::clear_has_request_queue_time() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void GroupConfig::clear_request_queue_time() {
  request_queue_time_ = 3;
  clear_has_request_queue_time();
}
inline ::google::protobuf::int32 GroupConfig::request_queue_time() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.request_queue_time)
  return request_queue_time_;
}
inline void GroupConfig::set_request_queue_time(::google::protobuf::int32 value) {
  set_has_request_queue_time();
  request_queue_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.request_queue_time)
}

// optional int32 cache_size = 42 [default = 128];
inline bool GroupConfig::has_cache_size() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void GroupConfig::set_has_cache_size() {
  _has_bits_[0] |= 0x02000000u;
}
inline void GroupConfig::clear_has_cache_size() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void GroupConfig::clear_cache_size() {
  cache_size_ = 128;
  clear_has_cache_size();
}
inline ::google::protobuf::int32 GroupConfig::cache_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.cache_size)
  return cache_size_;
}
inline void GroupConfig::set_cache_size(::google::protobuf::int32 value) {
  set_has_cache_size();
  cache_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.cache_size)
}

// optional int32 cache_expiry = 43 [default = 300];
inline bool GroupConfig::has_cache_expiry() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void GroupConfig::set_has_cache_expiry() {
  _has_bits_[0] |= 0x04000000u;
}
inline void GroupConfig::clear_has_cache_expiry() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void GroupConfig::clear_cache_expiry() {
  cache_expiry_ = 300;
  clear_has_cache_expiry();
}
inline ::google::protobuf::int32 GroupConfig::cache_expiry() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.cache_expiry)
  return cache_expiry_;
}
inline void GroupConfig::set_cache_expiry(::google::protobuf::int32 value) {
  set_has_cache_expiry();
  cache_expiry_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.cache_expiry)
}

// optional int32 read_cache_line_size = 44 [default = 32];
inline bool GroupConfig::has_read_cache_line_size() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void GroupConfig::set_has_read_cache_line_size() {
  _has_bits_[0] |= 0x08000000u;
}
inline void GroupConfig::clear_has_read_cache_line_size() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void GroupConfig::clear_read_cache_line_size() {
  read_cache_line_size_ = 32;
  clear_has_read_cache_line_size();
}
inline ::google::protobuf::int32 GroupConfig::read_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.read_cache_line_size)
  return read_cache_line_size_;
}
inline void GroupConfig::set_read_cache_line_size(::google::protobuf::int32 value) {
  set_has_read_cache_line_size();
  read_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.read_cache_line_size)
}

// optional int32 write_cache_line_size = 45 [default = 32];
inline bool GroupConfig::has_write_cache_line_size() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void GroupConfig::set_has_write_cache_line_size() {
  _has_bits_[0] |= 0x10000000u;
}
inline void GroupConfig::clear_has_write_cache_line_size() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void GroupConfig::clear_write_cache_line_size() {
  write_cache_line_size_ = 32;
  clear_has_write_cache_line_size();
}
inline ::google::protobuf::int32 GroupConfig::write_cache_line_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.write_cache_line_size)
  return write_cache_line_size_;
}
inline void GroupConfig::set_write_cache_line_size(::google::protobuf::int32 value) {
  set_has_write_cache_line_size();
  write_cache_line_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.write_cache_line_size)
}

// optional int32 file_pool_size = 46 [default = 500];
inline bool GroupConfig::has_file_pool_size() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void GroupConfig::set_has_file_pool_size() {
  _has_bits_[0] |= 0x20000000u;
}
inline void GroupConfig::clear_has_file_pool_size() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void GroupConfig::clear_file_pool_size() {
  file_pool_size_ = 500;
  clear_has_file_pool_size();
}
inline ::google::protobuf::int32 GroupConfig::file_pool_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.file_pool_size)
  return file_pool_size_;
}
inline void GroupConfig::set_file_pool_size(::google::protobuf::int32 value) {
  set_has_file_pool_size();
  file_pool_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.file_pool_size)
}

// optional int32 send_buffer_watermark = 47 [default = 10];
inline bool GroupConfig::has_send_buffer_watermark() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void GroupConfig::set_has_send_buffer_watermark() {
  _has_bits_[0] |= 0x40000000u;
}
inline void GroupConfig::clear_has_send_buffer_watermark() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void GroupConfig::clear_send_buffer_watermark() {
  send_buffer_watermark_ = 10;
  clear_has_send_buffer_watermark();
}
inline ::google::protobuf::int32 GroupConfig::send_buffer_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.send_buffer_watermark)
  return send_buffer_watermark_;
}
inline void GroupConfig::set_send_buffer_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_watermark();
  send_buffer_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.send_buffer_watermark)
}

// optional int32 send_buffer_low_watermark = 48 [default = 1024];
inline bool GroupConfig::has_send_buffer_low_watermark() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void GroupConfig::set_has_send_buffer_low_watermark() {
  _has_bits_[0] |= 0x80000000u;
}
inline void GroupConfig::clear_has_send_buffer_low_watermark() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void GroupConfig::clear_send_buffer_low_watermark() {
  send_buffer_low_watermark_ = 1024;
  clear_has_send_buffer_low_watermark();
}
inline ::google::protobuf::int32 GroupConfig::send_buffer_low_watermark() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.send_buffer_low_watermark)
  return send_buffer_low_watermark_;
}
inline void GroupConfig::set_send_buffer_low_watermark(::google::protobuf::int32 value) {
  set_has_send_buffer_low_watermark();
  send_buffer_low_watermark_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.send_buffer_low_watermark)
}

// optional int32 send_socket_buffer_size = 49 [default = 2048];
inline bool GroupConfig::has_send_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void GroupConfig::set_has_send_socket_buffer_size() {
  _has_bits_[1] |= 0x00000001u;
}
inline void GroupConfig::clear_has_send_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void GroupConfig::clear_send_socket_buffer_size() {
  send_socket_buffer_size_ = 2048;
  clear_has_send_socket_buffer_size();
}
inline ::google::protobuf::int32 GroupConfig::send_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.send_socket_buffer_size)
  return send_socket_buffer_size_;
}
inline void GroupConfig::set_send_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_send_socket_buffer_size();
  send_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.send_socket_buffer_size)
}

// optional int32 recv_socket_buffer_size = 50 [default = 2048];
inline bool GroupConfig::has_recv_socket_buffer_size() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void GroupConfig::set_has_recv_socket_buffer_size() {
  _has_bits_[1] |= 0x00000002u;
}
inline void GroupConfig::clear_has_recv_socket_buffer_size() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void GroupConfig::clear_recv_socket_buffer_size() {
  recv_socket_buffer_size_ = 2048;
  clear_has_recv_socket_buffer_size();
}
inline ::google::protobuf::int32 GroupConfig::recv_socket_buffer_size() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.recv_socket_buffer_size)
  return recv_socket_buffer_size_;
}
inline void GroupConfig::set_recv_socket_buffer_size(::google::protobuf::int32 value) {
  set_has_recv_socket_buffer_size();
  recv_socket_buffer_size_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.recv_socket_buffer_size)
}

// optional int32 active_seeds = 51 [default = 32000];
inline bool GroupConfig::has_active_seeds() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void GroupConfig::set_has_active_seeds() {
  _has_bits_[1] |= 0x00000004u;
}
inline void GroupConfig::clear_has_active_seeds() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void GroupConfig::clear_active_seeds() {
  active_seeds_ = 32000;
  clear_has_active_seeds();
}
inline ::google::protobuf::int32 GroupConfig::active_seeds() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.active_seeds)
  return active_seeds_;
}
inline void GroupConfig::set_active_seeds(::google::protobuf::int32 value) {
  set_has_active_seeds();
  active_seeds_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.active_seeds)
}

// optional int32 active_limit = 52 [default = 32000];
inline bool GroupConfig::has_active_limit() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void GroupConfig::set_has_active_limit() {
  _has_bits_[1] |= 0x00000008u;
}
inline void GroupConfig::clear_has_active_limit() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void GroupConfig::clear_active_limit() {
  active_limit_ = 32000;
  clear_has_active_limit();
}
inline ::google::protobuf::int32 GroupConfig::active_limit() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.active_limit)
  return active_limit_;
}
inline void GroupConfig::set_active_limit(::google::protobuf::int32 value) {
  set_has_active_limit();
  active_limit_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.active_limit)
}

// optional int32 active_downloads = 53 [default = 32000];
inline bool GroupConfig::has_active_downloads() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void GroupConfig::set_has_active_downloads() {
  _has_bits_[1] |= 0x00000010u;
}
inline void GroupConfig::clear_has_active_downloads() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void GroupConfig::clear_active_downloads() {
  active_downloads_ = 32000;
  clear_has_active_downloads();
}
inline ::google::protobuf::int32 GroupConfig::active_downloads() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.active_downloads)
  return active_downloads_;
}
inline void GroupConfig::set_active_downloads(::google::protobuf::int32 value) {
  set_has_active_downloads();
  active_downloads_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.active_downloads)
}

// optional bool suggest_mode = 54 [default = true];
inline bool GroupConfig::has_suggest_mode() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void GroupConfig::set_has_suggest_mode() {
  _has_bits_[1] |= 0x00000020u;
}
inline void GroupConfig::clear_has_suggest_mode() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void GroupConfig::clear_suggest_mode() {
  suggest_mode_ = true;
  clear_has_suggest_mode();
}
inline bool GroupConfig::suggest_mode() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.suggest_mode)
  return suggest_mode_;
}
inline void GroupConfig::set_suggest_mode(bool value) {
  set_has_suggest_mode();
  suggest_mode_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.suggest_mode)
}

// optional int32 listen_port = 55 [default = 18000];
inline bool GroupConfig::has_listen_port() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void GroupConfig::set_has_listen_port() {
  _has_bits_[1] |= 0x00000040u;
}
inline void GroupConfig::clear_has_listen_port() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void GroupConfig::clear_listen_port() {
  listen_port_ = 18000;
  clear_has_listen_port();
}
inline ::google::protobuf::int32 GroupConfig::listen_port() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.listen_port)
  return listen_port_;
}
inline void GroupConfig::set_listen_port(::google::protobuf::int32 value) {
  set_has_listen_port();
  listen_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.listen_port)
}

// optional int32 peer_connection_timeout = 56 [default = 3];
inline bool GroupConfig::has_peer_connection_timeout() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void GroupConfig::set_has_peer_connection_timeout() {
  _has_bits_[1] |= 0x00000080u;
}
inline void GroupConfig::clear_has_peer_connection_timeout() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void GroupConfig::clear_peer_connection_timeout() {
  peer_connection_timeout_ = 3;
  clear_has_peer_connection_timeout();
}
inline ::google::protobuf::int32 GroupConfig::peer_connection_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.peer_connection_timeout)
  return peer_connection_timeout_;
}
inline void GroupConfig::set_peer_connection_timeout(::google::protobuf::int32 value) {
  set_has_peer_connection_timeout();
  peer_connection_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.peer_connection_timeout)
}

// optional bool disable_os_cache = 57 [default = false];
inline bool GroupConfig::has_disable_os_cache() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void GroupConfig::set_has_disable_os_cache() {
  _has_bits_[1] |= 0x00000100u;
}
inline void GroupConfig::clear_has_disable_os_cache() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void GroupConfig::clear_disable_os_cache() {
  disable_os_cache_ = false;
  clear_has_disable_os_cache();
}
inline bool GroupConfig::disable_os_cache() const {
  // @@protoc_insertion_point(field_get:bbts.GroupConfig.disable_os_cache)
  return disable_os_cache_;
}
inline void GroupConfig::set_disable_os_cache(bool value) {
  set_has_disable_os_cache();
  disable_os_cache_ = value;
  // @@protoc_insertion_point(field_set:bbts.GroupConfig.disable_os_cache)
}

inline const GroupConfig* GroupConfig::internal_default_instance() {
  return &GroupConfig_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GroupConf_2eproto__INCLUDED
