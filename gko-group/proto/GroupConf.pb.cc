// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GroupConf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {

namespace {

const ::google::protobuf::Descriptor* GroupConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GroupConf_2eproto() {
  protobuf_AddDesc_GroupConf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GroupConf.proto");
  GOOGLE_CHECK(file != NULL);
  GroupConfig_descriptor_ = file->message_type(0);
  static const int GroupConfig_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, upload_rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, download_rate_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, connection_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, finished_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, max_cluster_thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, is_allow_all_add_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, absolute_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, group_data_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, resume_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, lock_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, unix_socket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, peer_stat_log_file_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, max_metadata_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, peers_num_want_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, disk_io_read_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, disk_io_write_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, seed_announce_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, min_reconnect_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, max_queued_disk_bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, max_out_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, max_allowed_in_request_queue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, whole_pieces_threshold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, request_queue_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, cache_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, cache_expiry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, read_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, write_cache_line_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, file_pool_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, send_buffer_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, send_buffer_low_watermark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, send_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, recv_socket_buffer_size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, active_seeds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, active_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, active_downloads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, suggest_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, listen_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, peer_connection_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, disable_os_cache_),
  };
  GroupConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupConfig_descriptor_,
      GroupConfig::default_instance_,
      GroupConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GroupConf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupConfig_descriptor_, &GroupConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GroupConf_2eproto() {
  delete GroupConfig::default_instance_;
  delete GroupConfig_reflection_;
}

void protobuf_AddDesc_GroupConf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017GroupConf.proto\022\004bbts\"\355\n\n\013GroupConfig\022"
    "\023\n\007timeout\030\001 \002(\005:\002-1\022\036\n\021upload_rate_limi"
    "t\030\002 \002(\005:\003100\022 \n\023download_rate_limit\030\003 \002("
    "\005:\003100\022\036\n\020connection_limit\030\004 \002(\005:\0048000\022\036"
    "\n\020finished_timeout\030\005 \001(\005:\0043600\022\"\n\026max_cl"
    "uster_thread_num\030\006 \001(\005:\00210\022\037\n\020is_allow_a"
    "ll_add\030\007 \001(\010:\005false\022\025\n\rabsolute_path\030\013 \001"
    "(\t\022)\n\017group_data_path\030\014 \001(\t:\020/bbts-group"
    "-data\022 \n\010log_file\030\r \001(\t:\016bbts-group.log\022"
    "%\n\nresume_dir\030\016 \001(\t:\021bbts-group.resume\022\""
    "\n\tlock_file\030\017 \001(\t:\017bbts-group.lock\022$\n\013un"
    "ix_socket\030\020 \001(\t:\017bbts-group.sock\022+\n\022peer"
    "_stat_log_file\030\021 \001(\t:\017bbts-group.peer\022\035\n"
    "\021max_metadata_size\030\037 \001(\005:\00250\022\032\n\016peers_nu"
    "m_want\030  \001(\005:\00225\022\037\n\021disk_io_read_mode\030! "
    "\001(\010:\004true\022 \n\022disk_io_write_mode\030\" \001(\010:\004t"
    "rue\022$\n\026seed_announce_interval\030# \001(\005:\004180"
    "0\022\035\n\022min_reconnect_time\030$ \001(\005:\0011\022!\n\025max_"
    "queued_disk_bytes\030% \001(\005:\00220\022#\n\025max_out_r"
    "equest_queue\030& \001(\005:\0041500\022*\n\034max_allowed_"
    "in_request_queue\030\' \001(\005:\0042000\022\"\n\026whole_pi"
    "eces_threshold\030( \001(\005:\00220\022\035\n\022request_queu"
    "e_time\030) \001(\005:\0013\022\027\n\ncache_size\030* \001(\005:\003128"
    "\022\031\n\014cache_expiry\030+ \001(\005:\003300\022 \n\024read_cach"
    "e_line_size\030, \001(\005:\00232\022!\n\025write_cache_lin"
    "e_size\030- \001(\005:\00232\022\033\n\016file_pool_size\030. \001(\005"
    ":\003500\022!\n\025send_buffer_watermark\030/ \001(\005:\00210"
    "\022\'\n\031send_buffer_low_watermark\0300 \001(\005:\004102"
    "4\022%\n\027send_socket_buffer_size\0301 \001(\005:\0042048"
    "\022%\n\027recv_socket_buffer_size\0302 \001(\005:\0042048\022"
    "\033\n\014active_seeds\0303 \001(\005:\00532000\022\033\n\014active_l"
    "imit\0304 \001(\005:\00532000\022\037\n\020active_downloads\0305 "
    "\001(\005:\00532000\022\032\n\014suggest_mode\0306 \001(\010:\004true\022\032"
    "\n\013listen_port\0307 \001(\005:\00518000\022\"\n\027peer_conne"
    "ction_timeout\0308 \001(\005:\0013\022\037\n\020disable_os_cac"
    "he\0309 \001(\010:\005false", 1415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GroupConf.proto", &protobuf_RegisterTypes);
  GroupConfig::default_instance_ = new GroupConfig();
  GroupConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GroupConf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GroupConf_2eproto {
  StaticDescriptorInitializer_GroupConf_2eproto() {
    protobuf_AddDesc_GroupConf_2eproto();
  }
} static_descriptor_initializer_GroupConf_2eproto_;


// ===================================================================

const ::std::string GroupConfig::_default_group_data_path_("/bbts-group-data");
const ::std::string GroupConfig::_default_log_file_("bbts-group.log");
const ::std::string GroupConfig::_default_resume_dir_("bbts-group.resume");
const ::std::string GroupConfig::_default_lock_file_("bbts-group.lock");
const ::std::string GroupConfig::_default_unix_socket_("bbts-group.sock");
const ::std::string GroupConfig::_default_peer_stat_log_file_("bbts-group.peer");
#ifndef _MSC_VER
const int GroupConfig::kTimeoutFieldNumber;
const int GroupConfig::kUploadRateLimitFieldNumber;
const int GroupConfig::kDownloadRateLimitFieldNumber;
const int GroupConfig::kConnectionLimitFieldNumber;
const int GroupConfig::kFinishedTimeoutFieldNumber;
const int GroupConfig::kMaxClusterThreadNumFieldNumber;
const int GroupConfig::kIsAllowAllAddFieldNumber;
const int GroupConfig::kAbsolutePathFieldNumber;
const int GroupConfig::kGroupDataPathFieldNumber;
const int GroupConfig::kLogFileFieldNumber;
const int GroupConfig::kResumeDirFieldNumber;
const int GroupConfig::kLockFileFieldNumber;
const int GroupConfig::kUnixSocketFieldNumber;
const int GroupConfig::kPeerStatLogFileFieldNumber;
const int GroupConfig::kMaxMetadataSizeFieldNumber;
const int GroupConfig::kPeersNumWantFieldNumber;
const int GroupConfig::kDiskIoReadModeFieldNumber;
const int GroupConfig::kDiskIoWriteModeFieldNumber;
const int GroupConfig::kSeedAnnounceIntervalFieldNumber;
const int GroupConfig::kMinReconnectTimeFieldNumber;
const int GroupConfig::kMaxQueuedDiskBytesFieldNumber;
const int GroupConfig::kMaxOutRequestQueueFieldNumber;
const int GroupConfig::kMaxAllowedInRequestQueueFieldNumber;
const int GroupConfig::kWholePiecesThresholdFieldNumber;
const int GroupConfig::kRequestQueueTimeFieldNumber;
const int GroupConfig::kCacheSizeFieldNumber;
const int GroupConfig::kCacheExpiryFieldNumber;
const int GroupConfig::kReadCacheLineSizeFieldNumber;
const int GroupConfig::kWriteCacheLineSizeFieldNumber;
const int GroupConfig::kFilePoolSizeFieldNumber;
const int GroupConfig::kSendBufferWatermarkFieldNumber;
const int GroupConfig::kSendBufferLowWatermarkFieldNumber;
const int GroupConfig::kSendSocketBufferSizeFieldNumber;
const int GroupConfig::kRecvSocketBufferSizeFieldNumber;
const int GroupConfig::kActiveSeedsFieldNumber;
const int GroupConfig::kActiveLimitFieldNumber;
const int GroupConfig::kActiveDownloadsFieldNumber;
const int GroupConfig::kSuggestModeFieldNumber;
const int GroupConfig::kListenPortFieldNumber;
const int GroupConfig::kPeerConnectionTimeoutFieldNumber;
const int GroupConfig::kDisableOsCacheFieldNumber;
#endif  // !_MSC_VER

GroupConfig::GroupConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupConfig::InitAsDefaultInstance() {
}

GroupConfig::GroupConfig(const GroupConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupConfig::SharedCtor() {
  _cached_size_ = 0;
  timeout_ = -1;
  upload_rate_limit_ = 100;
  download_rate_limit_ = 100;
  connection_limit_ = 8000;
  finished_timeout_ = 3600;
  max_cluster_thread_num_ = 10;
  is_allow_all_add_ = false;
  absolute_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  group_data_path_ = const_cast< ::std::string*>(&_default_group_data_path_);
  log_file_ = const_cast< ::std::string*>(&_default_log_file_);
  resume_dir_ = const_cast< ::std::string*>(&_default_resume_dir_);
  lock_file_ = const_cast< ::std::string*>(&_default_lock_file_);
  unix_socket_ = const_cast< ::std::string*>(&_default_unix_socket_);
  peer_stat_log_file_ = const_cast< ::std::string*>(&_default_peer_stat_log_file_);
  max_metadata_size_ = 50;
  peers_num_want_ = 25;
  disk_io_read_mode_ = true;
  disk_io_write_mode_ = true;
  seed_announce_interval_ = 1800;
  min_reconnect_time_ = 1;
  max_queued_disk_bytes_ = 20;
  max_out_request_queue_ = 1500;
  max_allowed_in_request_queue_ = 2000;
  whole_pieces_threshold_ = 20;
  request_queue_time_ = 3;
  cache_size_ = 128;
  cache_expiry_ = 300;
  read_cache_line_size_ = 32;
  write_cache_line_size_ = 32;
  file_pool_size_ = 500;
  send_buffer_watermark_ = 10;
  send_buffer_low_watermark_ = 1024;
  send_socket_buffer_size_ = 2048;
  recv_socket_buffer_size_ = 2048;
  active_seeds_ = 32000;
  active_limit_ = 32000;
  active_downloads_ = 32000;
  suggest_mode_ = true;
  listen_port_ = 18000;
  peer_connection_timeout_ = 3;
  disable_os_cache_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupConfig::~GroupConfig() {
  SharedDtor();
}

void GroupConfig::SharedDtor() {
  if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
    delete absolute_path_;
  }
  if (group_data_path_ != &_default_group_data_path_) {
    delete group_data_path_;
  }
  if (log_file_ != &_default_log_file_) {
    delete log_file_;
  }
  if (resume_dir_ != &_default_resume_dir_) {
    delete resume_dir_;
  }
  if (lock_file_ != &_default_lock_file_) {
    delete lock_file_;
  }
  if (unix_socket_ != &_default_unix_socket_) {
    delete unix_socket_;
  }
  if (peer_stat_log_file_ != &_default_peer_stat_log_file_) {
    delete peer_stat_log_file_;
  }
  if (this != default_instance_) {
  }
}

void GroupConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupConfig_descriptor_;
}

const GroupConfig& GroupConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GroupConf_2eproto();  return *default_instance_;
}

GroupConfig* GroupConfig::default_instance_ = NULL;

GroupConfig* GroupConfig::New() const {
  return new GroupConfig;
}

void GroupConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timeout_ = -1;
    upload_rate_limit_ = 100;
    download_rate_limit_ = 100;
    connection_limit_ = 8000;
    finished_timeout_ = 3600;
    max_cluster_thread_num_ = 10;
    is_allow_all_add_ = false;
    if (has_absolute_path()) {
      if (absolute_path_ != &::google::protobuf::internal::kEmptyString) {
        absolute_path_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_group_data_path()) {
      if (group_data_path_ != &_default_group_data_path_) {
        group_data_path_->assign(_default_group_data_path_);
      }
    }
    if (has_log_file()) {
      if (log_file_ != &_default_log_file_) {
        log_file_->assign(_default_log_file_);
      }
    }
    if (has_resume_dir()) {
      if (resume_dir_ != &_default_resume_dir_) {
        resume_dir_->assign(_default_resume_dir_);
      }
    }
    if (has_lock_file()) {
      if (lock_file_ != &_default_lock_file_) {
        lock_file_->assign(_default_lock_file_);
      }
    }
    if (has_unix_socket()) {
      if (unix_socket_ != &_default_unix_socket_) {
        unix_socket_->assign(_default_unix_socket_);
      }
    }
    if (has_peer_stat_log_file()) {
      if (peer_stat_log_file_ != &_default_peer_stat_log_file_) {
        peer_stat_log_file_->assign(_default_peer_stat_log_file_);
      }
    }
    max_metadata_size_ = 50;
    peers_num_want_ = 25;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    disk_io_read_mode_ = true;
    disk_io_write_mode_ = true;
    seed_announce_interval_ = 1800;
    min_reconnect_time_ = 1;
    max_queued_disk_bytes_ = 20;
    max_out_request_queue_ = 1500;
    max_allowed_in_request_queue_ = 2000;
    whole_pieces_threshold_ = 20;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    request_queue_time_ = 3;
    cache_size_ = 128;
    cache_expiry_ = 300;
    read_cache_line_size_ = 32;
    write_cache_line_size_ = 32;
    file_pool_size_ = 500;
    send_buffer_watermark_ = 10;
    send_buffer_low_watermark_ = 1024;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    send_socket_buffer_size_ = 2048;
    recv_socket_buffer_size_ = 2048;
    active_seeds_ = 32000;
    active_limit_ = 32000;
    active_downloads_ = 32000;
    suggest_mode_ = true;
    listen_port_ = 18000;
    peer_connection_timeout_ = 3;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    disable_os_cache_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 timeout = 1 [default = -1];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_upload_rate_limit;
        break;
      }
      
      // required int32 upload_rate_limit = 2 [default = 100];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_upload_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &upload_rate_limit_)));
          set_has_upload_rate_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_download_rate_limit;
        break;
      }
      
      // required int32 download_rate_limit = 3 [default = 100];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_download_rate_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &download_rate_limit_)));
          set_has_download_rate_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_connection_limit;
        break;
      }
      
      // required int32 connection_limit = 4 [default = 8000];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_connection_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &connection_limit_)));
          set_has_connection_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_finished_timeout;
        break;
      }
      
      // optional int32 finished_timeout = 5 [default = 3600];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finished_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finished_timeout_)));
          set_has_finished_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_max_cluster_thread_num;
        break;
      }
      
      // optional int32 max_cluster_thread_num = 6 [default = 10];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_cluster_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_cluster_thread_num_)));
          set_has_max_cluster_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_is_allow_all_add;
        break;
      }
      
      // optional bool is_allow_all_add = 7 [default = false];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_allow_all_add:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_allow_all_add_)));
          set_has_is_allow_all_add();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_absolute_path;
        break;
      }
      
      // optional string absolute_path = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_absolute_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_absolute_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->absolute_path().data(), this->absolute_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_group_data_path;
        break;
      }
      
      // optional string group_data_path = 12 [default = "/bbts-group-data"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_group_data_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_data_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->group_data_path().data(), this->group_data_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_log_file;
        break;
      }
      
      // optional string log_file = 13 [default = "bbts-group.log"];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_file().data(), this->log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_resume_dir;
        break;
      }
      
      // optional string resume_dir = 14 [default = "bbts-group.resume"];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_resume_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_resume_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->resume_dir().data(), this->resume_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_lock_file;
        break;
      }
      
      // optional string lock_file = 15 [default = "bbts-group.lock"];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lock_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lock_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lock_file().data(), this->lock_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_unix_socket;
        break;
      }
      
      // optional string unix_socket = 16 [default = "bbts-group.sock"];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_unix_socket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unix_socket()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->unix_socket().data(), this->unix_socket().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_peer_stat_log_file;
        break;
      }
      
      // optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_peer_stat_log_file:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_peer_stat_log_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->peer_stat_log_file().data(), this->peer_stat_log_file().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_max_metadata_size;
        break;
      }
      
      // optional int32 max_metadata_size = 31 [default = 50];
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_metadata_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_metadata_size_)));
          set_has_max_metadata_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_peers_num_want;
        break;
      }
      
      // optional int32 peers_num_want = 32 [default = 25];
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peers_num_want:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peers_num_want_)));
          set_has_peers_num_want();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_disk_io_read_mode;
        break;
      }
      
      // optional bool disk_io_read_mode = 33 [default = true];
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_io_read_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disk_io_read_mode_)));
          set_has_disk_io_read_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_disk_io_write_mode;
        break;
      }
      
      // optional bool disk_io_write_mode = 34 [default = true];
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disk_io_write_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disk_io_write_mode_)));
          set_has_disk_io_write_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_seed_announce_interval;
        break;
      }
      
      // optional int32 seed_announce_interval = 35 [default = 1800];
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seed_announce_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seed_announce_interval_)));
          set_has_seed_announce_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_min_reconnect_time;
        break;
      }
      
      // optional int32 min_reconnect_time = 36 [default = 1];
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_min_reconnect_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &min_reconnect_time_)));
          set_has_min_reconnect_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_max_queued_disk_bytes;
        break;
      }
      
      // optional int32 max_queued_disk_bytes = 37 [default = 20];
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_queued_disk_bytes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queued_disk_bytes_)));
          set_has_max_queued_disk_bytes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_max_out_request_queue;
        break;
      }
      
      // optional int32 max_out_request_queue = 38 [default = 1500];
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_out_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_out_request_queue_)));
          set_has_max_out_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_max_allowed_in_request_queue;
        break;
      }
      
      // optional int32 max_allowed_in_request_queue = 39 [default = 2000];
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_max_allowed_in_request_queue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_allowed_in_request_queue_)));
          set_has_max_allowed_in_request_queue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_whole_pieces_threshold;
        break;
      }
      
      // optional int32 whole_pieces_threshold = 40 [default = 20];
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_whole_pieces_threshold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &whole_pieces_threshold_)));
          set_has_whole_pieces_threshold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_request_queue_time;
        break;
      }
      
      // optional int32 request_queue_time = 41 [default = 3];
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_queue_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_queue_time_)));
          set_has_request_queue_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_cache_size;
        break;
      }
      
      // optional int32 cache_size = 42 [default = 128];
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_size_)));
          set_has_cache_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_cache_expiry;
        break;
      }
      
      // optional int32 cache_expiry = 43 [default = 300];
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cache_expiry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cache_expiry_)));
          set_has_cache_expiry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_read_cache_line_size;
        break;
      }
      
      // optional int32 read_cache_line_size = 44 [default = 32];
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_read_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &read_cache_line_size_)));
          set_has_read_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_write_cache_line_size;
        break;
      }
      
      // optional int32 write_cache_line_size = 45 [default = 32];
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_write_cache_line_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &write_cache_line_size_)));
          set_has_write_cache_line_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_file_pool_size;
        break;
      }
      
      // optional int32 file_pool_size = 46 [default = 500];
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_file_pool_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &file_pool_size_)));
          set_has_file_pool_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_send_buffer_watermark;
        break;
      }
      
      // optional int32 send_buffer_watermark = 47 [default = 10];
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_watermark_)));
          set_has_send_buffer_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_send_buffer_low_watermark;
        break;
      }
      
      // optional int32 send_buffer_low_watermark = 48 [default = 1024];
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_buffer_low_watermark:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_buffer_low_watermark_)));
          set_has_send_buffer_low_watermark();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_send_socket_buffer_size;
        break;
      }
      
      // optional int32 send_socket_buffer_size = 49 [default = 2048];
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_send_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &send_socket_buffer_size_)));
          set_has_send_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_recv_socket_buffer_size;
        break;
      }
      
      // optional int32 recv_socket_buffer_size = 50 [default = 2048];
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recv_socket_buffer_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recv_socket_buffer_size_)));
          set_has_recv_socket_buffer_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_active_seeds;
        break;
      }
      
      // optional int32 active_seeds = 51 [default = 32000];
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_seeds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_seeds_)));
          set_has_active_seeds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_active_limit;
        break;
      }
      
      // optional int32 active_limit = 52 [default = 32000];
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_limit_)));
          set_has_active_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_active_downloads;
        break;
      }
      
      // optional int32 active_downloads = 53 [default = 32000];
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_active_downloads:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_downloads_)));
          set_has_active_downloads();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_suggest_mode;
        break;
      }
      
      // optional bool suggest_mode = 54 [default = true];
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suggest_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &suggest_mode_)));
          set_has_suggest_mode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_listen_port;
        break;
      }
      
      // optional int32 listen_port = 55 [default = 18000];
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_listen_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &listen_port_)));
          set_has_listen_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_peer_connection_timeout;
        break;
      }
      
      // optional int32 peer_connection_timeout = 56 [default = 3];
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_peer_connection_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peer_connection_timeout_)));
          set_has_peer_connection_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_disable_os_cache;
        break;
      }
      
      // optional bool disable_os_cache = 57 [default = false];
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_disable_os_cache:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_os_cache_)));
          set_has_disable_os_cache();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 timeout = 1 [default = -1];
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timeout(), output);
  }
  
  // required int32 upload_rate_limit = 2 [default = 100];
  if (has_upload_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->upload_rate_limit(), output);
  }
  
  // required int32 download_rate_limit = 3 [default = 100];
  if (has_download_rate_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->download_rate_limit(), output);
  }
  
  // required int32 connection_limit = 4 [default = 8000];
  if (has_connection_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->connection_limit(), output);
  }
  
  // optional int32 finished_timeout = 5 [default = 3600];
  if (has_finished_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->finished_timeout(), output);
  }
  
  // optional int32 max_cluster_thread_num = 6 [default = 10];
  if (has_max_cluster_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->max_cluster_thread_num(), output);
  }
  
  // optional bool is_allow_all_add = 7 [default = false];
  if (has_is_allow_all_add()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->is_allow_all_add(), output);
  }
  
  // optional string absolute_path = 11;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->absolute_path(), output);
  }
  
  // optional string group_data_path = 12 [default = "/bbts-group-data"];
  if (has_group_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_data_path().data(), this->group_data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->group_data_path(), output);
  }
  
  // optional string log_file = 13 [default = "bbts-group.log"];
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->log_file(), output);
  }
  
  // optional string resume_dir = 14 [default = "bbts-group.resume"];
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      14, this->resume_dir(), output);
  }
  
  // optional string lock_file = 15 [default = "bbts-group.lock"];
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->lock_file(), output);
  }
  
  // optional string unix_socket = 16 [default = "bbts-group.sock"];
  if (has_unix_socket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unix_socket().data(), this->unix_socket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      16, this->unix_socket(), output);
  }
  
  // optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
  if (has_peer_stat_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_log_file().data(), this->peer_stat_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      17, this->peer_stat_log_file(), output);
  }
  
  // optional int32 max_metadata_size = 31 [default = 50];
  if (has_max_metadata_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->max_metadata_size(), output);
  }
  
  // optional int32 peers_num_want = 32 [default = 25];
  if (has_peers_num_want()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->peers_num_want(), output);
  }
  
  // optional bool disk_io_read_mode = 33 [default = true];
  if (has_disk_io_read_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(33, this->disk_io_read_mode(), output);
  }
  
  // optional bool disk_io_write_mode = 34 [default = true];
  if (has_disk_io_write_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->disk_io_write_mode(), output);
  }
  
  // optional int32 seed_announce_interval = 35 [default = 1800];
  if (has_seed_announce_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->seed_announce_interval(), output);
  }
  
  // optional int32 min_reconnect_time = 36 [default = 1];
  if (has_min_reconnect_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->min_reconnect_time(), output);
  }
  
  // optional int32 max_queued_disk_bytes = 37 [default = 20];
  if (has_max_queued_disk_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->max_queued_disk_bytes(), output);
  }
  
  // optional int32 max_out_request_queue = 38 [default = 1500];
  if (has_max_out_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->max_out_request_queue(), output);
  }
  
  // optional int32 max_allowed_in_request_queue = 39 [default = 2000];
  if (has_max_allowed_in_request_queue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->max_allowed_in_request_queue(), output);
  }
  
  // optional int32 whole_pieces_threshold = 40 [default = 20];
  if (has_whole_pieces_threshold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->whole_pieces_threshold(), output);
  }
  
  // optional int32 request_queue_time = 41 [default = 3];
  if (has_request_queue_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->request_queue_time(), output);
  }
  
  // optional int32 cache_size = 42 [default = 128];
  if (has_cache_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->cache_size(), output);
  }
  
  // optional int32 cache_expiry = 43 [default = 300];
  if (has_cache_expiry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->cache_expiry(), output);
  }
  
  // optional int32 read_cache_line_size = 44 [default = 32];
  if (has_read_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->read_cache_line_size(), output);
  }
  
  // optional int32 write_cache_line_size = 45 [default = 32];
  if (has_write_cache_line_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->write_cache_line_size(), output);
  }
  
  // optional int32 file_pool_size = 46 [default = 500];
  if (has_file_pool_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->file_pool_size(), output);
  }
  
  // optional int32 send_buffer_watermark = 47 [default = 10];
  if (has_send_buffer_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->send_buffer_watermark(), output);
  }
  
  // optional int32 send_buffer_low_watermark = 48 [default = 1024];
  if (has_send_buffer_low_watermark()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->send_buffer_low_watermark(), output);
  }
  
  // optional int32 send_socket_buffer_size = 49 [default = 2048];
  if (has_send_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->send_socket_buffer_size(), output);
  }
  
  // optional int32 recv_socket_buffer_size = 50 [default = 2048];
  if (has_recv_socket_buffer_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->recv_socket_buffer_size(), output);
  }
  
  // optional int32 active_seeds = 51 [default = 32000];
  if (has_active_seeds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->active_seeds(), output);
  }
  
  // optional int32 active_limit = 52 [default = 32000];
  if (has_active_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->active_limit(), output);
  }
  
  // optional int32 active_downloads = 53 [default = 32000];
  if (has_active_downloads()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->active_downloads(), output);
  }
  
  // optional bool suggest_mode = 54 [default = true];
  if (has_suggest_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(54, this->suggest_mode(), output);
  }
  
  // optional int32 listen_port = 55 [default = 18000];
  if (has_listen_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->listen_port(), output);
  }
  
  // optional int32 peer_connection_timeout = 56 [default = 3];
  if (has_peer_connection_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->peer_connection_timeout(), output);
  }
  
  // optional bool disable_os_cache = 57 [default = false];
  if (has_disable_os_cache()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->disable_os_cache(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 timeout = 1 [default = -1];
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->timeout(), target);
  }
  
  // required int32 upload_rate_limit = 2 [default = 100];
  if (has_upload_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->upload_rate_limit(), target);
  }
  
  // required int32 download_rate_limit = 3 [default = 100];
  if (has_download_rate_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->download_rate_limit(), target);
  }
  
  // required int32 connection_limit = 4 [default = 8000];
  if (has_connection_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->connection_limit(), target);
  }
  
  // optional int32 finished_timeout = 5 [default = 3600];
  if (has_finished_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->finished_timeout(), target);
  }
  
  // optional int32 max_cluster_thread_num = 6 [default = 10];
  if (has_max_cluster_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->max_cluster_thread_num(), target);
  }
  
  // optional bool is_allow_all_add = 7 [default = false];
  if (has_is_allow_all_add()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->is_allow_all_add(), target);
  }
  
  // optional string absolute_path = 11;
  if (has_absolute_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->absolute_path().data(), this->absolute_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->absolute_path(), target);
  }
  
  // optional string group_data_path = 12 [default = "/bbts-group-data"];
  if (has_group_data_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->group_data_path().data(), this->group_data_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->group_data_path(), target);
  }
  
  // optional string log_file = 13 [default = "bbts-group.log"];
  if (has_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_file().data(), this->log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->log_file(), target);
  }
  
  // optional string resume_dir = 14 [default = "bbts-group.resume"];
  if (has_resume_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->resume_dir().data(), this->resume_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->resume_dir(), target);
  }
  
  // optional string lock_file = 15 [default = "bbts-group.lock"];
  if (has_lock_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lock_file().data(), this->lock_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->lock_file(), target);
  }
  
  // optional string unix_socket = 16 [default = "bbts-group.sock"];
  if (has_unix_socket()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->unix_socket().data(), this->unix_socket().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->unix_socket(), target);
  }
  
  // optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
  if (has_peer_stat_log_file()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->peer_stat_log_file().data(), this->peer_stat_log_file().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->peer_stat_log_file(), target);
  }
  
  // optional int32 max_metadata_size = 31 [default = 50];
  if (has_max_metadata_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->max_metadata_size(), target);
  }
  
  // optional int32 peers_num_want = 32 [default = 25];
  if (has_peers_num_want()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->peers_num_want(), target);
  }
  
  // optional bool disk_io_read_mode = 33 [default = true];
  if (has_disk_io_read_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(33, this->disk_io_read_mode(), target);
  }
  
  // optional bool disk_io_write_mode = 34 [default = true];
  if (has_disk_io_write_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(34, this->disk_io_write_mode(), target);
  }
  
  // optional int32 seed_announce_interval = 35 [default = 1800];
  if (has_seed_announce_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->seed_announce_interval(), target);
  }
  
  // optional int32 min_reconnect_time = 36 [default = 1];
  if (has_min_reconnect_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->min_reconnect_time(), target);
  }
  
  // optional int32 max_queued_disk_bytes = 37 [default = 20];
  if (has_max_queued_disk_bytes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->max_queued_disk_bytes(), target);
  }
  
  // optional int32 max_out_request_queue = 38 [default = 1500];
  if (has_max_out_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->max_out_request_queue(), target);
  }
  
  // optional int32 max_allowed_in_request_queue = 39 [default = 2000];
  if (has_max_allowed_in_request_queue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->max_allowed_in_request_queue(), target);
  }
  
  // optional int32 whole_pieces_threshold = 40 [default = 20];
  if (has_whole_pieces_threshold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->whole_pieces_threshold(), target);
  }
  
  // optional int32 request_queue_time = 41 [default = 3];
  if (has_request_queue_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->request_queue_time(), target);
  }
  
  // optional int32 cache_size = 42 [default = 128];
  if (has_cache_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->cache_size(), target);
  }
  
  // optional int32 cache_expiry = 43 [default = 300];
  if (has_cache_expiry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->cache_expiry(), target);
  }
  
  // optional int32 read_cache_line_size = 44 [default = 32];
  if (has_read_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->read_cache_line_size(), target);
  }
  
  // optional int32 write_cache_line_size = 45 [default = 32];
  if (has_write_cache_line_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->write_cache_line_size(), target);
  }
  
  // optional int32 file_pool_size = 46 [default = 500];
  if (has_file_pool_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->file_pool_size(), target);
  }
  
  // optional int32 send_buffer_watermark = 47 [default = 10];
  if (has_send_buffer_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->send_buffer_watermark(), target);
  }
  
  // optional int32 send_buffer_low_watermark = 48 [default = 1024];
  if (has_send_buffer_low_watermark()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->send_buffer_low_watermark(), target);
  }
  
  // optional int32 send_socket_buffer_size = 49 [default = 2048];
  if (has_send_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->send_socket_buffer_size(), target);
  }
  
  // optional int32 recv_socket_buffer_size = 50 [default = 2048];
  if (has_recv_socket_buffer_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->recv_socket_buffer_size(), target);
  }
  
  // optional int32 active_seeds = 51 [default = 32000];
  if (has_active_seeds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->active_seeds(), target);
  }
  
  // optional int32 active_limit = 52 [default = 32000];
  if (has_active_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->active_limit(), target);
  }
  
  // optional int32 active_downloads = 53 [default = 32000];
  if (has_active_downloads()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->active_downloads(), target);
  }
  
  // optional bool suggest_mode = 54 [default = true];
  if (has_suggest_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(54, this->suggest_mode(), target);
  }
  
  // optional int32 listen_port = 55 [default = 18000];
  if (has_listen_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->listen_port(), target);
  }
  
  // optional int32 peer_connection_timeout = 56 [default = 3];
  if (has_peer_connection_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->peer_connection_timeout(), target);
  }
  
  // optional bool disable_os_cache = 57 [default = false];
  if (has_disable_os_cache()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(57, this->disable_os_cache(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupConfig::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 timeout = 1 [default = -1];
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // required int32 upload_rate_limit = 2 [default = 100];
    if (has_upload_rate_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->upload_rate_limit());
    }
    
    // required int32 download_rate_limit = 3 [default = 100];
    if (has_download_rate_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->download_rate_limit());
    }
    
    // required int32 connection_limit = 4 [default = 8000];
    if (has_connection_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->connection_limit());
    }
    
    // optional int32 finished_timeout = 5 [default = 3600];
    if (has_finished_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finished_timeout());
    }
    
    // optional int32 max_cluster_thread_num = 6 [default = 10];
    if (has_max_cluster_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_cluster_thread_num());
    }
    
    // optional bool is_allow_all_add = 7 [default = false];
    if (has_is_allow_all_add()) {
      total_size += 1 + 1;
    }
    
    // optional string absolute_path = 11;
    if (has_absolute_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->absolute_path());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string group_data_path = 12 [default = "/bbts-group-data"];
    if (has_group_data_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_data_path());
    }
    
    // optional string log_file = 13 [default = "bbts-group.log"];
    if (has_log_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_file());
    }
    
    // optional string resume_dir = 14 [default = "bbts-group.resume"];
    if (has_resume_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->resume_dir());
    }
    
    // optional string lock_file = 15 [default = "bbts-group.lock"];
    if (has_lock_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lock_file());
    }
    
    // optional string unix_socket = 16 [default = "bbts-group.sock"];
    if (has_unix_socket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->unix_socket());
    }
    
    // optional string peer_stat_log_file = 17 [default = "bbts-group.peer"];
    if (has_peer_stat_log_file()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->peer_stat_log_file());
    }
    
    // optional int32 max_metadata_size = 31 [default = 50];
    if (has_max_metadata_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_metadata_size());
    }
    
    // optional int32 peers_num_want = 32 [default = 25];
    if (has_peers_num_want()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peers_num_want());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool disk_io_read_mode = 33 [default = true];
    if (has_disk_io_read_mode()) {
      total_size += 2 + 1;
    }
    
    // optional bool disk_io_write_mode = 34 [default = true];
    if (has_disk_io_write_mode()) {
      total_size += 2 + 1;
    }
    
    // optional int32 seed_announce_interval = 35 [default = 1800];
    if (has_seed_announce_interval()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seed_announce_interval());
    }
    
    // optional int32 min_reconnect_time = 36 [default = 1];
    if (has_min_reconnect_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->min_reconnect_time());
    }
    
    // optional int32 max_queued_disk_bytes = 37 [default = 20];
    if (has_max_queued_disk_bytes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queued_disk_bytes());
    }
    
    // optional int32 max_out_request_queue = 38 [default = 1500];
    if (has_max_out_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_out_request_queue());
    }
    
    // optional int32 max_allowed_in_request_queue = 39 [default = 2000];
    if (has_max_allowed_in_request_queue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_allowed_in_request_queue());
    }
    
    // optional int32 whole_pieces_threshold = 40 [default = 20];
    if (has_whole_pieces_threshold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->whole_pieces_threshold());
    }
    
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 request_queue_time = 41 [default = 3];
    if (has_request_queue_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_queue_time());
    }
    
    // optional int32 cache_size = 42 [default = 128];
    if (has_cache_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_size());
    }
    
    // optional int32 cache_expiry = 43 [default = 300];
    if (has_cache_expiry()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cache_expiry());
    }
    
    // optional int32 read_cache_line_size = 44 [default = 32];
    if (has_read_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->read_cache_line_size());
    }
    
    // optional int32 write_cache_line_size = 45 [default = 32];
    if (has_write_cache_line_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->write_cache_line_size());
    }
    
    // optional int32 file_pool_size = 46 [default = 500];
    if (has_file_pool_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->file_pool_size());
    }
    
    // optional int32 send_buffer_watermark = 47 [default = 10];
    if (has_send_buffer_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_watermark());
    }
    
    // optional int32 send_buffer_low_watermark = 48 [default = 1024];
    if (has_send_buffer_low_watermark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_buffer_low_watermark());
    }
    
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 send_socket_buffer_size = 49 [default = 2048];
    if (has_send_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->send_socket_buffer_size());
    }
    
    // optional int32 recv_socket_buffer_size = 50 [default = 2048];
    if (has_recv_socket_buffer_size()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recv_socket_buffer_size());
    }
    
    // optional int32 active_seeds = 51 [default = 32000];
    if (has_active_seeds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_seeds());
    }
    
    // optional int32 active_limit = 52 [default = 32000];
    if (has_active_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_limit());
    }
    
    // optional int32 active_downloads = 53 [default = 32000];
    if (has_active_downloads()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_downloads());
    }
    
    // optional bool suggest_mode = 54 [default = true];
    if (has_suggest_mode()) {
      total_size += 2 + 1;
    }
    
    // optional int32 listen_port = 55 [default = 18000];
    if (has_listen_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->listen_port());
    }
    
    // optional int32 peer_connection_timeout = 56 [default = 3];
    if (has_peer_connection_timeout()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->peer_connection_timeout());
    }
    
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional bool disable_os_cache = 57 [default = false];
    if (has_disable_os_cache()) {
      total_size += 2 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupConfig::MergeFrom(const GroupConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_upload_rate_limit()) {
      set_upload_rate_limit(from.upload_rate_limit());
    }
    if (from.has_download_rate_limit()) {
      set_download_rate_limit(from.download_rate_limit());
    }
    if (from.has_connection_limit()) {
      set_connection_limit(from.connection_limit());
    }
    if (from.has_finished_timeout()) {
      set_finished_timeout(from.finished_timeout());
    }
    if (from.has_max_cluster_thread_num()) {
      set_max_cluster_thread_num(from.max_cluster_thread_num());
    }
    if (from.has_is_allow_all_add()) {
      set_is_allow_all_add(from.is_allow_all_add());
    }
    if (from.has_absolute_path()) {
      set_absolute_path(from.absolute_path());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group_data_path()) {
      set_group_data_path(from.group_data_path());
    }
    if (from.has_log_file()) {
      set_log_file(from.log_file());
    }
    if (from.has_resume_dir()) {
      set_resume_dir(from.resume_dir());
    }
    if (from.has_lock_file()) {
      set_lock_file(from.lock_file());
    }
    if (from.has_unix_socket()) {
      set_unix_socket(from.unix_socket());
    }
    if (from.has_peer_stat_log_file()) {
      set_peer_stat_log_file(from.peer_stat_log_file());
    }
    if (from.has_max_metadata_size()) {
      set_max_metadata_size(from.max_metadata_size());
    }
    if (from.has_peers_num_want()) {
      set_peers_num_want(from.peers_num_want());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_disk_io_read_mode()) {
      set_disk_io_read_mode(from.disk_io_read_mode());
    }
    if (from.has_disk_io_write_mode()) {
      set_disk_io_write_mode(from.disk_io_write_mode());
    }
    if (from.has_seed_announce_interval()) {
      set_seed_announce_interval(from.seed_announce_interval());
    }
    if (from.has_min_reconnect_time()) {
      set_min_reconnect_time(from.min_reconnect_time());
    }
    if (from.has_max_queued_disk_bytes()) {
      set_max_queued_disk_bytes(from.max_queued_disk_bytes());
    }
    if (from.has_max_out_request_queue()) {
      set_max_out_request_queue(from.max_out_request_queue());
    }
    if (from.has_max_allowed_in_request_queue()) {
      set_max_allowed_in_request_queue(from.max_allowed_in_request_queue());
    }
    if (from.has_whole_pieces_threshold()) {
      set_whole_pieces_threshold(from.whole_pieces_threshold());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_request_queue_time()) {
      set_request_queue_time(from.request_queue_time());
    }
    if (from.has_cache_size()) {
      set_cache_size(from.cache_size());
    }
    if (from.has_cache_expiry()) {
      set_cache_expiry(from.cache_expiry());
    }
    if (from.has_read_cache_line_size()) {
      set_read_cache_line_size(from.read_cache_line_size());
    }
    if (from.has_write_cache_line_size()) {
      set_write_cache_line_size(from.write_cache_line_size());
    }
    if (from.has_file_pool_size()) {
      set_file_pool_size(from.file_pool_size());
    }
    if (from.has_send_buffer_watermark()) {
      set_send_buffer_watermark(from.send_buffer_watermark());
    }
    if (from.has_send_buffer_low_watermark()) {
      set_send_buffer_low_watermark(from.send_buffer_low_watermark());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_send_socket_buffer_size()) {
      set_send_socket_buffer_size(from.send_socket_buffer_size());
    }
    if (from.has_recv_socket_buffer_size()) {
      set_recv_socket_buffer_size(from.recv_socket_buffer_size());
    }
    if (from.has_active_seeds()) {
      set_active_seeds(from.active_seeds());
    }
    if (from.has_active_limit()) {
      set_active_limit(from.active_limit());
    }
    if (from.has_active_downloads()) {
      set_active_downloads(from.active_downloads());
    }
    if (from.has_suggest_mode()) {
      set_suggest_mode(from.suggest_mode());
    }
    if (from.has_listen_port()) {
      set_listen_port(from.listen_port());
    }
    if (from.has_peer_connection_timeout()) {
      set_peer_connection_timeout(from.peer_connection_timeout());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_disable_os_cache()) {
      set_disable_os_cache(from.disable_os_cache());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupConfig::CopyFrom(const GroupConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void GroupConfig::Swap(GroupConfig* other) {
  if (other != this) {
    std::swap(timeout_, other->timeout_);
    std::swap(upload_rate_limit_, other->upload_rate_limit_);
    std::swap(download_rate_limit_, other->download_rate_limit_);
    std::swap(connection_limit_, other->connection_limit_);
    std::swap(finished_timeout_, other->finished_timeout_);
    std::swap(max_cluster_thread_num_, other->max_cluster_thread_num_);
    std::swap(is_allow_all_add_, other->is_allow_all_add_);
    std::swap(absolute_path_, other->absolute_path_);
    std::swap(group_data_path_, other->group_data_path_);
    std::swap(log_file_, other->log_file_);
    std::swap(resume_dir_, other->resume_dir_);
    std::swap(lock_file_, other->lock_file_);
    std::swap(unix_socket_, other->unix_socket_);
    std::swap(peer_stat_log_file_, other->peer_stat_log_file_);
    std::swap(max_metadata_size_, other->max_metadata_size_);
    std::swap(peers_num_want_, other->peers_num_want_);
    std::swap(disk_io_read_mode_, other->disk_io_read_mode_);
    std::swap(disk_io_write_mode_, other->disk_io_write_mode_);
    std::swap(seed_announce_interval_, other->seed_announce_interval_);
    std::swap(min_reconnect_time_, other->min_reconnect_time_);
    std::swap(max_queued_disk_bytes_, other->max_queued_disk_bytes_);
    std::swap(max_out_request_queue_, other->max_out_request_queue_);
    std::swap(max_allowed_in_request_queue_, other->max_allowed_in_request_queue_);
    std::swap(whole_pieces_threshold_, other->whole_pieces_threshold_);
    std::swap(request_queue_time_, other->request_queue_time_);
    std::swap(cache_size_, other->cache_size_);
    std::swap(cache_expiry_, other->cache_expiry_);
    std::swap(read_cache_line_size_, other->read_cache_line_size_);
    std::swap(write_cache_line_size_, other->write_cache_line_size_);
    std::swap(file_pool_size_, other->file_pool_size_);
    std::swap(send_buffer_watermark_, other->send_buffer_watermark_);
    std::swap(send_buffer_low_watermark_, other->send_buffer_low_watermark_);
    std::swap(send_socket_buffer_size_, other->send_socket_buffer_size_);
    std::swap(recv_socket_buffer_size_, other->recv_socket_buffer_size_);
    std::swap(active_seeds_, other->active_seeds_);
    std::swap(active_limit_, other->active_limit_);
    std::swap(active_downloads_, other->active_downloads_);
    std::swap(suggest_mode_, other->suggest_mode_);
    std::swap(listen_port_, other->listen_port_);
    std::swap(peer_connection_timeout_, other->peer_connection_timeout_);
    std::swap(disable_os_cache_, other->disable_os_cache_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupConfig_descriptor_;
  metadata.reflection = GroupConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

// @@protoc_insertion_point(global_scope)
