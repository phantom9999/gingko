/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef GroupManagerService_H
#define GroupManagerService_H

#include <stdint.h>
#include <thrift/TDispatchProcessor.h>
#include "GroupService_types.h"

namespace bbts { namespace group {

class GroupManagerServiceIf {
 public:
  virtual ~GroupManagerServiceIf() {}
  virtual void AddGroupTask(GeneralResponse& _return, const DownloadParam& down_params, const UserCred& cred) = 0;
  virtual void GetTaskStatus(std::vector<TaskStatus> & _return, const std::string& infohash, const bool is_full) = 0;
  virtual void ControlTask(GeneralResponse& _return, const std::string& infohash, const bool is_all, const ControlTaskType::type type, const UserCred& cred) = 0;
  virtual void SetTaskOption(GeneralResponse& _return, const TaskOptions& options) = 0;
  virtual void GetTaskOption(std::vector<TaskOptions> & _return, const std::string& infohash) = 0;
};

class GroupManagerServiceIfFactory {
 public:
  typedef GroupManagerServiceIf Handler;

  virtual ~GroupManagerServiceIfFactory() {}

  virtual GroupManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(GroupManagerServiceIf* /* handler */) = 0;
};

class GroupManagerServiceIfSingletonFactory : virtual public GroupManagerServiceIfFactory {
 public:
  GroupManagerServiceIfSingletonFactory(const boost::shared_ptr<GroupManagerServiceIf>& iface) : iface_(iface) {}
  virtual ~GroupManagerServiceIfSingletonFactory() {}

  virtual GroupManagerServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(GroupManagerServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<GroupManagerServiceIf> iface_;
};

class GroupManagerServiceNull : virtual public GroupManagerServiceIf {
 public:
  virtual ~GroupManagerServiceNull() {}
  void AddGroupTask(GeneralResponse& /* _return */, const DownloadParam& /* down_params */, const UserCred& /* cred */) {
    return;
  }
  void GetTaskStatus(std::vector<TaskStatus> & /* _return */, const std::string& /* infohash */, const bool /* is_full */) {
    return;
  }
  void ControlTask(GeneralResponse& /* _return */, const std::string& /* infohash */, const bool /* is_all */, const ControlTaskType::type /* type */, const UserCred& /* cred */) {
    return;
  }
  void SetTaskOption(GeneralResponse& /* _return */, const TaskOptions& /* options */) {
    return;
  }
  void GetTaskOption(std::vector<TaskOptions> & /* _return */, const std::string& /* infohash */) {
    return;
  }
};

typedef struct _GroupManagerService_AddGroupTask_args__isset {
  _GroupManagerService_AddGroupTask_args__isset() : down_params(false), cred(false) {}
  bool down_params;
  bool cred;
} _GroupManagerService_AddGroupTask_args__isset;

class GroupManagerService_AddGroupTask_args {
 public:

  GroupManagerService_AddGroupTask_args() {
  }

  virtual ~GroupManagerService_AddGroupTask_args() throw() {}

  DownloadParam down_params;
  UserCred cred;

  _GroupManagerService_AddGroupTask_args__isset __isset;

  void __set_down_params(const DownloadParam& val) {
    down_params = val;
  }

  void __set_cred(const UserCred& val) {
    cred = val;
  }

  bool operator == (const GroupManagerService_AddGroupTask_args & rhs) const
  {
    if (!(down_params == rhs.down_params))
      return false;
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_AddGroupTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_AddGroupTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GroupManagerService_AddGroupTask_pargs {
 public:


  virtual ~GroupManagerService_AddGroupTask_pargs() throw() {}

  const DownloadParam* down_params;
  const UserCred* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_AddGroupTask_result__isset {
  _GroupManagerService_AddGroupTask_result__isset() : success(false) {}
  bool success;
} _GroupManagerService_AddGroupTask_result__isset;

class GroupManagerService_AddGroupTask_result {
 public:

  GroupManagerService_AddGroupTask_result() {
  }

  virtual ~GroupManagerService_AddGroupTask_result() throw() {}

  GeneralResponse success;

  _GroupManagerService_AddGroupTask_result__isset __isset;

  void __set_success(const GeneralResponse& val) {
    success = val;
  }

  bool operator == (const GroupManagerService_AddGroupTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_AddGroupTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_AddGroupTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_AddGroupTask_presult__isset {
  _GroupManagerService_AddGroupTask_presult__isset() : success(false) {}
  bool success;
} _GroupManagerService_AddGroupTask_presult__isset;

class GroupManagerService_AddGroupTask_presult {
 public:


  virtual ~GroupManagerService_AddGroupTask_presult() throw() {}

  GeneralResponse* success;

  _GroupManagerService_AddGroupTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GroupManagerService_GetTaskStatus_args__isset {
  _GroupManagerService_GetTaskStatus_args__isset() : infohash(false), is_full(false) {}
  bool infohash;
  bool is_full;
} _GroupManagerService_GetTaskStatus_args__isset;

class GroupManagerService_GetTaskStatus_args {
 public:

  GroupManagerService_GetTaskStatus_args() : infohash(), is_full(0) {
  }

  virtual ~GroupManagerService_GetTaskStatus_args() throw() {}

  std::string infohash;
  bool is_full;

  _GroupManagerService_GetTaskStatus_args__isset __isset;

  void __set_infohash(const std::string& val) {
    infohash = val;
  }

  void __set_is_full(const bool val) {
    is_full = val;
  }

  bool operator == (const GroupManagerService_GetTaskStatus_args & rhs) const
  {
    if (!(infohash == rhs.infohash))
      return false;
    if (!(is_full == rhs.is_full))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_GetTaskStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_GetTaskStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GroupManagerService_GetTaskStatus_pargs {
 public:


  virtual ~GroupManagerService_GetTaskStatus_pargs() throw() {}

  const std::string* infohash;
  const bool* is_full;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_GetTaskStatus_result__isset {
  _GroupManagerService_GetTaskStatus_result__isset() : success(false) {}
  bool success;
} _GroupManagerService_GetTaskStatus_result__isset;

class GroupManagerService_GetTaskStatus_result {
 public:

  GroupManagerService_GetTaskStatus_result() {
  }

  virtual ~GroupManagerService_GetTaskStatus_result() throw() {}

  std::vector<TaskStatus>  success;

  _GroupManagerService_GetTaskStatus_result__isset __isset;

  void __set_success(const std::vector<TaskStatus> & val) {
    success = val;
  }

  bool operator == (const GroupManagerService_GetTaskStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_GetTaskStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_GetTaskStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_GetTaskStatus_presult__isset {
  _GroupManagerService_GetTaskStatus_presult__isset() : success(false) {}
  bool success;
} _GroupManagerService_GetTaskStatus_presult__isset;

class GroupManagerService_GetTaskStatus_presult {
 public:


  virtual ~GroupManagerService_GetTaskStatus_presult() throw() {}

  std::vector<TaskStatus> * success;

  _GroupManagerService_GetTaskStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GroupManagerService_ControlTask_args__isset {
  _GroupManagerService_ControlTask_args__isset() : infohash(false), is_all(false), type(false), cred(false) {}
  bool infohash;
  bool is_all;
  bool type;
  bool cred;
} _GroupManagerService_ControlTask_args__isset;

class GroupManagerService_ControlTask_args {
 public:

  GroupManagerService_ControlTask_args() : infohash(), is_all(0), type((ControlTaskType::type)0) {
  }

  virtual ~GroupManagerService_ControlTask_args() throw() {}

  std::string infohash;
  bool is_all;
  ControlTaskType::type type;
  UserCred cred;

  _GroupManagerService_ControlTask_args__isset __isset;

  void __set_infohash(const std::string& val) {
    infohash = val;
  }

  void __set_is_all(const bool val) {
    is_all = val;
  }

  void __set_type(const ControlTaskType::type val) {
    type = val;
  }

  void __set_cred(const UserCred& val) {
    cred = val;
  }

  bool operator == (const GroupManagerService_ControlTask_args & rhs) const
  {
    if (!(infohash == rhs.infohash))
      return false;
    if (!(is_all == rhs.is_all))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(cred == rhs.cred))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_ControlTask_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_ControlTask_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GroupManagerService_ControlTask_pargs {
 public:


  virtual ~GroupManagerService_ControlTask_pargs() throw() {}

  const std::string* infohash;
  const bool* is_all;
  const ControlTaskType::type* type;
  const UserCred* cred;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_ControlTask_result__isset {
  _GroupManagerService_ControlTask_result__isset() : success(false) {}
  bool success;
} _GroupManagerService_ControlTask_result__isset;

class GroupManagerService_ControlTask_result {
 public:

  GroupManagerService_ControlTask_result() {
  }

  virtual ~GroupManagerService_ControlTask_result() throw() {}

  GeneralResponse success;

  _GroupManagerService_ControlTask_result__isset __isset;

  void __set_success(const GeneralResponse& val) {
    success = val;
  }

  bool operator == (const GroupManagerService_ControlTask_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_ControlTask_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_ControlTask_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_ControlTask_presult__isset {
  _GroupManagerService_ControlTask_presult__isset() : success(false) {}
  bool success;
} _GroupManagerService_ControlTask_presult__isset;

class GroupManagerService_ControlTask_presult {
 public:


  virtual ~GroupManagerService_ControlTask_presult() throw() {}

  GeneralResponse* success;

  _GroupManagerService_ControlTask_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GroupManagerService_SetTaskOption_args__isset {
  _GroupManagerService_SetTaskOption_args__isset() : options(false) {}
  bool options;
} _GroupManagerService_SetTaskOption_args__isset;

class GroupManagerService_SetTaskOption_args {
 public:

  GroupManagerService_SetTaskOption_args() {
  }

  virtual ~GroupManagerService_SetTaskOption_args() throw() {}

  TaskOptions options;

  _GroupManagerService_SetTaskOption_args__isset __isset;

  void __set_options(const TaskOptions& val) {
    options = val;
  }

  bool operator == (const GroupManagerService_SetTaskOption_args & rhs) const
  {
    if (!(options == rhs.options))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_SetTaskOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_SetTaskOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GroupManagerService_SetTaskOption_pargs {
 public:


  virtual ~GroupManagerService_SetTaskOption_pargs() throw() {}

  const TaskOptions* options;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_SetTaskOption_result__isset {
  _GroupManagerService_SetTaskOption_result__isset() : success(false) {}
  bool success;
} _GroupManagerService_SetTaskOption_result__isset;

class GroupManagerService_SetTaskOption_result {
 public:

  GroupManagerService_SetTaskOption_result() {
  }

  virtual ~GroupManagerService_SetTaskOption_result() throw() {}

  GeneralResponse success;

  _GroupManagerService_SetTaskOption_result__isset __isset;

  void __set_success(const GeneralResponse& val) {
    success = val;
  }

  bool operator == (const GroupManagerService_SetTaskOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_SetTaskOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_SetTaskOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_SetTaskOption_presult__isset {
  _GroupManagerService_SetTaskOption_presult__isset() : success(false) {}
  bool success;
} _GroupManagerService_SetTaskOption_presult__isset;

class GroupManagerService_SetTaskOption_presult {
 public:


  virtual ~GroupManagerService_SetTaskOption_presult() throw() {}

  GeneralResponse* success;

  _GroupManagerService_SetTaskOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _GroupManagerService_GetTaskOption_args__isset {
  _GroupManagerService_GetTaskOption_args__isset() : infohash(false) {}
  bool infohash;
} _GroupManagerService_GetTaskOption_args__isset;

class GroupManagerService_GetTaskOption_args {
 public:

  GroupManagerService_GetTaskOption_args() : infohash() {
  }

  virtual ~GroupManagerService_GetTaskOption_args() throw() {}

  std::string infohash;

  _GroupManagerService_GetTaskOption_args__isset __isset;

  void __set_infohash(const std::string& val) {
    infohash = val;
  }

  bool operator == (const GroupManagerService_GetTaskOption_args & rhs) const
  {
    if (!(infohash == rhs.infohash))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_GetTaskOption_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_GetTaskOption_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class GroupManagerService_GetTaskOption_pargs {
 public:


  virtual ~GroupManagerService_GetTaskOption_pargs() throw() {}

  const std::string* infohash;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_GetTaskOption_result__isset {
  _GroupManagerService_GetTaskOption_result__isset() : success(false) {}
  bool success;
} _GroupManagerService_GetTaskOption_result__isset;

class GroupManagerService_GetTaskOption_result {
 public:

  GroupManagerService_GetTaskOption_result() {
  }

  virtual ~GroupManagerService_GetTaskOption_result() throw() {}

  std::vector<TaskOptions>  success;

  _GroupManagerService_GetTaskOption_result__isset __isset;

  void __set_success(const std::vector<TaskOptions> & val) {
    success = val;
  }

  bool operator == (const GroupManagerService_GetTaskOption_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const GroupManagerService_GetTaskOption_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const GroupManagerService_GetTaskOption_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _GroupManagerService_GetTaskOption_presult__isset {
  _GroupManagerService_GetTaskOption_presult__isset() : success(false) {}
  bool success;
} _GroupManagerService_GetTaskOption_presult__isset;

class GroupManagerService_GetTaskOption_presult {
 public:


  virtual ~GroupManagerService_GetTaskOption_presult() throw() {}

  std::vector<TaskOptions> * success;

  _GroupManagerService_GetTaskOption_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class GroupManagerServiceClient : virtual public GroupManagerServiceIf {
 public:
  GroupManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  GroupManagerServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void AddGroupTask(GeneralResponse& _return, const DownloadParam& down_params, const UserCred& cred);
  void send_AddGroupTask(const DownloadParam& down_params, const UserCred& cred);
  void recv_AddGroupTask(GeneralResponse& _return);
  void GetTaskStatus(std::vector<TaskStatus> & _return, const std::string& infohash, const bool is_full);
  void send_GetTaskStatus(const std::string& infohash, const bool is_full);
  void recv_GetTaskStatus(std::vector<TaskStatus> & _return);
  void ControlTask(GeneralResponse& _return, const std::string& infohash, const bool is_all, const ControlTaskType::type type, const UserCred& cred);
  void send_ControlTask(const std::string& infohash, const bool is_all, const ControlTaskType::type type, const UserCred& cred);
  void recv_ControlTask(GeneralResponse& _return);
  void SetTaskOption(GeneralResponse& _return, const TaskOptions& options);
  void send_SetTaskOption(const TaskOptions& options);
  void recv_SetTaskOption(GeneralResponse& _return);
  void GetTaskOption(std::vector<TaskOptions> & _return, const std::string& infohash);
  void send_GetTaskOption(const std::string& infohash);
  void recv_GetTaskOption(std::vector<TaskOptions> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class GroupManagerServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<GroupManagerServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (GroupManagerServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_AddGroupTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTaskStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ControlTask(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_SetTaskOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetTaskOption(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  GroupManagerServiceProcessor(boost::shared_ptr<GroupManagerServiceIf> iface) :
    iface_(iface) {
    processMap_["AddGroupTask"] = &GroupManagerServiceProcessor::process_AddGroupTask;
    processMap_["GetTaskStatus"] = &GroupManagerServiceProcessor::process_GetTaskStatus;
    processMap_["ControlTask"] = &GroupManagerServiceProcessor::process_ControlTask;
    processMap_["SetTaskOption"] = &GroupManagerServiceProcessor::process_SetTaskOption;
    processMap_["GetTaskOption"] = &GroupManagerServiceProcessor::process_GetTaskOption;
  }

  virtual ~GroupManagerServiceProcessor() {}
};

class GroupManagerServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  GroupManagerServiceProcessorFactory(const ::boost::shared_ptr< GroupManagerServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< GroupManagerServiceIfFactory > handlerFactory_;
};

class GroupManagerServiceMultiface : virtual public GroupManagerServiceIf {
 public:
  GroupManagerServiceMultiface(std::vector<boost::shared_ptr<GroupManagerServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~GroupManagerServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<GroupManagerServiceIf> > ifaces_;
  GroupManagerServiceMultiface() {}
  void add(boost::shared_ptr<GroupManagerServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void AddGroupTask(GeneralResponse& _return, const DownloadParam& down_params, const UserCred& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->AddGroupTask(_return, down_params, cred);
    }
    ifaces_[i]->AddGroupTask(_return, down_params, cred);
    return;
  }

  void GetTaskStatus(std::vector<TaskStatus> & _return, const std::string& infohash, const bool is_full) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTaskStatus(_return, infohash, is_full);
    }
    ifaces_[i]->GetTaskStatus(_return, infohash, is_full);
    return;
  }

  void ControlTask(GeneralResponse& _return, const std::string& infohash, const bool is_all, const ControlTaskType::type type, const UserCred& cred) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ControlTask(_return, infohash, is_all, type, cred);
    }
    ifaces_[i]->ControlTask(_return, infohash, is_all, type, cred);
    return;
  }

  void SetTaskOption(GeneralResponse& _return, const TaskOptions& options) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SetTaskOption(_return, options);
    }
    ifaces_[i]->SetTaskOption(_return, options);
    return;
  }

  void GetTaskOption(std::vector<TaskOptions> & _return, const std::string& infohash) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetTaskOption(_return, infohash);
    }
    ifaces_[i]->GetTaskOption(_return, infohash);
    return;
  }

};

}} // namespace

#endif
