// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tracker_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace tracker {

namespace {

const ::google::protobuf::Descriptor* TrackerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_tracker_5fconf_2eproto() {
  protobuf_AddDesc_tracker_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker_conf.proto");
  GOOGLE_CHECK(file != NULL);
  TrackerConf_descriptor_ = file->message_type(0);
  static const int TrackerConf_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, conf_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, httpd_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, monitor_cycle_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, info_hash_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, remote_peers_syncronizer_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_send_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_recv_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_accept_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, task_expire_time_),
  };
  TrackerConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackerConf_descriptor_,
      TrackerConf::internal_default_instance(),
      TrackerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _has_bits_),
      -1,
      -1,
      sizeof(TrackerConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackerConf_descriptor_, TrackerConf::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_5fconf_2eproto() {
  TrackerConf_default_instance_.Shutdown();
  delete TrackerConf_reflection_;
}

void protobuf_InitDefaults_tracker_5fconf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  TrackerConf_default_instance_.DefaultConstruct();
  TrackerConf_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_tracker_5fconf_2eproto_once_);
void protobuf_InitDefaults_tracker_5fconf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_tracker_5fconf_2eproto_once_,
                 &protobuf_InitDefaults_tracker_5fconf_2eproto_impl);
}
void protobuf_AddDesc_tracker_5fconf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_tracker_5fconf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tracker_conf.proto\022\014bbts.tracker\"\275\002\n\013T"
    "rackerConf\022\014\n\004port\030\001 \001(\005\022\022\n\nthread_num\030\002"
    " \001(\005\022\020\n\010conf_dir\030\003 \001(\t\022\020\n\010log_path\030\004 \001(\t"
    "\022\022\n\nhttpd_port\030\005 \001(\005\022\034\n\024monitor_cycle_se"
    "cond\030\006 \001(\005\022\035\n\025info_hash_expire_time\030\007 \001("
    "\005\022$\n\034remote_peers_syncronizer_num\030\010 \001(\005\022"
    "\033\n\023server_send_timeout\030\t \001(\005\022\033\n\023server_r"
    "ecv_timeout\030\n \001(\005\022\035\n\025server_accept_timeo"
    "ut\030\013 \001(\005\022\030\n\020task_expire_time\030\014 \001(\005", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_5fconf_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_tracker_5fconf_2eproto_once_);
void protobuf_AddDesc_tracker_5fconf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_tracker_5fconf_2eproto_once_,
                 &protobuf_AddDesc_tracker_5fconf_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_5fconf_2eproto {
  StaticDescriptorInitializer_tracker_5fconf_2eproto() {
    protobuf_AddDesc_tracker_5fconf_2eproto();
  }
} static_descriptor_initializer_tracker_5fconf_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackerConf::kPortFieldNumber;
const int TrackerConf::kThreadNumFieldNumber;
const int TrackerConf::kConfDirFieldNumber;
const int TrackerConf::kLogPathFieldNumber;
const int TrackerConf::kHttpdPortFieldNumber;
const int TrackerConf::kMonitorCycleSecondFieldNumber;
const int TrackerConf::kInfoHashExpireTimeFieldNumber;
const int TrackerConf::kRemotePeersSyncronizerNumFieldNumber;
const int TrackerConf::kServerSendTimeoutFieldNumber;
const int TrackerConf::kServerRecvTimeoutFieldNumber;
const int TrackerConf::kServerAcceptTimeoutFieldNumber;
const int TrackerConf::kTaskExpireTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackerConf::TrackerConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_tracker_5fconf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.tracker.TrackerConf)
}

void TrackerConf::InitAsDefaultInstance() {
}

TrackerConf::TrackerConf(const TrackerConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.tracker.TrackerConf)
}

void TrackerConf::SharedCtor() {
  _cached_size_ = 0;
  conf_dir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&port_, 0, reinterpret_cast<char*>(&task_expire_time_) -
    reinterpret_cast<char*>(&port_) + sizeof(task_expire_time_));
}

TrackerConf::~TrackerConf() {
  // @@protoc_insertion_point(destructor:bbts.tracker.TrackerConf)
  SharedDtor();
}

void TrackerConf::SharedDtor() {
  conf_dir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TrackerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerConf_descriptor_;
}

const TrackerConf& TrackerConf::default_instance() {
  protobuf_InitDefaults_tracker_5fconf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrackerConf> TrackerConf_default_instance_;

TrackerConf* TrackerConf::New(::google::protobuf::Arena* arena) const {
  TrackerConf* n = new TrackerConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackerConf::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.tracker.TrackerConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackerConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackerConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(port_, remote_peers_syncronizer_num_);
    if (has_conf_dir()) {
      conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_log_path()) {
      log_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(server_send_timeout_, task_expire_time_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.tracker.TrackerConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 port = 1;
      case 1: {
        if (tag == 8) {
          set_has_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_thread_num;
        break;
      }

      // optional int32 thread_num = 2;
      case 2: {
        if (tag == 16) {
         parse_thread_num:
          set_has_thread_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_conf_dir;
        break;
      }

      // optional string conf_dir = 3;
      case 3: {
        if (tag == 26) {
         parse_conf_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conf_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->conf_dir().data(), this->conf_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.tracker.TrackerConf.conf_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_log_path;
        break;
      }

      // optional string log_path = 4;
      case 4: {
        if (tag == 34) {
         parse_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->log_path().data(), this->log_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.tracker.TrackerConf.log_path");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_httpd_port;
        break;
      }

      // optional int32 httpd_port = 5;
      case 5: {
        if (tag == 40) {
         parse_httpd_port:
          set_has_httpd_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpd_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_monitor_cycle_second;
        break;
      }

      // optional int32 monitor_cycle_second = 6;
      case 6: {
        if (tag == 48) {
         parse_monitor_cycle_second:
          set_has_monitor_cycle_second();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monitor_cycle_second_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_info_hash_expire_time;
        break;
      }

      // optional int32 info_hash_expire_time = 7;
      case 7: {
        if (tag == 56) {
         parse_info_hash_expire_time:
          set_has_info_hash_expire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_hash_expire_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_remote_peers_syncronizer_num;
        break;
      }

      // optional int32 remote_peers_syncronizer_num = 8;
      case 8: {
        if (tag == 64) {
         parse_remote_peers_syncronizer_num:
          set_has_remote_peers_syncronizer_num();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_peers_syncronizer_num_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_server_send_timeout;
        break;
      }

      // optional int32 server_send_timeout = 9;
      case 9: {
        if (tag == 72) {
         parse_server_send_timeout:
          set_has_server_send_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_send_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_server_recv_timeout;
        break;
      }

      // optional int32 server_recv_timeout = 10;
      case 10: {
        if (tag == 80) {
         parse_server_recv_timeout:
          set_has_server_recv_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_recv_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_server_accept_timeout;
        break;
      }

      // optional int32 server_accept_timeout = 11;
      case 11: {
        if (tag == 88) {
         parse_server_accept_timeout:
          set_has_server_accept_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_accept_timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_task_expire_time;
        break;
      }

      // optional int32 task_expire_time = 12;
      case 12: {
        if (tag == 96) {
         parse_task_expire_time:
          set_has_task_expire_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_expire_time_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.tracker.TrackerConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.tracker.TrackerConf)
  return false;
#undef DO_
}

void TrackerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.tracker.TrackerConf)
  // optional int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }

  // optional int32 thread_num = 2;
  if (has_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thread_num(), output);
  }

  // optional string conf_dir = 3;
  if (has_conf_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf_dir().data(), this->conf_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.tracker.TrackerConf.conf_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->conf_dir(), output);
  }

  // optional string log_path = 4;
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.tracker.TrackerConf.log_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->log_path(), output);
  }

  // optional int32 httpd_port = 5;
  if (has_httpd_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->httpd_port(), output);
  }

  // optional int32 monitor_cycle_second = 6;
  if (has_monitor_cycle_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monitor_cycle_second(), output);
  }

  // optional int32 info_hash_expire_time = 7;
  if (has_info_hash_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->info_hash_expire_time(), output);
  }

  // optional int32 remote_peers_syncronizer_num = 8;
  if (has_remote_peers_syncronizer_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->remote_peers_syncronizer_num(), output);
  }

  // optional int32 server_send_timeout = 9;
  if (has_server_send_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->server_send_timeout(), output);
  }

  // optional int32 server_recv_timeout = 10;
  if (has_server_recv_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_recv_timeout(), output);
  }

  // optional int32 server_accept_timeout = 11;
  if (has_server_accept_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->server_accept_timeout(), output);
  }

  // optional int32 task_expire_time = 12;
  if (has_task_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->task_expire_time(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.tracker.TrackerConf)
}

::google::protobuf::uint8* TrackerConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.tracker.TrackerConf)
  // optional int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }

  // optional int32 thread_num = 2;
  if (has_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thread_num(), target);
  }

  // optional string conf_dir = 3;
  if (has_conf_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->conf_dir().data(), this->conf_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.tracker.TrackerConf.conf_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->conf_dir(), target);
  }

  // optional string log_path = 4;
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.tracker.TrackerConf.log_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log_path(), target);
  }

  // optional int32 httpd_port = 5;
  if (has_httpd_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->httpd_port(), target);
  }

  // optional int32 monitor_cycle_second = 6;
  if (has_monitor_cycle_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monitor_cycle_second(), target);
  }

  // optional int32 info_hash_expire_time = 7;
  if (has_info_hash_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->info_hash_expire_time(), target);
  }

  // optional int32 remote_peers_syncronizer_num = 8;
  if (has_remote_peers_syncronizer_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->remote_peers_syncronizer_num(), target);
  }

  // optional int32 server_send_timeout = 9;
  if (has_server_send_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->server_send_timeout(), target);
  }

  // optional int32 server_recv_timeout = 10;
  if (has_server_recv_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_recv_timeout(), target);
  }

  // optional int32 server_accept_timeout = 11;
  if (has_server_accept_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->server_accept_timeout(), target);
  }

  // optional int32 task_expire_time = 12;
  if (has_task_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->task_expire_time(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.tracker.TrackerConf)
  return target;
}

size_t TrackerConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.tracker.TrackerConf)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 thread_num = 2;
    if (has_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_num());
    }

    // optional string conf_dir = 3;
    if (has_conf_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conf_dir());
    }

    // optional string log_path = 4;
    if (has_log_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_path());
    }

    // optional int32 httpd_port = 5;
    if (has_httpd_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpd_port());
    }

    // optional int32 monitor_cycle_second = 6;
    if (has_monitor_cycle_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monitor_cycle_second());
    }

    // optional int32 info_hash_expire_time = 7;
    if (has_info_hash_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_hash_expire_time());
    }

    // optional int32 remote_peers_syncronizer_num = 8;
    if (has_remote_peers_syncronizer_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_peers_syncronizer_num());
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 server_send_timeout = 9;
    if (has_server_send_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_send_timeout());
    }

    // optional int32 server_recv_timeout = 10;
    if (has_server_recv_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_recv_timeout());
    }

    // optional int32 server_accept_timeout = 11;
    if (has_server_accept_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_accept_timeout());
    }

    // optional int32 task_expire_time = 12;
    if (has_task_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_expire_time());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.tracker.TrackerConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrackerConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackerConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.tracker.TrackerConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.tracker.TrackerConf)
    UnsafeMergeFrom(*source);
  }
}

void TrackerConf::MergeFrom(const TrackerConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.tracker.TrackerConf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrackerConf::UnsafeMergeFrom(const TrackerConf& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_thread_num()) {
      set_thread_num(from.thread_num());
    }
    if (from.has_conf_dir()) {
      set_has_conf_dir();
      conf_dir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.conf_dir_);
    }
    if (from.has_log_path()) {
      set_has_log_path();
      log_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.log_path_);
    }
    if (from.has_httpd_port()) {
      set_httpd_port(from.httpd_port());
    }
    if (from.has_monitor_cycle_second()) {
      set_monitor_cycle_second(from.monitor_cycle_second());
    }
    if (from.has_info_hash_expire_time()) {
      set_info_hash_expire_time(from.info_hash_expire_time());
    }
    if (from.has_remote_peers_syncronizer_num()) {
      set_remote_peers_syncronizer_num(from.remote_peers_syncronizer_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_send_timeout()) {
      set_server_send_timeout(from.server_send_timeout());
    }
    if (from.has_server_recv_timeout()) {
      set_server_recv_timeout(from.server_recv_timeout());
    }
    if (from.has_server_accept_timeout()) {
      set_server_accept_timeout(from.server_accept_timeout());
    }
    if (from.has_task_expire_time()) {
      set_task_expire_time(from.task_expire_time());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TrackerConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.tracker.TrackerConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerConf::CopyFrom(const TrackerConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.tracker.TrackerConf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrackerConf::IsInitialized() const {

  return true;
}

void TrackerConf::Swap(TrackerConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackerConf::InternalSwap(TrackerConf* other) {
  std::swap(port_, other->port_);
  std::swap(thread_num_, other->thread_num_);
  conf_dir_.Swap(&other->conf_dir_);
  log_path_.Swap(&other->log_path_);
  std::swap(httpd_port_, other->httpd_port_);
  std::swap(monitor_cycle_second_, other->monitor_cycle_second_);
  std::swap(info_hash_expire_time_, other->info_hash_expire_time_);
  std::swap(remote_peers_syncronizer_num_, other->remote_peers_syncronizer_num_);
  std::swap(server_send_timeout_, other->server_send_timeout_);
  std::swap(server_recv_timeout_, other->server_recv_timeout_);
  std::swap(server_accept_timeout_, other->server_accept_timeout_);
  std::swap(task_expire_time_, other->task_expire_time_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerConf_descriptor_;
  metadata.reflection = TrackerConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerConf

// optional int32 port = 1;
bool TrackerConf::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackerConf::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackerConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackerConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
::google::protobuf::int32 TrackerConf::port() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.port)
  return port_;
}
void TrackerConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.port)
}

// optional int32 thread_num = 2;
bool TrackerConf::has_thread_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackerConf::set_has_thread_num() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackerConf::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackerConf::clear_thread_num() {
  thread_num_ = 0;
  clear_has_thread_num();
}
::google::protobuf::int32 TrackerConf::thread_num() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.thread_num)
  return thread_num_;
}
void TrackerConf::set_thread_num(::google::protobuf::int32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.thread_num)
}

// optional string conf_dir = 3;
bool TrackerConf::has_conf_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackerConf::set_has_conf_dir() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackerConf::clear_has_conf_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackerConf::clear_conf_dir() {
  conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conf_dir();
}
const ::std::string& TrackerConf::conf_dir() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.conf_dir)
  return conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackerConf::set_conf_dir(const ::std::string& value) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.conf_dir)
}
void TrackerConf::set_conf_dir(const char* value) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.tracker.TrackerConf.conf_dir)
}
void TrackerConf::set_conf_dir(const char* value, size_t size) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.tracker.TrackerConf.conf_dir)
}
::std::string* TrackerConf::mutable_conf_dir() {
  set_has_conf_dir();
  // @@protoc_insertion_point(field_mutable:bbts.tracker.TrackerConf.conf_dir)
  return conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackerConf::release_conf_dir() {
  // @@protoc_insertion_point(field_release:bbts.tracker.TrackerConf.conf_dir)
  clear_has_conf_dir();
  return conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackerConf::set_allocated_conf_dir(::std::string* conf_dir) {
  if (conf_dir != NULL) {
    set_has_conf_dir();
  } else {
    clear_has_conf_dir();
  }
  conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conf_dir);
  // @@protoc_insertion_point(field_set_allocated:bbts.tracker.TrackerConf.conf_dir)
}

// optional string log_path = 4;
bool TrackerConf::has_log_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrackerConf::set_has_log_path() {
  _has_bits_[0] |= 0x00000008u;
}
void TrackerConf::clear_has_log_path() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrackerConf::clear_log_path() {
  log_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_path();
}
const ::std::string& TrackerConf::log_path() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.log_path)
  return log_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackerConf::set_log_path(const ::std::string& value) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.log_path)
}
void TrackerConf::set_log_path(const char* value) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.tracker.TrackerConf.log_path)
}
void TrackerConf::set_log_path(const char* value, size_t size) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.tracker.TrackerConf.log_path)
}
::std::string* TrackerConf::mutable_log_path() {
  set_has_log_path();
  // @@protoc_insertion_point(field_mutable:bbts.tracker.TrackerConf.log_path)
  return log_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* TrackerConf::release_log_path() {
  // @@protoc_insertion_point(field_release:bbts.tracker.TrackerConf.log_path)
  clear_has_log_path();
  return log_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void TrackerConf::set_allocated_log_path(::std::string* log_path) {
  if (log_path != NULL) {
    set_has_log_path();
  } else {
    clear_has_log_path();
  }
  log_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.tracker.TrackerConf.log_path)
}

// optional int32 httpd_port = 5;
bool TrackerConf::has_httpd_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrackerConf::set_has_httpd_port() {
  _has_bits_[0] |= 0x00000010u;
}
void TrackerConf::clear_has_httpd_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrackerConf::clear_httpd_port() {
  httpd_port_ = 0;
  clear_has_httpd_port();
}
::google::protobuf::int32 TrackerConf::httpd_port() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.httpd_port)
  return httpd_port_;
}
void TrackerConf::set_httpd_port(::google::protobuf::int32 value) {
  set_has_httpd_port();
  httpd_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.httpd_port)
}

// optional int32 monitor_cycle_second = 6;
bool TrackerConf::has_monitor_cycle_second() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrackerConf::set_has_monitor_cycle_second() {
  _has_bits_[0] |= 0x00000020u;
}
void TrackerConf::clear_has_monitor_cycle_second() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrackerConf::clear_monitor_cycle_second() {
  monitor_cycle_second_ = 0;
  clear_has_monitor_cycle_second();
}
::google::protobuf::int32 TrackerConf::monitor_cycle_second() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.monitor_cycle_second)
  return monitor_cycle_second_;
}
void TrackerConf::set_monitor_cycle_second(::google::protobuf::int32 value) {
  set_has_monitor_cycle_second();
  monitor_cycle_second_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.monitor_cycle_second)
}

// optional int32 info_hash_expire_time = 7;
bool TrackerConf::has_info_hash_expire_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrackerConf::set_has_info_hash_expire_time() {
  _has_bits_[0] |= 0x00000040u;
}
void TrackerConf::clear_has_info_hash_expire_time() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrackerConf::clear_info_hash_expire_time() {
  info_hash_expire_time_ = 0;
  clear_has_info_hash_expire_time();
}
::google::protobuf::int32 TrackerConf::info_hash_expire_time() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.info_hash_expire_time)
  return info_hash_expire_time_;
}
void TrackerConf::set_info_hash_expire_time(::google::protobuf::int32 value) {
  set_has_info_hash_expire_time();
  info_hash_expire_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.info_hash_expire_time)
}

// optional int32 remote_peers_syncronizer_num = 8;
bool TrackerConf::has_remote_peers_syncronizer_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrackerConf::set_has_remote_peers_syncronizer_num() {
  _has_bits_[0] |= 0x00000080u;
}
void TrackerConf::clear_has_remote_peers_syncronizer_num() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrackerConf::clear_remote_peers_syncronizer_num() {
  remote_peers_syncronizer_num_ = 0;
  clear_has_remote_peers_syncronizer_num();
}
::google::protobuf::int32 TrackerConf::remote_peers_syncronizer_num() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.remote_peers_syncronizer_num)
  return remote_peers_syncronizer_num_;
}
void TrackerConf::set_remote_peers_syncronizer_num(::google::protobuf::int32 value) {
  set_has_remote_peers_syncronizer_num();
  remote_peers_syncronizer_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.remote_peers_syncronizer_num)
}

// optional int32 server_send_timeout = 9;
bool TrackerConf::has_server_send_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrackerConf::set_has_server_send_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
void TrackerConf::clear_has_server_send_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrackerConf::clear_server_send_timeout() {
  server_send_timeout_ = 0;
  clear_has_server_send_timeout();
}
::google::protobuf::int32 TrackerConf::server_send_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_send_timeout)
  return server_send_timeout_;
}
void TrackerConf::set_server_send_timeout(::google::protobuf::int32 value) {
  set_has_server_send_timeout();
  server_send_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_send_timeout)
}

// optional int32 server_recv_timeout = 10;
bool TrackerConf::has_server_recv_timeout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrackerConf::set_has_server_recv_timeout() {
  _has_bits_[0] |= 0x00000200u;
}
void TrackerConf::clear_has_server_recv_timeout() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrackerConf::clear_server_recv_timeout() {
  server_recv_timeout_ = 0;
  clear_has_server_recv_timeout();
}
::google::protobuf::int32 TrackerConf::server_recv_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_recv_timeout)
  return server_recv_timeout_;
}
void TrackerConf::set_server_recv_timeout(::google::protobuf::int32 value) {
  set_has_server_recv_timeout();
  server_recv_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_recv_timeout)
}

// optional int32 server_accept_timeout = 11;
bool TrackerConf::has_server_accept_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrackerConf::set_has_server_accept_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
void TrackerConf::clear_has_server_accept_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrackerConf::clear_server_accept_timeout() {
  server_accept_timeout_ = 0;
  clear_has_server_accept_timeout();
}
::google::protobuf::int32 TrackerConf::server_accept_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_accept_timeout)
  return server_accept_timeout_;
}
void TrackerConf::set_server_accept_timeout(::google::protobuf::int32 value) {
  set_has_server_accept_timeout();
  server_accept_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_accept_timeout)
}

// optional int32 task_expire_time = 12;
bool TrackerConf::has_task_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrackerConf::set_has_task_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
void TrackerConf::clear_has_task_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrackerConf::clear_task_expire_time() {
  task_expire_time_ = 0;
  clear_has_task_expire_time();
}
::google::protobuf::int32 TrackerConf::task_expire_time() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.task_expire_time)
  return task_expire_time_;
}
void TrackerConf::set_task_expire_time(::google::protobuf::int32 value) {
  set_has_task_expire_time();
  task_expire_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.task_expire_time)
}

inline const TrackerConf* TrackerConf::internal_default_instance() {
  return &TrackerConf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
