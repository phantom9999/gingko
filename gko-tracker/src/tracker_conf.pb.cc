// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bbts/tracker/tracker_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace tracker {

namespace {

const ::google::protobuf::Descriptor* TrackerConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackerConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tracker_5fconf_2eproto() {
  protobuf_AddDesc_tracker_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tracker_conf.proto");
  GOOGLE_CHECK(file != NULL);
  TrackerConf_descriptor_ = file->message_type(0);
  static const int TrackerConf_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, thread_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, conf_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, log_path_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, httpd_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, monitor_cycle_second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, info_hash_expire_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, remote_peers_syncronizer_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_send_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_recv_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, server_accept_timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, task_expire_time_),
  };
  TrackerConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackerConf_descriptor_,
      TrackerConf::default_instance_,
      TrackerConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackerConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackerConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tracker_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackerConf_descriptor_, &TrackerConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tracker_5fconf_2eproto() {
  delete TrackerConf::default_instance_;
  delete TrackerConf_reflection_;
}

void protobuf_AddDesc_tracker_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022tracker_conf.proto\022\014bbts.tracker\"\275\002\n\013T"
    "rackerConf\022\014\n\004port\030\001 \001(\005\022\022\n\nthread_num\030\002"
    " \001(\005\022\020\n\010conf_dir\030\003 \001(\t\022\020\n\010log_path\030\004 \001(\t"
    "\022\022\n\nhttpd_port\030\005 \001(\005\022\034\n\024monitor_cycle_se"
    "cond\030\006 \001(\005\022\035\n\025info_hash_expire_time\030\007 \001("
    "\005\022$\n\034remote_peers_syncronizer_num\030\010 \001(\005\022"
    "\033\n\023server_send_timeout\030\t \001(\005\022\033\n\023server_r"
    "ecv_timeout\030\n \001(\005\022\035\n\025server_accept_timeo"
    "ut\030\013 \001(\005\022\030\n\020task_expire_time\030\014 \001(\005", 354);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tracker_conf.proto", &protobuf_RegisterTypes);
  TrackerConf::default_instance_ = new TrackerConf();
  TrackerConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tracker_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tracker_5fconf_2eproto {
  StaticDescriptorInitializer_tracker_5fconf_2eproto() {
    protobuf_AddDesc_tracker_5fconf_2eproto();
  }
} static_descriptor_initializer_tracker_5fconf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int TrackerConf::kPortFieldNumber;
const int TrackerConf::kThreadNumFieldNumber;
const int TrackerConf::kConfDirFieldNumber;
const int TrackerConf::kLogPathFieldNumber;
const int TrackerConf::kHttpdPortFieldNumber;
const int TrackerConf::kMonitorCycleSecondFieldNumber;
const int TrackerConf::kInfoHashExpireTimeFieldNumber;
const int TrackerConf::kRemotePeersSyncronizerNumFieldNumber;
const int TrackerConf::kServerSendTimeoutFieldNumber;
const int TrackerConf::kServerRecvTimeoutFieldNumber;
const int TrackerConf::kServerAcceptTimeoutFieldNumber;
const int TrackerConf::kTaskExpireTimeFieldNumber;
#endif  // !_MSC_VER

TrackerConf::TrackerConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrackerConf::InitAsDefaultInstance() {
}

TrackerConf::TrackerConf(const TrackerConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrackerConf::SharedCtor() {
  _cached_size_ = 0;
  port_ = 0;
  thread_num_ = 0;
  conf_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  log_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  httpd_port_ = 0;
  monitor_cycle_second_ = 0;
  info_hash_expire_time_ = 0;
  remote_peers_syncronizer_num_ = 0;
  server_send_timeout_ = 0;
  server_recv_timeout_ = 0;
  server_accept_timeout_ = 0;
  task_expire_time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackerConf::~TrackerConf() {
  SharedDtor();
}

void TrackerConf::SharedDtor() {
  if (conf_dir_ != &::google::protobuf::internal::kEmptyString) {
    delete conf_dir_;
  }
  if (log_path_ != &::google::protobuf::internal::kEmptyString) {
    delete log_path_;
  }
  if (this != default_instance_) {
  }
}

void TrackerConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackerConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackerConf_descriptor_;
}

const TrackerConf& TrackerConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tracker_5fconf_2eproto();  return *default_instance_;
}

TrackerConf* TrackerConf::default_instance_ = NULL;

TrackerConf* TrackerConf::New() const {
  return new TrackerConf;
}

void TrackerConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    port_ = 0;
    thread_num_ = 0;
    if (has_conf_dir()) {
      if (conf_dir_ != &::google::protobuf::internal::kEmptyString) {
        conf_dir_->clear();
      }
    }
    if (has_log_path()) {
      if (log_path_ != &::google::protobuf::internal::kEmptyString) {
        log_path_->clear();
      }
    }
    httpd_port_ = 0;
    monitor_cycle_second_ = 0;
    info_hash_expire_time_ = 0;
    remote_peers_syncronizer_num_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    server_send_timeout_ = 0;
    server_recv_timeout_ = 0;
    server_accept_timeout_ = 0;
    task_expire_time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackerConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 port = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_thread_num;
        break;
      }
      
      // optional int32 thread_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_thread_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thread_num_)));
          set_has_thread_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_conf_dir;
        break;
      }
      
      // optional string conf_dir = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_conf_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_conf_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->conf_dir().data(), this->conf_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_log_path;
        break;
      }
      
      // optional string log_path = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_log_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_log_path()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->log_path().data(), this->log_path().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_httpd_port;
        break;
      }
      
      // optional int32 httpd_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_httpd_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &httpd_port_)));
          set_has_httpd_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_monitor_cycle_second;
        break;
      }
      
      // optional int32 monitor_cycle_second = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monitor_cycle_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monitor_cycle_second_)));
          set_has_monitor_cycle_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_info_hash_expire_time;
        break;
      }
      
      // optional int32 info_hash_expire_time = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_info_hash_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &info_hash_expire_time_)));
          set_has_info_hash_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_remote_peers_syncronizer_num;
        break;
      }
      
      // optional int32 remote_peers_syncronizer_num = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remote_peers_syncronizer_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remote_peers_syncronizer_num_)));
          set_has_remote_peers_syncronizer_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_server_send_timeout;
        break;
      }
      
      // optional int32 server_send_timeout = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_send_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_send_timeout_)));
          set_has_server_send_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_server_recv_timeout;
        break;
      }
      
      // optional int32 server_recv_timeout = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_recv_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_recv_timeout_)));
          set_has_server_recv_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_server_accept_timeout;
        break;
      }
      
      // optional int32 server_accept_timeout = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_server_accept_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &server_accept_timeout_)));
          set_has_server_accept_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_task_expire_time;
        break;
      }
      
      // optional int32 task_expire_time = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_task_expire_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &task_expire_time_)));
          set_has_task_expire_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrackerConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 port = 1;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->port(), output);
  }
  
  // optional int32 thread_num = 2;
  if (has_thread_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->thread_num(), output);
  }
  
  // optional string conf_dir = 3;
  if (has_conf_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf_dir().data(), this->conf_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->conf_dir(), output);
  }
  
  // optional string log_path = 4;
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->log_path(), output);
  }
  
  // optional int32 httpd_port = 5;
  if (has_httpd_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->httpd_port(), output);
  }
  
  // optional int32 monitor_cycle_second = 6;
  if (has_monitor_cycle_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->monitor_cycle_second(), output);
  }
  
  // optional int32 info_hash_expire_time = 7;
  if (has_info_hash_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->info_hash_expire_time(), output);
  }
  
  // optional int32 remote_peers_syncronizer_num = 8;
  if (has_remote_peers_syncronizer_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->remote_peers_syncronizer_num(), output);
  }
  
  // optional int32 server_send_timeout = 9;
  if (has_server_send_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->server_send_timeout(), output);
  }
  
  // optional int32 server_recv_timeout = 10;
  if (has_server_recv_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->server_recv_timeout(), output);
  }
  
  // optional int32 server_accept_timeout = 11;
  if (has_server_accept_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->server_accept_timeout(), output);
  }
  
  // optional int32 task_expire_time = 12;
  if (has_task_expire_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->task_expire_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrackerConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 port = 1;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->port(), target);
  }
  
  // optional int32 thread_num = 2;
  if (has_thread_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->thread_num(), target);
  }
  
  // optional string conf_dir = 3;
  if (has_conf_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->conf_dir().data(), this->conf_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->conf_dir(), target);
  }
  
  // optional string log_path = 4;
  if (has_log_path()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->log_path().data(), this->log_path().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->log_path(), target);
  }
  
  // optional int32 httpd_port = 5;
  if (has_httpd_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->httpd_port(), target);
  }
  
  // optional int32 monitor_cycle_second = 6;
  if (has_monitor_cycle_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->monitor_cycle_second(), target);
  }
  
  // optional int32 info_hash_expire_time = 7;
  if (has_info_hash_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->info_hash_expire_time(), target);
  }
  
  // optional int32 remote_peers_syncronizer_num = 8;
  if (has_remote_peers_syncronizer_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->remote_peers_syncronizer_num(), target);
  }
  
  // optional int32 server_send_timeout = 9;
  if (has_server_send_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->server_send_timeout(), target);
  }
  
  // optional int32 server_recv_timeout = 10;
  if (has_server_recv_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->server_recv_timeout(), target);
  }
  
  // optional int32 server_accept_timeout = 11;
  if (has_server_accept_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->server_accept_timeout(), target);
  }
  
  // optional int32 task_expire_time = 12;
  if (has_task_expire_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->task_expire_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrackerConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 port = 1;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }
    
    // optional int32 thread_num = 2;
    if (has_thread_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thread_num());
    }
    
    // optional string conf_dir = 3;
    if (has_conf_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->conf_dir());
    }
    
    // optional string log_path = 4;
    if (has_log_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->log_path());
    }
    
    // optional int32 httpd_port = 5;
    if (has_httpd_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->httpd_port());
    }
    
    // optional int32 monitor_cycle_second = 6;
    if (has_monitor_cycle_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monitor_cycle_second());
    }
    
    // optional int32 info_hash_expire_time = 7;
    if (has_info_hash_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->info_hash_expire_time());
    }
    
    // optional int32 remote_peers_syncronizer_num = 8;
    if (has_remote_peers_syncronizer_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remote_peers_syncronizer_num());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 server_send_timeout = 9;
    if (has_server_send_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_send_timeout());
    }
    
    // optional int32 server_recv_timeout = 10;
    if (has_server_recv_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_recv_timeout());
    }
    
    // optional int32 server_accept_timeout = 11;
    if (has_server_accept_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->server_accept_timeout());
    }
    
    // optional int32 task_expire_time = 12;
    if (has_task_expire_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->task_expire_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackerConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackerConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackerConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackerConf::MergeFrom(const TrackerConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_thread_num()) {
      set_thread_num(from.thread_num());
    }
    if (from.has_conf_dir()) {
      set_conf_dir(from.conf_dir());
    }
    if (from.has_log_path()) {
      set_log_path(from.log_path());
    }
    if (from.has_httpd_port()) {
      set_httpd_port(from.httpd_port());
    }
    if (from.has_monitor_cycle_second()) {
      set_monitor_cycle_second(from.monitor_cycle_second());
    }
    if (from.has_info_hash_expire_time()) {
      set_info_hash_expire_time(from.info_hash_expire_time());
    }
    if (from.has_remote_peers_syncronizer_num()) {
      set_remote_peers_syncronizer_num(from.remote_peers_syncronizer_num());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_server_send_timeout()) {
      set_server_send_timeout(from.server_send_timeout());
    }
    if (from.has_server_recv_timeout()) {
      set_server_recv_timeout(from.server_recv_timeout());
    }
    if (from.has_server_accept_timeout()) {
      set_server_accept_timeout(from.server_accept_timeout());
    }
    if (from.has_task_expire_time()) {
      set_task_expire_time(from.task_expire_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackerConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackerConf::CopyFrom(const TrackerConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackerConf::IsInitialized() const {
  
  return true;
}

void TrackerConf::Swap(TrackerConf* other) {
  if (other != this) {
    std::swap(port_, other->port_);
    std::swap(thread_num_, other->thread_num_);
    std::swap(conf_dir_, other->conf_dir_);
    std::swap(log_path_, other->log_path_);
    std::swap(httpd_port_, other->httpd_port_);
    std::swap(monitor_cycle_second_, other->monitor_cycle_second_);
    std::swap(info_hash_expire_time_, other->info_hash_expire_time_);
    std::swap(remote_peers_syncronizer_num_, other->remote_peers_syncronizer_num_);
    std::swap(server_send_timeout_, other->server_send_timeout_);
    std::swap(server_recv_timeout_, other->server_recv_timeout_);
    std::swap(server_accept_timeout_, other->server_accept_timeout_);
    std::swap(task_expire_time_, other->task_expire_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackerConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackerConf_descriptor_;
  metadata.reflection = TrackerConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker
}  // namespace bbts

// @@protoc_insertion_point(global_scope)
