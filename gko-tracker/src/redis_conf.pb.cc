// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bbts/tracker/redis_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {

namespace {

const ::google::protobuf::Descriptor* HostPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_redis_5fconf_2eproto() {
  protobuf_AddDesc_redis_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "redis_conf.proto");
  GOOGLE_CHECK(file != NULL);
  HostPair_descriptor_ = file->message_type(0);
  static const int HostPair_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_weight_),
  };
  HostPair_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HostPair_descriptor_,
      HostPair::default_instance_,
      HostPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HostPair));
  RedisConf_descriptor_ = file->message_type(1);
  static const int RedisConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, max_queue_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, database_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, host_pair_),
  };
  RedisConf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RedisConf_descriptor_,
      RedisConf::default_instance_,
      RedisConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RedisConf));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_redis_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HostPair_descriptor_, &HostPair::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RedisConf_descriptor_, &RedisConf::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_redis_5fconf_2eproto() {
  delete HostPair::default_instance_;
  delete HostPair_reflection_;
  delete RedisConf::default_instance_;
  delete RedisConf_reflection_;
}

void protobuf_AddDesc_redis_5fconf_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020redis_conf.proto\022\004bbts\"\221\001\n\010HostPair\022\027\n"
    "\017master_hostname\030\001 \001(\t\022\023\n\013master_port\030\002 "
    "\001(\005\022\025\n\rmaster_weight\030\003 \001(\005\022\026\n\016slave_host"
    "name\030\004 \001(\t\022\022\n\nslave_port\030\005 \001(\005\022\024\n\014slave_"
    "weight\030\006 \001(\005\"{\n\tRedisConf\022\030\n\020max_queue_l"
    "ength\030\001 \001(\005\022\017\n\007timeout\030\002 \001(\005\022\016\n\006passwd\030\003"
    " \001(\t\022\020\n\010database\030\004 \001(\t\022!\n\thost_pair\030\005 \003("
    "\0132\016.bbts.HostPair", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redis_conf.proto", &protobuf_RegisterTypes);
  HostPair::default_instance_ = new HostPair();
  RedisConf::default_instance_ = new RedisConf();
  HostPair::default_instance_->InitAsDefaultInstance();
  RedisConf::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_redis_5fconf_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_redis_5fconf_2eproto {
  StaticDescriptorInitializer_redis_5fconf_2eproto() {
    protobuf_AddDesc_redis_5fconf_2eproto();
  }
} static_descriptor_initializer_redis_5fconf_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int HostPair::kMasterHostnameFieldNumber;
const int HostPair::kMasterPortFieldNumber;
const int HostPair::kMasterWeightFieldNumber;
const int HostPair::kSlaveHostnameFieldNumber;
const int HostPair::kSlavePortFieldNumber;
const int HostPair::kSlaveWeightFieldNumber;
#endif  // !_MSC_VER

HostPair::HostPair()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HostPair::InitAsDefaultInstance() {
}

HostPair::HostPair(const HostPair& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HostPair::SharedCtor() {
  _cached_size_ = 0;
  master_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  master_port_ = 0;
  master_weight_ = 0;
  slave_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  slave_port_ = 0;
  slave_weight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HostPair::~HostPair() {
  SharedDtor();
}

void HostPair::SharedDtor() {
  if (master_hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete master_hostname_;
  }
  if (slave_hostname_ != &::google::protobuf::internal::kEmptyString) {
    delete slave_hostname_;
  }
  if (this != default_instance_) {
  }
}

void HostPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostPair_descriptor_;
}

const HostPair& HostPair::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redis_5fconf_2eproto();  return *default_instance_;
}

HostPair* HostPair::default_instance_ = NULL;

HostPair* HostPair::New() const {
  return new HostPair;
}

void HostPair::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_master_hostname()) {
      if (master_hostname_ != &::google::protobuf::internal::kEmptyString) {
        master_hostname_->clear();
      }
    }
    master_port_ = 0;
    master_weight_ = 0;
    if (has_slave_hostname()) {
      if (slave_hostname_ != &::google::protobuf::internal::kEmptyString) {
        slave_hostname_->clear();
      }
    }
    slave_port_ = 0;
    slave_weight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HostPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string master_hostname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->master_hostname().data(), this->master_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_master_port;
        break;
      }
      
      // optional int32 master_port = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_port_)));
          set_has_master_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_master_weight;
        break;
      }
      
      // optional int32 master_weight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_master_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_weight_)));
          set_has_master_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_slave_hostname;
        break;
      }
      
      // optional string slave_hostname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slave_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->slave_hostname().data(), this->slave_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_slave_port;
        break;
      }
      
      // optional int32 slave_port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slave_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_port_)));
          set_has_slave_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_slave_weight;
        break;
      }
      
      // optional int32 slave_weight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_slave_weight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_weight_)));
          set_has_slave_weight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HostPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string master_hostname = 1;
  if (has_master_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_hostname().data(), this->master_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->master_hostname(), output);
  }
  
  // optional int32 master_port = 2;
  if (has_master_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->master_port(), output);
  }
  
  // optional int32 master_weight = 3;
  if (has_master_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->master_weight(), output);
  }
  
  // optional string slave_hostname = 4;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->slave_hostname(), output);
  }
  
  // optional int32 slave_port = 5;
  if (has_slave_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slave_port(), output);
  }
  
  // optional int32 slave_weight = 6;
  if (has_slave_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slave_weight(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HostPair::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string master_hostname = 1;
  if (has_master_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->master_hostname().data(), this->master_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_hostname(), target);
  }
  
  // optional int32 master_port = 2;
  if (has_master_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->master_port(), target);
  }
  
  // optional int32 master_weight = 3;
  if (has_master_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->master_weight(), target);
  }
  
  // optional string slave_hostname = 4;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->slave_hostname(), target);
  }
  
  // optional int32 slave_port = 5;
  if (has_slave_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slave_port(), target);
  }
  
  // optional int32 slave_weight = 6;
  if (has_slave_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slave_weight(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HostPair::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string master_hostname = 1;
    if (has_master_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_hostname());
    }
    
    // optional int32 master_port = 2;
    if (has_master_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_port());
    }
    
    // optional int32 master_weight = 3;
    if (has_master_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_weight());
    }
    
    // optional string slave_hostname = 4;
    if (has_slave_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_hostname());
    }
    
    // optional int32 slave_port = 5;
    if (has_slave_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_port());
    }
    
    // optional int32 slave_weight = 6;
    if (has_slave_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_weight());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostPair::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HostPair* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HostPair*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HostPair::MergeFrom(const HostPair& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_hostname()) {
      set_master_hostname(from.master_hostname());
    }
    if (from.has_master_port()) {
      set_master_port(from.master_port());
    }
    if (from.has_master_weight()) {
      set_master_weight(from.master_weight());
    }
    if (from.has_slave_hostname()) {
      set_slave_hostname(from.slave_hostname());
    }
    if (from.has_slave_port()) {
      set_slave_port(from.slave_port());
    }
    if (from.has_slave_weight()) {
      set_slave_weight(from.slave_weight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HostPair::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostPair::CopyFrom(const HostPair& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostPair::IsInitialized() const {
  
  return true;
}

void HostPair::Swap(HostPair* other) {
  if (other != this) {
    std::swap(master_hostname_, other->master_hostname_);
    std::swap(master_port_, other->master_port_);
    std::swap(master_weight_, other->master_weight_);
    std::swap(slave_hostname_, other->slave_hostname_);
    std::swap(slave_port_, other->slave_port_);
    std::swap(slave_weight_, other->slave_weight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HostPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostPair_descriptor_;
  metadata.reflection = HostPair_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RedisConf::kMaxQueueLengthFieldNumber;
const int RedisConf::kTimeoutFieldNumber;
const int RedisConf::kPasswdFieldNumber;
const int RedisConf::kDatabaseFieldNumber;
const int RedisConf::kHostPairFieldNumber;
#endif  // !_MSC_VER

RedisConf::RedisConf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RedisConf::InitAsDefaultInstance() {
}

RedisConf::RedisConf(const RedisConf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RedisConf::SharedCtor() {
  _cached_size_ = 0;
  max_queue_length_ = 0;
  timeout_ = 0;
  passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  database_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RedisConf::~RedisConf() {
  SharedDtor();
}

void RedisConf::SharedDtor() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    delete passwd_;
  }
  if (database_ != &::google::protobuf::internal::kEmptyString) {
    delete database_;
  }
  if (this != default_instance_) {
  }
}

void RedisConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisConf_descriptor_;
}

const RedisConf& RedisConf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_redis_5fconf_2eproto();  return *default_instance_;
}

RedisConf* RedisConf::default_instance_ = NULL;

RedisConf* RedisConf::New() const {
  return new RedisConf;
}

void RedisConf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    max_queue_length_ = 0;
    timeout_ = 0;
    if (has_passwd()) {
      if (passwd_ != &::google::protobuf::internal::kEmptyString) {
        passwd_->clear();
      }
    }
    if (has_database()) {
      if (database_ != &::google::protobuf::internal::kEmptyString) {
        database_->clear();
      }
    }
  }
  host_pair_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RedisConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_queue_length = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queue_length_)));
          set_has_max_queue_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }
      
      // optional int32 timeout = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeout:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
          set_has_timeout();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }
      
      // optional string passwd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_database;
        break;
      }
      
      // optional string database = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_database:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host_pair;
        break;
      }
      
      // repeated .bbts.HostPair host_pair = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_host_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_host_pair()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_host_pair;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RedisConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 max_queue_length = 1;
  if (has_max_queue_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_queue_length(), output);
  }
  
  // optional int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }
  
  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->passwd(), output);
  }
  
  // optional string database = 4;
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->database(), output);
  }
  
  // repeated .bbts.HostPair host_pair = 5;
  for (int i = 0; i < this->host_pair_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->host_pair(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RedisConf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 max_queue_length = 1;
  if (has_max_queue_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_queue_length(), target);
  }
  
  // optional int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }
  
  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }
  
  // optional string database = 4;
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->database(), target);
  }
  
  // repeated .bbts.HostPair host_pair = 5;
  for (int i = 0; i < this->host_pair_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->host_pair(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RedisConf::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 max_queue_length = 1;
    if (has_max_queue_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queue_length());
    }
    
    // optional int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }
    
    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }
    
    // optional string database = 4;
    if (has_database()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database());
    }
    
  }
  // repeated .bbts.HostPair host_pair = 5;
  total_size += 1 * this->host_pair_size();
  for (int i = 0; i < this->host_pair_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->host_pair(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisConf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RedisConf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RedisConf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RedisConf::MergeFrom(const RedisConf& from) {
  GOOGLE_CHECK_NE(&from, this);
  host_pair_.MergeFrom(from.host_pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_queue_length()) {
      set_max_queue_length(from.max_queue_length());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_passwd()) {
      set_passwd(from.passwd());
    }
    if (from.has_database()) {
      set_database(from.database());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RedisConf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConf::CopyFrom(const RedisConf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RedisConf::IsInitialized() const {
  
  return true;
}

void RedisConf::Swap(RedisConf* other) {
  if (other != this) {
    std::swap(max_queue_length_, other->max_queue_length_);
    std::swap(timeout_, other->timeout_);
    std::swap(passwd_, other->passwd_);
    std::swap(database_, other->database_);
    host_pair_.Swap(&other->host_pair_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RedisConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisConf_descriptor_;
  metadata.reflection = RedisConf_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

// @@protoc_insertion_point(global_scope)
