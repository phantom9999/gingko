// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "redis_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace bbts {

namespace {

const ::google::protobuf::Descriptor* HostPair_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HostPair_reflection_ = NULL;
const ::google::protobuf::Descriptor* RedisConf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RedisConf_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_redis_5fconf_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_redis_5fconf_2eproto() {
  protobuf_AddDesc_redis_5fconf_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "redis_conf.proto");
  GOOGLE_CHECK(file != NULL);
  HostPair_descriptor_ = file->message_type(0);
  static const int HostPair_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, master_weight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_hostname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, slave_weight_),
  };
  HostPair_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HostPair_descriptor_,
      HostPair::internal_default_instance(),
      HostPair_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, _has_bits_),
      -1,
      -1,
      sizeof(HostPair),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HostPair, _internal_metadata_));
  RedisConf_descriptor_ = file->message_type(1);
  static const int RedisConf_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, max_queue_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, timeout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, passwd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, database_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, host_pair_),
  };
  RedisConf_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RedisConf_descriptor_,
      RedisConf::internal_default_instance(),
      RedisConf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _has_bits_),
      -1,
      -1,
      sizeof(RedisConf),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RedisConf, _internal_metadata_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_redis_5fconf_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HostPair_descriptor_, HostPair::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RedisConf_descriptor_, RedisConf::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_redis_5fconf_2eproto() {
  HostPair_default_instance_.Shutdown();
  delete HostPair_reflection_;
  RedisConf_default_instance_.Shutdown();
  delete RedisConf_reflection_;
}

void protobuf_InitDefaults_redis_5fconf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::GetEmptyString();
  HostPair_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RedisConf_default_instance_.DefaultConstruct();
  HostPair_default_instance_.get_mutable()->InitAsDefaultInstance();
  RedisConf_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_redis_5fconf_2eproto_once_);
void protobuf_InitDefaults_redis_5fconf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_redis_5fconf_2eproto_once_,
                 &protobuf_InitDefaults_redis_5fconf_2eproto_impl);
}
void protobuf_AddDesc_redis_5fconf_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_redis_5fconf_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020redis_conf.proto\022\004bbts\"\221\001\n\010HostPair\022\027\n"
    "\017master_hostname\030\001 \001(\t\022\023\n\013master_port\030\002 "
    "\001(\005\022\025\n\rmaster_weight\030\003 \001(\005\022\026\n\016slave_host"
    "name\030\004 \001(\t\022\022\n\nslave_port\030\005 \001(\005\022\024\n\014slave_"
    "weight\030\006 \001(\005\"{\n\tRedisConf\022\030\n\020max_queue_l"
    "ength\030\001 \001(\005\022\017\n\007timeout\030\002 \001(\005\022\016\n\006passwd\030\003"
    " \001(\t\022\020\n\010database\030\004 \001(\t\022!\n\thost_pair\030\005 \003("
    "\0132\016.bbts.HostPair", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "redis_conf.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_redis_5fconf_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_redis_5fconf_2eproto_once_);
void protobuf_AddDesc_redis_5fconf_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_redis_5fconf_2eproto_once_,
                 &protobuf_AddDesc_redis_5fconf_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_redis_5fconf_2eproto {
  StaticDescriptorInitializer_redis_5fconf_2eproto() {
    protobuf_AddDesc_redis_5fconf_2eproto();
  }
} static_descriptor_initializer_redis_5fconf_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostPair::kMasterHostnameFieldNumber;
const int HostPair::kMasterPortFieldNumber;
const int HostPair::kMasterWeightFieldNumber;
const int HostPair::kSlaveHostnameFieldNumber;
const int HostPair::kSlavePortFieldNumber;
const int HostPair::kSlaveWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostPair::HostPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_redis_5fconf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.HostPair)
}

void HostPair::InitAsDefaultInstance() {
}

HostPair::HostPair(const HostPair& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.HostPair)
}

void HostPair::SharedCtor() {
  _cached_size_ = 0;
  master_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slave_hostname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&master_port_, 0, reinterpret_cast<char*>(&slave_weight_) -
    reinterpret_cast<char*>(&master_port_) + sizeof(slave_weight_));
}

HostPair::~HostPair() {
  // @@protoc_insertion_point(destructor:bbts.HostPair)
  SharedDtor();
}

void HostPair::SharedDtor() {
  master_hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  slave_hostname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostPair::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HostPair::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HostPair_descriptor_;
}

const HostPair& HostPair::default_instance() {
  protobuf_InitDefaults_redis_5fconf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<HostPair> HostPair_default_instance_;

HostPair* HostPair::New(::google::protobuf::Arena* arena) const {
  HostPair* n = new HostPair;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostPair::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.HostPair)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HostPair, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HostPair*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(master_port_, slave_weight_);
    if (has_master_hostname()) {
      master_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_slave_hostname()) {
      slave_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HostPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.HostPair)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string master_hostname = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_hostname().data(), this->master_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.HostPair.master_hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_master_port;
        break;
      }

      // optional int32 master_port = 2;
      case 2: {
        if (tag == 16) {
         parse_master_port:
          set_has_master_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master_weight;
        break;
      }

      // optional int32 master_weight = 3;
      case 3: {
        if (tag == 24) {
         parse_master_weight:
          set_has_master_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_slave_hostname;
        break;
      }

      // optional string slave_hostname = 4;
      case 4: {
        if (tag == 34) {
         parse_slave_hostname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slave_hostname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->slave_hostname().data(), this->slave_hostname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.HostPair.slave_hostname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_slave_port;
        break;
      }

      // optional int32 slave_port = 5;
      case 5: {
        if (tag == 40) {
         parse_slave_port:
          set_has_slave_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_port_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_slave_weight;
        break;
      }

      // optional int32 slave_weight = 6;
      case 6: {
        if (tag == 48) {
         parse_slave_weight:
          set_has_slave_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &slave_weight_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.HostPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.HostPair)
  return false;
#undef DO_
}

void HostPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.HostPair)
  // optional string master_hostname = 1;
  if (has_master_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_hostname().data(), this->master_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.HostPair.master_hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->master_hostname(), output);
  }

  // optional int32 master_port = 2;
  if (has_master_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->master_port(), output);
  }

  // optional int32 master_weight = 3;
  if (has_master_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->master_weight(), output);
  }

  // optional string slave_hostname = 4;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.HostPair.slave_hostname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->slave_hostname(), output);
  }

  // optional int32 slave_port = 5;
  if (has_slave_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->slave_port(), output);
  }

  // optional int32 slave_weight = 6;
  if (has_slave_weight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->slave_weight(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.HostPair)
}

::google::protobuf::uint8* HostPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.HostPair)
  // optional string master_hostname = 1;
  if (has_master_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_hostname().data(), this->master_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.HostPair.master_hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->master_hostname(), target);
  }

  // optional int32 master_port = 2;
  if (has_master_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->master_port(), target);
  }

  // optional int32 master_weight = 3;
  if (has_master_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->master_weight(), target);
  }

  // optional string slave_hostname = 4;
  if (has_slave_hostname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->slave_hostname().data(), this->slave_hostname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.HostPair.slave_hostname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->slave_hostname(), target);
  }

  // optional int32 slave_port = 5;
  if (has_slave_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->slave_port(), target);
  }

  // optional int32 slave_weight = 6;
  if (has_slave_weight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->slave_weight(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.HostPair)
  return target;
}

size_t HostPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.HostPair)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional string master_hostname = 1;
    if (has_master_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_hostname());
    }

    // optional int32 master_port = 2;
    if (has_master_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_port());
    }

    // optional int32 master_weight = 3;
    if (has_master_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->master_weight());
    }

    // optional string slave_hostname = 4;
    if (has_slave_hostname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->slave_hostname());
    }

    // optional int32 slave_port = 5;
    if (has_slave_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_port());
    }

    // optional int32 slave_weight = 6;
    if (has_slave_weight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->slave_weight());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.HostPair)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const HostPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const HostPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.HostPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.HostPair)
    UnsafeMergeFrom(*source);
  }
}

void HostPair::MergeFrom(const HostPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.HostPair)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void HostPair::UnsafeMergeFrom(const HostPair& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_hostname()) {
      set_has_master_hostname();
      master_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_hostname_);
    }
    if (from.has_master_port()) {
      set_master_port(from.master_port());
    }
    if (from.has_master_weight()) {
      set_master_weight(from.master_weight());
    }
    if (from.has_slave_hostname()) {
      set_has_slave_hostname();
      slave_hostname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slave_hostname_);
    }
    if (from.has_slave_port()) {
      set_slave_port(from.slave_port());
    }
    if (from.has_slave_weight()) {
      set_slave_weight(from.slave_weight());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void HostPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.HostPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HostPair::CopyFrom(const HostPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.HostPair)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool HostPair::IsInitialized() const {

  return true;
}

void HostPair::Swap(HostPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostPair::InternalSwap(HostPair* other) {
  master_hostname_.Swap(&other->master_hostname_);
  std::swap(master_port_, other->master_port_);
  std::swap(master_weight_, other->master_weight_);
  slave_hostname_.Swap(&other->slave_hostname_);
  std::swap(slave_port_, other->slave_port_);
  std::swap(slave_weight_, other->slave_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HostPair::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HostPair_descriptor_;
  metadata.reflection = HostPair_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostPair

// optional string master_hostname = 1;
bool HostPair::has_master_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HostPair::set_has_master_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
void HostPair::clear_has_master_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
void HostPair::clear_master_hostname() {
  master_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_master_hostname();
}
const ::std::string& HostPair::master_hostname() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.master_hostname)
  return master_hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostPair::set_master_hostname(const ::std::string& value) {
  set_has_master_hostname();
  master_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.HostPair.master_hostname)
}
void HostPair::set_master_hostname(const char* value) {
  set_has_master_hostname();
  master_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.HostPair.master_hostname)
}
void HostPair::set_master_hostname(const char* value, size_t size) {
  set_has_master_hostname();
  master_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.HostPair.master_hostname)
}
::std::string* HostPair::mutable_master_hostname() {
  set_has_master_hostname();
  // @@protoc_insertion_point(field_mutable:bbts.HostPair.master_hostname)
  return master_hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostPair::release_master_hostname() {
  // @@protoc_insertion_point(field_release:bbts.HostPair.master_hostname)
  clear_has_master_hostname();
  return master_hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostPair::set_allocated_master_hostname(::std::string* master_hostname) {
  if (master_hostname != NULL) {
    set_has_master_hostname();
  } else {
    clear_has_master_hostname();
  }
  master_hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_hostname);
  // @@protoc_insertion_point(field_set_allocated:bbts.HostPair.master_hostname)
}

// optional int32 master_port = 2;
bool HostPair::has_master_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HostPair::set_has_master_port() {
  _has_bits_[0] |= 0x00000002u;
}
void HostPair::clear_has_master_port() {
  _has_bits_[0] &= ~0x00000002u;
}
void HostPair::clear_master_port() {
  master_port_ = 0;
  clear_has_master_port();
}
::google::protobuf::int32 HostPair::master_port() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.master_port)
  return master_port_;
}
void HostPair::set_master_port(::google::protobuf::int32 value) {
  set_has_master_port();
  master_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.HostPair.master_port)
}

// optional int32 master_weight = 3;
bool HostPair::has_master_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HostPair::set_has_master_weight() {
  _has_bits_[0] |= 0x00000004u;
}
void HostPair::clear_has_master_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
void HostPair::clear_master_weight() {
  master_weight_ = 0;
  clear_has_master_weight();
}
::google::protobuf::int32 HostPair::master_weight() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.master_weight)
  return master_weight_;
}
void HostPair::set_master_weight(::google::protobuf::int32 value) {
  set_has_master_weight();
  master_weight_ = value;
  // @@protoc_insertion_point(field_set:bbts.HostPair.master_weight)
}

// optional string slave_hostname = 4;
bool HostPair::has_slave_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HostPair::set_has_slave_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
void HostPair::clear_has_slave_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
void HostPair::clear_slave_hostname() {
  slave_hostname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_slave_hostname();
}
const ::std::string& HostPair::slave_hostname() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.slave_hostname)
  return slave_hostname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostPair::set_slave_hostname(const ::std::string& value) {
  set_has_slave_hostname();
  slave_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.HostPair.slave_hostname)
}
void HostPair::set_slave_hostname(const char* value) {
  set_has_slave_hostname();
  slave_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.HostPair.slave_hostname)
}
void HostPair::set_slave_hostname(const char* value, size_t size) {
  set_has_slave_hostname();
  slave_hostname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.HostPair.slave_hostname)
}
::std::string* HostPair::mutable_slave_hostname() {
  set_has_slave_hostname();
  // @@protoc_insertion_point(field_mutable:bbts.HostPair.slave_hostname)
  return slave_hostname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostPair::release_slave_hostname() {
  // @@protoc_insertion_point(field_release:bbts.HostPair.slave_hostname)
  clear_has_slave_hostname();
  return slave_hostname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostPair::set_allocated_slave_hostname(::std::string* slave_hostname) {
  if (slave_hostname != NULL) {
    set_has_slave_hostname();
  } else {
    clear_has_slave_hostname();
  }
  slave_hostname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slave_hostname);
  // @@protoc_insertion_point(field_set_allocated:bbts.HostPair.slave_hostname)
}

// optional int32 slave_port = 5;
bool HostPair::has_slave_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HostPair::set_has_slave_port() {
  _has_bits_[0] |= 0x00000010u;
}
void HostPair::clear_has_slave_port() {
  _has_bits_[0] &= ~0x00000010u;
}
void HostPair::clear_slave_port() {
  slave_port_ = 0;
  clear_has_slave_port();
}
::google::protobuf::int32 HostPair::slave_port() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.slave_port)
  return slave_port_;
}
void HostPair::set_slave_port(::google::protobuf::int32 value) {
  set_has_slave_port();
  slave_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.HostPair.slave_port)
}

// optional int32 slave_weight = 6;
bool HostPair::has_slave_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void HostPair::set_has_slave_weight() {
  _has_bits_[0] |= 0x00000020u;
}
void HostPair::clear_has_slave_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
void HostPair::clear_slave_weight() {
  slave_weight_ = 0;
  clear_has_slave_weight();
}
::google::protobuf::int32 HostPair::slave_weight() const {
  // @@protoc_insertion_point(field_get:bbts.HostPair.slave_weight)
  return slave_weight_;
}
void HostPair::set_slave_weight(::google::protobuf::int32 value) {
  set_has_slave_weight();
  slave_weight_ = value;
  // @@protoc_insertion_point(field_set:bbts.HostPair.slave_weight)
}

inline const HostPair* HostPair::internal_default_instance() {
  return &HostPair_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RedisConf::kMaxQueueLengthFieldNumber;
const int RedisConf::kTimeoutFieldNumber;
const int RedisConf::kPasswdFieldNumber;
const int RedisConf::kDatabaseFieldNumber;
const int RedisConf::kHostPairFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RedisConf::RedisConf()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_redis_5fconf_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:bbts.RedisConf)
}

void RedisConf::InitAsDefaultInstance() {
}

RedisConf::RedisConf(const RedisConf& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:bbts.RedisConf)
}

void RedisConf::SharedCtor() {
  _cached_size_ = 0;
  passwd_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&max_queue_length_, 0, reinterpret_cast<char*>(&timeout_) -
    reinterpret_cast<char*>(&max_queue_length_) + sizeof(timeout_));
}

RedisConf::~RedisConf() {
  // @@protoc_insertion_point(destructor:bbts.RedisConf)
  SharedDtor();
}

void RedisConf::SharedDtor() {
  passwd_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  database_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RedisConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RedisConf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RedisConf_descriptor_;
}

const RedisConf& RedisConf::default_instance() {
  protobuf_InitDefaults_redis_5fconf_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RedisConf> RedisConf_default_instance_;

RedisConf* RedisConf::New(::google::protobuf::Arena* arena) const {
  RedisConf* n = new RedisConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RedisConf::Clear() {
// @@protoc_insertion_point(message_clear_start:bbts.RedisConf)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RedisConf, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RedisConf*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(max_queue_length_, timeout_);
    if (has_passwd()) {
      passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_database()) {
      database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  host_pair_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RedisConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:bbts.RedisConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 max_queue_length = 1;
      case 1: {
        if (tag == 8) {
          set_has_max_queue_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &max_queue_length_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_timeout;
        break;
      }

      // optional int32 timeout = 2;
      case 2: {
        if (tag == 16) {
         parse_timeout:
          set_has_timeout();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeout_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_passwd;
        break;
      }

      // optional string passwd = 3;
      case 3: {
        if (tag == 26) {
         parse_passwd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_passwd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->passwd().data(), this->passwd().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.RedisConf.passwd");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_database;
        break;
      }

      // optional string database = 4;
      case 4: {
        if (tag == 34) {
         parse_database:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_database()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->database().data(), this->database().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bbts.RedisConf.database");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_host_pair;
        break;
      }

      // repeated .bbts.HostPair host_pair = 5;
      case 5: {
        if (tag == 42) {
         parse_host_pair:
          DO_(input->IncrementRecursionDepth());
         parse_loop_host_pair:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_host_pair()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_host_pair;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:bbts.RedisConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:bbts.RedisConf)
  return false;
#undef DO_
}

void RedisConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:bbts.RedisConf)
  // optional int32 max_queue_length = 1;
  if (has_max_queue_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->max_queue_length(), output);
  }

  // optional int32 timeout = 2;
  if (has_timeout()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeout(), output);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.RedisConf.passwd");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->passwd(), output);
  }

  // optional string database = 4;
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.RedisConf.database");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->database(), output);
  }

  // repeated .bbts.HostPair host_pair = 5;
  for (unsigned int i = 0, n = this->host_pair_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->host_pair(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:bbts.RedisConf)
}

::google::protobuf::uint8* RedisConf::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:bbts.RedisConf)
  // optional int32 max_queue_length = 1;
  if (has_max_queue_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->max_queue_length(), target);
  }

  // optional int32 timeout = 2;
  if (has_timeout()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeout(), target);
  }

  // optional string passwd = 3;
  if (has_passwd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->passwd().data(), this->passwd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.RedisConf.passwd");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->passwd(), target);
  }

  // optional string database = 4;
  if (has_database()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->database().data(), this->database().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bbts.RedisConf.database");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->database(), target);
  }

  // repeated .bbts.HostPair host_pair = 5;
  for (unsigned int i = 0, n = this->host_pair_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->host_pair(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bbts.RedisConf)
  return target;
}

size_t RedisConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bbts.RedisConf)
  size_t total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 max_queue_length = 1;
    if (has_max_queue_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->max_queue_length());
    }

    // optional int32 timeout = 2;
    if (has_timeout()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeout());
    }

    // optional string passwd = 3;
    if (has_passwd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->passwd());
    }

    // optional string database = 4;
    if (has_database()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->database());
    }

  }
  // repeated .bbts.HostPair host_pair = 5;
  {
    unsigned int count = this->host_pair_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->host_pair(i));
    }
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RedisConf::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:bbts.RedisConf)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RedisConf* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RedisConf>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:bbts.RedisConf)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:bbts.RedisConf)
    UnsafeMergeFrom(*source);
  }
}

void RedisConf::MergeFrom(const RedisConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:bbts.RedisConf)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RedisConf::UnsafeMergeFrom(const RedisConf& from) {
  GOOGLE_DCHECK(&from != this);
  host_pair_.MergeFrom(from.host_pair_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_max_queue_length()) {
      set_max_queue_length(from.max_queue_length());
    }
    if (from.has_timeout()) {
      set_timeout(from.timeout());
    }
    if (from.has_passwd()) {
      set_has_passwd();
      passwd_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.passwd_);
    }
    if (from.has_database()) {
      set_has_database();
      database_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.database_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RedisConf::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:bbts.RedisConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RedisConf::CopyFrom(const RedisConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bbts.RedisConf)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RedisConf::IsInitialized() const {

  return true;
}

void RedisConf::Swap(RedisConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RedisConf::InternalSwap(RedisConf* other) {
  std::swap(max_queue_length_, other->max_queue_length_);
  std::swap(timeout_, other->timeout_);
  passwd_.Swap(&other->passwd_);
  database_.Swap(&other->database_);
  host_pair_.UnsafeArenaSwap(&other->host_pair_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RedisConf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RedisConf_descriptor_;
  metadata.reflection = RedisConf_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RedisConf

// optional int32 max_queue_length = 1;
bool RedisConf::has_max_queue_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RedisConf::set_has_max_queue_length() {
  _has_bits_[0] |= 0x00000001u;
}
void RedisConf::clear_has_max_queue_length() {
  _has_bits_[0] &= ~0x00000001u;
}
void RedisConf::clear_max_queue_length() {
  max_queue_length_ = 0;
  clear_has_max_queue_length();
}
::google::protobuf::int32 RedisConf::max_queue_length() const {
  // @@protoc_insertion_point(field_get:bbts.RedisConf.max_queue_length)
  return max_queue_length_;
}
void RedisConf::set_max_queue_length(::google::protobuf::int32 value) {
  set_has_max_queue_length();
  max_queue_length_ = value;
  // @@protoc_insertion_point(field_set:bbts.RedisConf.max_queue_length)
}

// optional int32 timeout = 2;
bool RedisConf::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RedisConf::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
void RedisConf::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
void RedisConf::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
::google::protobuf::int32 RedisConf::timeout() const {
  // @@protoc_insertion_point(field_get:bbts.RedisConf.timeout)
  return timeout_;
}
void RedisConf::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.RedisConf.timeout)
}

// optional string passwd = 3;
bool RedisConf::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RedisConf::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
void RedisConf::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
void RedisConf::clear_passwd() {
  passwd_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_passwd();
}
const ::std::string& RedisConf::passwd() const {
  // @@protoc_insertion_point(field_get:bbts.RedisConf.passwd)
  return passwd_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConf::set_passwd(const ::std::string& value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.RedisConf.passwd)
}
void RedisConf::set_passwd(const char* value) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.RedisConf.passwd)
}
void RedisConf::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  passwd_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.RedisConf.passwd)
}
::std::string* RedisConf::mutable_passwd() {
  set_has_passwd();
  // @@protoc_insertion_point(field_mutable:bbts.RedisConf.passwd)
  return passwd_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisConf::release_passwd() {
  // @@protoc_insertion_point(field_release:bbts.RedisConf.passwd)
  clear_has_passwd();
  return passwd_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConf::set_allocated_passwd(::std::string* passwd) {
  if (passwd != NULL) {
    set_has_passwd();
  } else {
    clear_has_passwd();
  }
  passwd_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), passwd);
  // @@protoc_insertion_point(field_set_allocated:bbts.RedisConf.passwd)
}

// optional string database = 4;
bool RedisConf::has_database() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RedisConf::set_has_database() {
  _has_bits_[0] |= 0x00000008u;
}
void RedisConf::clear_has_database() {
  _has_bits_[0] &= ~0x00000008u;
}
void RedisConf::clear_database() {
  database_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_database();
}
const ::std::string& RedisConf::database() const {
  // @@protoc_insertion_point(field_get:bbts.RedisConf.database)
  return database_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConf::set_database(const ::std::string& value) {
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.RedisConf.database)
}
void RedisConf::set_database(const char* value) {
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.RedisConf.database)
}
void RedisConf::set_database(const char* value, size_t size) {
  set_has_database();
  database_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.RedisConf.database)
}
::std::string* RedisConf::mutable_database() {
  set_has_database();
  // @@protoc_insertion_point(field_mutable:bbts.RedisConf.database)
  return database_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RedisConf::release_database() {
  // @@protoc_insertion_point(field_release:bbts.RedisConf.database)
  clear_has_database();
  return database_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RedisConf::set_allocated_database(::std::string* database) {
  if (database != NULL) {
    set_has_database();
  } else {
    clear_has_database();
  }
  database_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), database);
  // @@protoc_insertion_point(field_set_allocated:bbts.RedisConf.database)
}

// repeated .bbts.HostPair host_pair = 5;
int RedisConf::host_pair_size() const {
  return host_pair_.size();
}
void RedisConf::clear_host_pair() {
  host_pair_.Clear();
}
const ::bbts::HostPair& RedisConf::host_pair(int index) const {
  // @@protoc_insertion_point(field_get:bbts.RedisConf.host_pair)
  return host_pair_.Get(index);
}
::bbts::HostPair* RedisConf::mutable_host_pair(int index) {
  // @@protoc_insertion_point(field_mutable:bbts.RedisConf.host_pair)
  return host_pair_.Mutable(index);
}
::bbts::HostPair* RedisConf::add_host_pair() {
  // @@protoc_insertion_point(field_add:bbts.RedisConf.host_pair)
  return host_pair_.Add();
}
::google::protobuf::RepeatedPtrField< ::bbts::HostPair >*
RedisConf::mutable_host_pair() {
  // @@protoc_insertion_point(field_mutable_list:bbts.RedisConf.host_pair)
  return &host_pair_;
}
const ::google::protobuf::RepeatedPtrField< ::bbts::HostPair >&
RedisConf::host_pair() const {
  // @@protoc_insertion_point(field_list:bbts.RedisConf.host_pair)
  return host_pair_;
}

inline const RedisConf* RedisConf::internal_default_instance() {
  return &RedisConf_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

// @@protoc_insertion_point(global_scope)
