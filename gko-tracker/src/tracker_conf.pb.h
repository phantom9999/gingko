// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker_conf.proto

#ifndef PROTOBUF_tracker_5fconf_2eproto__INCLUDED
#define PROTOBUF_tracker_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace tracker {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tracker_5fconf_2eproto();
void protobuf_InitDefaults_tracker_5fconf_2eproto();
void protobuf_AssignDesc_tracker_5fconf_2eproto();
void protobuf_ShutdownFile_tracker_5fconf_2eproto();

class TrackerConf;

// ===================================================================

class TrackerConf : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:bbts.tracker.TrackerConf) */ {
 public:
  TrackerConf();
  virtual ~TrackerConf();

  TrackerConf(const TrackerConf& from);

  inline TrackerConf& operator=(const TrackerConf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerConf& default_instance();

  static const TrackerConf* internal_default_instance();

  void Swap(TrackerConf* other);

  // implements Message ----------------------------------------------

  inline TrackerConf* New() const { return New(NULL); }

  TrackerConf* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerConf& from);
  void MergeFrom(const TrackerConf& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackerConf* other);
  void UnsafeMergeFrom(const TrackerConf& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 port = 1;
  bool has_port() const;
  void clear_port();
  static const int kPortFieldNumber = 1;
  ::google::protobuf::int32 port() const;
  void set_port(::google::protobuf::int32 value);

  // optional int32 thread_num = 2;
  bool has_thread_num() const;
  void clear_thread_num();
  static const int kThreadNumFieldNumber = 2;
  ::google::protobuf::int32 thread_num() const;
  void set_thread_num(::google::protobuf::int32 value);

  // optional string conf_dir = 3;
  bool has_conf_dir() const;
  void clear_conf_dir();
  static const int kConfDirFieldNumber = 3;
  const ::std::string& conf_dir() const;
  void set_conf_dir(const ::std::string& value);
  void set_conf_dir(const char* value);
  void set_conf_dir(const char* value, size_t size);
  ::std::string* mutable_conf_dir();
  ::std::string* release_conf_dir();
  void set_allocated_conf_dir(::std::string* conf_dir);

  // optional string log_path = 4;
  bool has_log_path() const;
  void clear_log_path();
  static const int kLogPathFieldNumber = 4;
  const ::std::string& log_path() const;
  void set_log_path(const ::std::string& value);
  void set_log_path(const char* value);
  void set_log_path(const char* value, size_t size);
  ::std::string* mutable_log_path();
  ::std::string* release_log_path();
  void set_allocated_log_path(::std::string* log_path);

  // optional int32 httpd_port = 5;
  bool has_httpd_port() const;
  void clear_httpd_port();
  static const int kHttpdPortFieldNumber = 5;
  ::google::protobuf::int32 httpd_port() const;
  void set_httpd_port(::google::protobuf::int32 value);

  // optional int32 monitor_cycle_second = 6;
  bool has_monitor_cycle_second() const;
  void clear_monitor_cycle_second();
  static const int kMonitorCycleSecondFieldNumber = 6;
  ::google::protobuf::int32 monitor_cycle_second() const;
  void set_monitor_cycle_second(::google::protobuf::int32 value);

  // optional int32 info_hash_expire_time = 7;
  bool has_info_hash_expire_time() const;
  void clear_info_hash_expire_time();
  static const int kInfoHashExpireTimeFieldNumber = 7;
  ::google::protobuf::int32 info_hash_expire_time() const;
  void set_info_hash_expire_time(::google::protobuf::int32 value);

  // optional int32 remote_peers_syncronizer_num = 8;
  bool has_remote_peers_syncronizer_num() const;
  void clear_remote_peers_syncronizer_num();
  static const int kRemotePeersSyncronizerNumFieldNumber = 8;
  ::google::protobuf::int32 remote_peers_syncronizer_num() const;
  void set_remote_peers_syncronizer_num(::google::protobuf::int32 value);

  // optional int32 server_send_timeout = 9;
  bool has_server_send_timeout() const;
  void clear_server_send_timeout();
  static const int kServerSendTimeoutFieldNumber = 9;
  ::google::protobuf::int32 server_send_timeout() const;
  void set_server_send_timeout(::google::protobuf::int32 value);

  // optional int32 server_recv_timeout = 10;
  bool has_server_recv_timeout() const;
  void clear_server_recv_timeout();
  static const int kServerRecvTimeoutFieldNumber = 10;
  ::google::protobuf::int32 server_recv_timeout() const;
  void set_server_recv_timeout(::google::protobuf::int32 value);

  // optional int32 server_accept_timeout = 11;
  bool has_server_accept_timeout() const;
  void clear_server_accept_timeout();
  static const int kServerAcceptTimeoutFieldNumber = 11;
  ::google::protobuf::int32 server_accept_timeout() const;
  void set_server_accept_timeout(::google::protobuf::int32 value);

  // optional int32 task_expire_time = 12;
  bool has_task_expire_time() const;
  void clear_task_expire_time();
  static const int kTaskExpireTimeFieldNumber = 12;
  ::google::protobuf::int32 task_expire_time() const;
  void set_task_expire_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:bbts.tracker.TrackerConf)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_conf_dir();
  inline void clear_has_conf_dir();
  inline void set_has_log_path();
  inline void clear_has_log_path();
  inline void set_has_httpd_port();
  inline void clear_has_httpd_port();
  inline void set_has_monitor_cycle_second();
  inline void clear_has_monitor_cycle_second();
  inline void set_has_info_hash_expire_time();
  inline void clear_has_info_hash_expire_time();
  inline void set_has_remote_peers_syncronizer_num();
  inline void clear_has_remote_peers_syncronizer_num();
  inline void set_has_server_send_timeout();
  inline void clear_has_server_send_timeout();
  inline void set_has_server_recv_timeout();
  inline void clear_has_server_recv_timeout();
  inline void set_has_server_accept_timeout();
  inline void clear_has_server_accept_timeout();
  inline void set_has_task_expire_time();
  inline void clear_has_task_expire_time();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr conf_dir_;
  ::google::protobuf::internal::ArenaStringPtr log_path_;
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 thread_num_;
  ::google::protobuf::int32 httpd_port_;
  ::google::protobuf::int32 monitor_cycle_second_;
  ::google::protobuf::int32 info_hash_expire_time_;
  ::google::protobuf::int32 remote_peers_syncronizer_num_;
  ::google::protobuf::int32 server_send_timeout_;
  ::google::protobuf::int32 server_recv_timeout_;
  ::google::protobuf::int32 server_accept_timeout_;
  ::google::protobuf::int32 task_expire_time_;
  friend void  protobuf_InitDefaults_tracker_5fconf_2eproto_impl();
  friend void  protobuf_AddDesc_tracker_5fconf_2eproto_impl();
  friend void protobuf_AssignDesc_tracker_5fconf_2eproto();
  friend void protobuf_ShutdownFile_tracker_5fconf_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TrackerConf> TrackerConf_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackerConf

// optional int32 port = 1;
inline bool TrackerConf::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerConf::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 TrackerConf::port() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.port)
  return port_;
}
inline void TrackerConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.port)
}

// optional int32 thread_num = 2;
inline bool TrackerConf::has_thread_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerConf::set_has_thread_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerConf::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerConf::clear_thread_num() {
  thread_num_ = 0;
  clear_has_thread_num();
}
inline ::google::protobuf::int32 TrackerConf::thread_num() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.thread_num)
  return thread_num_;
}
inline void TrackerConf::set_thread_num(::google::protobuf::int32 value) {
  set_has_thread_num();
  thread_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.thread_num)
}

// optional string conf_dir = 3;
inline bool TrackerConf::has_conf_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackerConf::set_has_conf_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackerConf::clear_has_conf_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackerConf::clear_conf_dir() {
  conf_dir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_conf_dir();
}
inline const ::std::string& TrackerConf::conf_dir() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.conf_dir)
  return conf_dir_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerConf::set_conf_dir(const ::std::string& value) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.conf_dir)
}
inline void TrackerConf::set_conf_dir(const char* value) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.tracker.TrackerConf.conf_dir)
}
inline void TrackerConf::set_conf_dir(const char* value, size_t size) {
  set_has_conf_dir();
  conf_dir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.tracker.TrackerConf.conf_dir)
}
inline ::std::string* TrackerConf::mutable_conf_dir() {
  set_has_conf_dir();
  // @@protoc_insertion_point(field_mutable:bbts.tracker.TrackerConf.conf_dir)
  return conf_dir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackerConf::release_conf_dir() {
  // @@protoc_insertion_point(field_release:bbts.tracker.TrackerConf.conf_dir)
  clear_has_conf_dir();
  return conf_dir_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerConf::set_allocated_conf_dir(::std::string* conf_dir) {
  if (conf_dir != NULL) {
    set_has_conf_dir();
  } else {
    clear_has_conf_dir();
  }
  conf_dir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), conf_dir);
  // @@protoc_insertion_point(field_set_allocated:bbts.tracker.TrackerConf.conf_dir)
}

// optional string log_path = 4;
inline bool TrackerConf::has_log_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackerConf::set_has_log_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackerConf::clear_has_log_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackerConf::clear_log_path() {
  log_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log_path();
}
inline const ::std::string& TrackerConf::log_path() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.log_path)
  return log_path_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerConf::set_log_path(const ::std::string& value) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.log_path)
}
inline void TrackerConf::set_log_path(const char* value) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bbts.tracker.TrackerConf.log_path)
}
inline void TrackerConf::set_log_path(const char* value, size_t size) {
  set_has_log_path();
  log_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bbts.tracker.TrackerConf.log_path)
}
inline ::std::string* TrackerConf::mutable_log_path() {
  set_has_log_path();
  // @@protoc_insertion_point(field_mutable:bbts.tracker.TrackerConf.log_path)
  return log_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TrackerConf::release_log_path() {
  // @@protoc_insertion_point(field_release:bbts.tracker.TrackerConf.log_path)
  clear_has_log_path();
  return log_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TrackerConf::set_allocated_log_path(::std::string* log_path) {
  if (log_path != NULL) {
    set_has_log_path();
  } else {
    clear_has_log_path();
  }
  log_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log_path);
  // @@protoc_insertion_point(field_set_allocated:bbts.tracker.TrackerConf.log_path)
}

// optional int32 httpd_port = 5;
inline bool TrackerConf::has_httpd_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackerConf::set_has_httpd_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackerConf::clear_has_httpd_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackerConf::clear_httpd_port() {
  httpd_port_ = 0;
  clear_has_httpd_port();
}
inline ::google::protobuf::int32 TrackerConf::httpd_port() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.httpd_port)
  return httpd_port_;
}
inline void TrackerConf::set_httpd_port(::google::protobuf::int32 value) {
  set_has_httpd_port();
  httpd_port_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.httpd_port)
}

// optional int32 monitor_cycle_second = 6;
inline bool TrackerConf::has_monitor_cycle_second() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackerConf::set_has_monitor_cycle_second() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackerConf::clear_has_monitor_cycle_second() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackerConf::clear_monitor_cycle_second() {
  monitor_cycle_second_ = 0;
  clear_has_monitor_cycle_second();
}
inline ::google::protobuf::int32 TrackerConf::monitor_cycle_second() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.monitor_cycle_second)
  return monitor_cycle_second_;
}
inline void TrackerConf::set_monitor_cycle_second(::google::protobuf::int32 value) {
  set_has_monitor_cycle_second();
  monitor_cycle_second_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.monitor_cycle_second)
}

// optional int32 info_hash_expire_time = 7;
inline bool TrackerConf::has_info_hash_expire_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackerConf::set_has_info_hash_expire_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackerConf::clear_has_info_hash_expire_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackerConf::clear_info_hash_expire_time() {
  info_hash_expire_time_ = 0;
  clear_has_info_hash_expire_time();
}
inline ::google::protobuf::int32 TrackerConf::info_hash_expire_time() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.info_hash_expire_time)
  return info_hash_expire_time_;
}
inline void TrackerConf::set_info_hash_expire_time(::google::protobuf::int32 value) {
  set_has_info_hash_expire_time();
  info_hash_expire_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.info_hash_expire_time)
}

// optional int32 remote_peers_syncronizer_num = 8;
inline bool TrackerConf::has_remote_peers_syncronizer_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackerConf::set_has_remote_peers_syncronizer_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackerConf::clear_has_remote_peers_syncronizer_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackerConf::clear_remote_peers_syncronizer_num() {
  remote_peers_syncronizer_num_ = 0;
  clear_has_remote_peers_syncronizer_num();
}
inline ::google::protobuf::int32 TrackerConf::remote_peers_syncronizer_num() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.remote_peers_syncronizer_num)
  return remote_peers_syncronizer_num_;
}
inline void TrackerConf::set_remote_peers_syncronizer_num(::google::protobuf::int32 value) {
  set_has_remote_peers_syncronizer_num();
  remote_peers_syncronizer_num_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.remote_peers_syncronizer_num)
}

// optional int32 server_send_timeout = 9;
inline bool TrackerConf::has_server_send_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackerConf::set_has_server_send_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackerConf::clear_has_server_send_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackerConf::clear_server_send_timeout() {
  server_send_timeout_ = 0;
  clear_has_server_send_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_send_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_send_timeout)
  return server_send_timeout_;
}
inline void TrackerConf::set_server_send_timeout(::google::protobuf::int32 value) {
  set_has_server_send_timeout();
  server_send_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_send_timeout)
}

// optional int32 server_recv_timeout = 10;
inline bool TrackerConf::has_server_recv_timeout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackerConf::set_has_server_recv_timeout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackerConf::clear_has_server_recv_timeout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackerConf::clear_server_recv_timeout() {
  server_recv_timeout_ = 0;
  clear_has_server_recv_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_recv_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_recv_timeout)
  return server_recv_timeout_;
}
inline void TrackerConf::set_server_recv_timeout(::google::protobuf::int32 value) {
  set_has_server_recv_timeout();
  server_recv_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_recv_timeout)
}

// optional int32 server_accept_timeout = 11;
inline bool TrackerConf::has_server_accept_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackerConf::set_has_server_accept_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackerConf::clear_has_server_accept_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackerConf::clear_server_accept_timeout() {
  server_accept_timeout_ = 0;
  clear_has_server_accept_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_accept_timeout() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.server_accept_timeout)
  return server_accept_timeout_;
}
inline void TrackerConf::set_server_accept_timeout(::google::protobuf::int32 value) {
  set_has_server_accept_timeout();
  server_accept_timeout_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.server_accept_timeout)
}

// optional int32 task_expire_time = 12;
inline bool TrackerConf::has_task_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackerConf::set_has_task_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackerConf::clear_has_task_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackerConf::clear_task_expire_time() {
  task_expire_time_ = 0;
  clear_has_task_expire_time();
}
inline ::google::protobuf::int32 TrackerConf::task_expire_time() const {
  // @@protoc_insertion_point(field_get:bbts.tracker.TrackerConf.task_expire_time)
  return task_expire_time_;
}
inline void TrackerConf::set_task_expire_time(::google::protobuf::int32 value) {
  set_has_task_expire_time();
  task_expire_time_ = value;
  // @@protoc_insertion_point(field_set:bbts.tracker.TrackerConf.task_expire_time)
}

inline const TrackerConf* TrackerConf::internal_default_instance() {
  return &TrackerConf_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker
}  // namespace bbts

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_5fconf_2eproto__INCLUDED
