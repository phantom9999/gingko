// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: redis_conf.proto

#ifndef PROTOBUF_redis_5fconf_2eproto__INCLUDED
#define PROTOBUF_redis_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bbts {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_redis_5fconf_2eproto();
void protobuf_AssignDesc_redis_5fconf_2eproto();
void protobuf_ShutdownFile_redis_5fconf_2eproto();

class HostPair;
class RedisConf;

// ===================================================================

class HostPair : public ::google::protobuf::Message {
 public:
  HostPair();
  virtual ~HostPair();
  
  HostPair(const HostPair& from);
  
  inline HostPair& operator=(const HostPair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const HostPair& default_instance();
  
  void Swap(HostPair* other);
  
  // implements Message ----------------------------------------------
  
  HostPair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HostPair& from);
  void MergeFrom(const HostPair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional string master_hostname = 1;
  inline bool has_master_hostname() const;
  inline void clear_master_hostname();
  static const int kMasterHostnameFieldNumber = 1;
  inline const ::std::string& master_hostname() const;
  inline void set_master_hostname(const ::std::string& value);
  inline void set_master_hostname(const char* value);
  inline void set_master_hostname(const char* value, size_t size);
  inline ::std::string* mutable_master_hostname();
  inline ::std::string* release_master_hostname();
  
  // optional int32 master_port = 2;
  inline bool has_master_port() const;
  inline void clear_master_port();
  static const int kMasterPortFieldNumber = 2;
  inline ::google::protobuf::int32 master_port() const;
  inline void set_master_port(::google::protobuf::int32 value);
  
  // optional int32 master_weight = 3;
  inline bool has_master_weight() const;
  inline void clear_master_weight();
  static const int kMasterWeightFieldNumber = 3;
  inline ::google::protobuf::int32 master_weight() const;
  inline void set_master_weight(::google::protobuf::int32 value);
  
  // optional string slave_hostname = 4;
  inline bool has_slave_hostname() const;
  inline void clear_slave_hostname();
  static const int kSlaveHostnameFieldNumber = 4;
  inline const ::std::string& slave_hostname() const;
  inline void set_slave_hostname(const ::std::string& value);
  inline void set_slave_hostname(const char* value);
  inline void set_slave_hostname(const char* value, size_t size);
  inline ::std::string* mutable_slave_hostname();
  inline ::std::string* release_slave_hostname();
  
  // optional int32 slave_port = 5;
  inline bool has_slave_port() const;
  inline void clear_slave_port();
  static const int kSlavePortFieldNumber = 5;
  inline ::google::protobuf::int32 slave_port() const;
  inline void set_slave_port(::google::protobuf::int32 value);
  
  // optional int32 slave_weight = 6;
  inline bool has_slave_weight() const;
  inline void clear_slave_weight();
  static const int kSlaveWeightFieldNumber = 6;
  inline ::google::protobuf::int32 slave_weight() const;
  inline void set_slave_weight(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.HostPair)
 private:
  inline void set_has_master_hostname();
  inline void clear_has_master_hostname();
  inline void set_has_master_port();
  inline void clear_has_master_port();
  inline void set_has_master_weight();
  inline void clear_has_master_weight();
  inline void set_has_slave_hostname();
  inline void clear_has_slave_hostname();
  inline void set_has_slave_port();
  inline void clear_has_slave_port();
  inline void set_has_slave_weight();
  inline void clear_has_slave_weight();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* master_hostname_;
  ::google::protobuf::int32 master_port_;
  ::google::protobuf::int32 master_weight_;
  ::std::string* slave_hostname_;
  ::google::protobuf::int32 slave_port_;
  ::google::protobuf::int32 slave_weight_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_redis_5fconf_2eproto();
  friend void protobuf_AssignDesc_redis_5fconf_2eproto();
  friend void protobuf_ShutdownFile_redis_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static HostPair* default_instance_;
};
// -------------------------------------------------------------------

class RedisConf : public ::google::protobuf::Message {
 public:
  RedisConf();
  virtual ~RedisConf();
  
  RedisConf(const RedisConf& from);
  
  inline RedisConf& operator=(const RedisConf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RedisConf& default_instance();
  
  void Swap(RedisConf* other);
  
  // implements Message ----------------------------------------------
  
  RedisConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RedisConf& from);
  void MergeFrom(const RedisConf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 max_queue_length = 1;
  inline bool has_max_queue_length() const;
  inline void clear_max_queue_length();
  static const int kMaxQueueLengthFieldNumber = 1;
  inline ::google::protobuf::int32 max_queue_length() const;
  inline void set_max_queue_length(::google::protobuf::int32 value);
  
  // optional int32 timeout = 2;
  inline bool has_timeout() const;
  inline void clear_timeout();
  static const int kTimeoutFieldNumber = 2;
  inline ::google::protobuf::int32 timeout() const;
  inline void set_timeout(::google::protobuf::int32 value);
  
  // optional string passwd = 3;
  inline bool has_passwd() const;
  inline void clear_passwd();
  static const int kPasswdFieldNumber = 3;
  inline const ::std::string& passwd() const;
  inline void set_passwd(const ::std::string& value);
  inline void set_passwd(const char* value);
  inline void set_passwd(const char* value, size_t size);
  inline ::std::string* mutable_passwd();
  inline ::std::string* release_passwd();
  
  // optional string database = 4;
  inline bool has_database() const;
  inline void clear_database();
  static const int kDatabaseFieldNumber = 4;
  inline const ::std::string& database() const;
  inline void set_database(const ::std::string& value);
  inline void set_database(const char* value);
  inline void set_database(const char* value, size_t size);
  inline ::std::string* mutable_database();
  inline ::std::string* release_database();
  
  // repeated .bbts.HostPair host_pair = 5;
  inline int host_pair_size() const;
  inline void clear_host_pair();
  static const int kHostPairFieldNumber = 5;
  inline const ::bbts::HostPair& host_pair(int index) const;
  inline ::bbts::HostPair* mutable_host_pair(int index);
  inline ::bbts::HostPair* add_host_pair();
  inline const ::google::protobuf::RepeatedPtrField< ::bbts::HostPair >&
      host_pair() const;
  inline ::google::protobuf::RepeatedPtrField< ::bbts::HostPair >*
      mutable_host_pair();
  
  // @@protoc_insertion_point(class_scope:bbts.RedisConf)
 private:
  inline void set_has_max_queue_length();
  inline void clear_has_max_queue_length();
  inline void set_has_timeout();
  inline void clear_has_timeout();
  inline void set_has_passwd();
  inline void clear_has_passwd();
  inline void set_has_database();
  inline void clear_has_database();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 max_queue_length_;
  ::google::protobuf::int32 timeout_;
  ::std::string* passwd_;
  ::std::string* database_;
  ::google::protobuf::RepeatedPtrField< ::bbts::HostPair > host_pair_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_redis_5fconf_2eproto();
  friend void protobuf_AssignDesc_redis_5fconf_2eproto();
  friend void protobuf_ShutdownFile_redis_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static RedisConf* default_instance_;
};
// ===================================================================


// ===================================================================

// HostPair

// optional string master_hostname = 1;
inline bool HostPair::has_master_hostname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HostPair::set_has_master_hostname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HostPair::clear_has_master_hostname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HostPair::clear_master_hostname() {
  if (master_hostname_ != &::google::protobuf::internal::kEmptyString) {
    master_hostname_->clear();
  }
  clear_has_master_hostname();
}
inline const ::std::string& HostPair::master_hostname() const {
  return *master_hostname_;
}
inline void HostPair::set_master_hostname(const ::std::string& value) {
  set_has_master_hostname();
  if (master_hostname_ == &::google::protobuf::internal::kEmptyString) {
    master_hostname_ = new ::std::string;
  }
  master_hostname_->assign(value);
}
inline void HostPair::set_master_hostname(const char* value) {
  set_has_master_hostname();
  if (master_hostname_ == &::google::protobuf::internal::kEmptyString) {
    master_hostname_ = new ::std::string;
  }
  master_hostname_->assign(value);
}
inline void HostPair::set_master_hostname(const char* value, size_t size) {
  set_has_master_hostname();
  if (master_hostname_ == &::google::protobuf::internal::kEmptyString) {
    master_hostname_ = new ::std::string;
  }
  master_hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HostPair::mutable_master_hostname() {
  set_has_master_hostname();
  if (master_hostname_ == &::google::protobuf::internal::kEmptyString) {
    master_hostname_ = new ::std::string;
  }
  return master_hostname_;
}
inline ::std::string* HostPair::release_master_hostname() {
  clear_has_master_hostname();
  if (master_hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = master_hostname_;
    master_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 master_port = 2;
inline bool HostPair::has_master_port() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HostPair::set_has_master_port() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HostPair::clear_has_master_port() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HostPair::clear_master_port() {
  master_port_ = 0;
  clear_has_master_port();
}
inline ::google::protobuf::int32 HostPair::master_port() const {
  return master_port_;
}
inline void HostPair::set_master_port(::google::protobuf::int32 value) {
  set_has_master_port();
  master_port_ = value;
}

// optional int32 master_weight = 3;
inline bool HostPair::has_master_weight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HostPair::set_has_master_weight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HostPair::clear_has_master_weight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HostPair::clear_master_weight() {
  master_weight_ = 0;
  clear_has_master_weight();
}
inline ::google::protobuf::int32 HostPair::master_weight() const {
  return master_weight_;
}
inline void HostPair::set_master_weight(::google::protobuf::int32 value) {
  set_has_master_weight();
  master_weight_ = value;
}

// optional string slave_hostname = 4;
inline bool HostPair::has_slave_hostname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HostPair::set_has_slave_hostname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HostPair::clear_has_slave_hostname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HostPair::clear_slave_hostname() {
  if (slave_hostname_ != &::google::protobuf::internal::kEmptyString) {
    slave_hostname_->clear();
  }
  clear_has_slave_hostname();
}
inline const ::std::string& HostPair::slave_hostname() const {
  return *slave_hostname_;
}
inline void HostPair::set_slave_hostname(const ::std::string& value) {
  set_has_slave_hostname();
  if (slave_hostname_ == &::google::protobuf::internal::kEmptyString) {
    slave_hostname_ = new ::std::string;
  }
  slave_hostname_->assign(value);
}
inline void HostPair::set_slave_hostname(const char* value) {
  set_has_slave_hostname();
  if (slave_hostname_ == &::google::protobuf::internal::kEmptyString) {
    slave_hostname_ = new ::std::string;
  }
  slave_hostname_->assign(value);
}
inline void HostPair::set_slave_hostname(const char* value, size_t size) {
  set_has_slave_hostname();
  if (slave_hostname_ == &::google::protobuf::internal::kEmptyString) {
    slave_hostname_ = new ::std::string;
  }
  slave_hostname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* HostPair::mutable_slave_hostname() {
  set_has_slave_hostname();
  if (slave_hostname_ == &::google::protobuf::internal::kEmptyString) {
    slave_hostname_ = new ::std::string;
  }
  return slave_hostname_;
}
inline ::std::string* HostPair::release_slave_hostname() {
  clear_has_slave_hostname();
  if (slave_hostname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = slave_hostname_;
    slave_hostname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 slave_port = 5;
inline bool HostPair::has_slave_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HostPair::set_has_slave_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HostPair::clear_has_slave_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HostPair::clear_slave_port() {
  slave_port_ = 0;
  clear_has_slave_port();
}
inline ::google::protobuf::int32 HostPair::slave_port() const {
  return slave_port_;
}
inline void HostPair::set_slave_port(::google::protobuf::int32 value) {
  set_has_slave_port();
  slave_port_ = value;
}

// optional int32 slave_weight = 6;
inline bool HostPair::has_slave_weight() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void HostPair::set_has_slave_weight() {
  _has_bits_[0] |= 0x00000020u;
}
inline void HostPair::clear_has_slave_weight() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void HostPair::clear_slave_weight() {
  slave_weight_ = 0;
  clear_has_slave_weight();
}
inline ::google::protobuf::int32 HostPair::slave_weight() const {
  return slave_weight_;
}
inline void HostPair::set_slave_weight(::google::protobuf::int32 value) {
  set_has_slave_weight();
  slave_weight_ = value;
}

// -------------------------------------------------------------------

// RedisConf

// optional int32 max_queue_length = 1;
inline bool RedisConf::has_max_queue_length() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RedisConf::set_has_max_queue_length() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RedisConf::clear_has_max_queue_length() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RedisConf::clear_max_queue_length() {
  max_queue_length_ = 0;
  clear_has_max_queue_length();
}
inline ::google::protobuf::int32 RedisConf::max_queue_length() const {
  return max_queue_length_;
}
inline void RedisConf::set_max_queue_length(::google::protobuf::int32 value) {
  set_has_max_queue_length();
  max_queue_length_ = value;
}

// optional int32 timeout = 2;
inline bool RedisConf::has_timeout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RedisConf::set_has_timeout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RedisConf::clear_has_timeout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RedisConf::clear_timeout() {
  timeout_ = 0;
  clear_has_timeout();
}
inline ::google::protobuf::int32 RedisConf::timeout() const {
  return timeout_;
}
inline void RedisConf::set_timeout(::google::protobuf::int32 value) {
  set_has_timeout();
  timeout_ = value;
}

// optional string passwd = 3;
inline bool RedisConf::has_passwd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RedisConf::set_has_passwd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RedisConf::clear_has_passwd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RedisConf::clear_passwd() {
  if (passwd_ != &::google::protobuf::internal::kEmptyString) {
    passwd_->clear();
  }
  clear_has_passwd();
}
inline const ::std::string& RedisConf::passwd() const {
  return *passwd_;
}
inline void RedisConf::set_passwd(const ::std::string& value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void RedisConf::set_passwd(const char* value) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(value);
}
inline void RedisConf::set_passwd(const char* value, size_t size) {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  passwd_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedisConf::mutable_passwd() {
  set_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    passwd_ = new ::std::string;
  }
  return passwd_;
}
inline ::std::string* RedisConf::release_passwd() {
  clear_has_passwd();
  if (passwd_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = passwd_;
    passwd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string database = 4;
inline bool RedisConf::has_database() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RedisConf::set_has_database() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RedisConf::clear_has_database() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RedisConf::clear_database() {
  if (database_ != &::google::protobuf::internal::kEmptyString) {
    database_->clear();
  }
  clear_has_database();
}
inline const ::std::string& RedisConf::database() const {
  return *database_;
}
inline void RedisConf::set_database(const ::std::string& value) {
  set_has_database();
  if (database_ == &::google::protobuf::internal::kEmptyString) {
    database_ = new ::std::string;
  }
  database_->assign(value);
}
inline void RedisConf::set_database(const char* value) {
  set_has_database();
  if (database_ == &::google::protobuf::internal::kEmptyString) {
    database_ = new ::std::string;
  }
  database_->assign(value);
}
inline void RedisConf::set_database(const char* value, size_t size) {
  set_has_database();
  if (database_ == &::google::protobuf::internal::kEmptyString) {
    database_ = new ::std::string;
  }
  database_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RedisConf::mutable_database() {
  set_has_database();
  if (database_ == &::google::protobuf::internal::kEmptyString) {
    database_ = new ::std::string;
  }
  return database_;
}
inline ::std::string* RedisConf::release_database() {
  clear_has_database();
  if (database_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = database_;
    database_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .bbts.HostPair host_pair = 5;
inline int RedisConf::host_pair_size() const {
  return host_pair_.size();
}
inline void RedisConf::clear_host_pair() {
  host_pair_.Clear();
}
inline const ::bbts::HostPair& RedisConf::host_pair(int index) const {
  return host_pair_.Get(index);
}
inline ::bbts::HostPair* RedisConf::mutable_host_pair(int index) {
  return host_pair_.Mutable(index);
}
inline ::bbts::HostPair* RedisConf::add_host_pair() {
  return host_pair_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bbts::HostPair >&
RedisConf::host_pair() const {
  return host_pair_;
}
inline ::google::protobuf::RepeatedPtrField< ::bbts::HostPair >*
RedisConf::mutable_host_pair() {
  return &host_pair_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bbts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_redis_5fconf_2eproto__INCLUDED
