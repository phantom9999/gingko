// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tracker_conf.proto

#ifndef PROTOBUF_tracker_5fconf_2eproto__INCLUDED
#define PROTOBUF_tracker_5fconf_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bbts {
namespace tracker {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tracker_5fconf_2eproto();
void protobuf_AssignDesc_tracker_5fconf_2eproto();
void protobuf_ShutdownFile_tracker_5fconf_2eproto();

class TrackerConf;

// ===================================================================

class TrackerConf : public ::google::protobuf::Message {
 public:
  TrackerConf();
  virtual ~TrackerConf();
  
  TrackerConf(const TrackerConf& from);
  
  inline TrackerConf& operator=(const TrackerConf& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackerConf& default_instance();
  
  void Swap(TrackerConf* other);
  
  // implements Message ----------------------------------------------
  
  TrackerConf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackerConf& from);
  void MergeFrom(const TrackerConf& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);
  
  // optional int32 thread_num = 2;
  inline bool has_thread_num() const;
  inline void clear_thread_num();
  static const int kThreadNumFieldNumber = 2;
  inline ::google::protobuf::int32 thread_num() const;
  inline void set_thread_num(::google::protobuf::int32 value);
  
  // optional string conf_dir = 3;
  inline bool has_conf_dir() const;
  inline void clear_conf_dir();
  static const int kConfDirFieldNumber = 3;
  inline const ::std::string& conf_dir() const;
  inline void set_conf_dir(const ::std::string& value);
  inline void set_conf_dir(const char* value);
  inline void set_conf_dir(const char* value, size_t size);
  inline ::std::string* mutable_conf_dir();
  inline ::std::string* release_conf_dir();
  
  // optional string log_path = 4;
  inline bool has_log_path() const;
  inline void clear_log_path();
  static const int kLogPathFieldNumber = 4;
  inline const ::std::string& log_path() const;
  inline void set_log_path(const ::std::string& value);
  inline void set_log_path(const char* value);
  inline void set_log_path(const char* value, size_t size);
  inline ::std::string* mutable_log_path();
  inline ::std::string* release_log_path();
  
  // optional int32 httpd_port = 5;
  inline bool has_httpd_port() const;
  inline void clear_httpd_port();
  static const int kHttpdPortFieldNumber = 5;
  inline ::google::protobuf::int32 httpd_port() const;
  inline void set_httpd_port(::google::protobuf::int32 value);
  
  // optional int32 monitor_cycle_second = 6;
  inline bool has_monitor_cycle_second() const;
  inline void clear_monitor_cycle_second();
  static const int kMonitorCycleSecondFieldNumber = 6;
  inline ::google::protobuf::int32 monitor_cycle_second() const;
  inline void set_monitor_cycle_second(::google::protobuf::int32 value);
  
  // optional int32 info_hash_expire_time = 7;
  inline bool has_info_hash_expire_time() const;
  inline void clear_info_hash_expire_time();
  static const int kInfoHashExpireTimeFieldNumber = 7;
  inline ::google::protobuf::int32 info_hash_expire_time() const;
  inline void set_info_hash_expire_time(::google::protobuf::int32 value);
  
  // optional int32 remote_peers_syncronizer_num = 8;
  inline bool has_remote_peers_syncronizer_num() const;
  inline void clear_remote_peers_syncronizer_num();
  static const int kRemotePeersSyncronizerNumFieldNumber = 8;
  inline ::google::protobuf::int32 remote_peers_syncronizer_num() const;
  inline void set_remote_peers_syncronizer_num(::google::protobuf::int32 value);
  
  // optional int32 server_send_timeout = 9;
  inline bool has_server_send_timeout() const;
  inline void clear_server_send_timeout();
  static const int kServerSendTimeoutFieldNumber = 9;
  inline ::google::protobuf::int32 server_send_timeout() const;
  inline void set_server_send_timeout(::google::protobuf::int32 value);
  
  // optional int32 server_recv_timeout = 10;
  inline bool has_server_recv_timeout() const;
  inline void clear_server_recv_timeout();
  static const int kServerRecvTimeoutFieldNumber = 10;
  inline ::google::protobuf::int32 server_recv_timeout() const;
  inline void set_server_recv_timeout(::google::protobuf::int32 value);
  
  // optional int32 server_accept_timeout = 11;
  inline bool has_server_accept_timeout() const;
  inline void clear_server_accept_timeout();
  static const int kServerAcceptTimeoutFieldNumber = 11;
  inline ::google::protobuf::int32 server_accept_timeout() const;
  inline void set_server_accept_timeout(::google::protobuf::int32 value);
  
  // optional int32 task_expire_time = 12;
  inline bool has_task_expire_time() const;
  inline void clear_task_expire_time();
  static const int kTaskExpireTimeFieldNumber = 12;
  inline ::google::protobuf::int32 task_expire_time() const;
  inline void set_task_expire_time(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bbts.tracker.TrackerConf)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_thread_num();
  inline void clear_has_thread_num();
  inline void set_has_conf_dir();
  inline void clear_has_conf_dir();
  inline void set_has_log_path();
  inline void clear_has_log_path();
  inline void set_has_httpd_port();
  inline void clear_has_httpd_port();
  inline void set_has_monitor_cycle_second();
  inline void clear_has_monitor_cycle_second();
  inline void set_has_info_hash_expire_time();
  inline void clear_has_info_hash_expire_time();
  inline void set_has_remote_peers_syncronizer_num();
  inline void clear_has_remote_peers_syncronizer_num();
  inline void set_has_server_send_timeout();
  inline void clear_has_server_send_timeout();
  inline void set_has_server_recv_timeout();
  inline void clear_has_server_recv_timeout();
  inline void set_has_server_accept_timeout();
  inline void clear_has_server_accept_timeout();
  inline void set_has_task_expire_time();
  inline void clear_has_task_expire_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 port_;
  ::google::protobuf::int32 thread_num_;
  ::std::string* conf_dir_;
  ::std::string* log_path_;
  ::google::protobuf::int32 httpd_port_;
  ::google::protobuf::int32 monitor_cycle_second_;
  ::google::protobuf::int32 info_hash_expire_time_;
  ::google::protobuf::int32 remote_peers_syncronizer_num_;
  ::google::protobuf::int32 server_send_timeout_;
  ::google::protobuf::int32 server_recv_timeout_;
  ::google::protobuf::int32 server_accept_timeout_;
  ::google::protobuf::int32 task_expire_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  friend void  protobuf_AddDesc_tracker_5fconf_2eproto();
  friend void protobuf_AssignDesc_tracker_5fconf_2eproto();
  friend void protobuf_ShutdownFile_tracker_5fconf_2eproto();
  
  void InitAsDefaultInstance();
  static TrackerConf* default_instance_;
};
// ===================================================================


// ===================================================================

// TrackerConf

// optional int32 port = 1;
inline bool TrackerConf::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackerConf::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackerConf::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackerConf::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 TrackerConf::port() const {
  return port_;
}
inline void TrackerConf::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
}

// optional int32 thread_num = 2;
inline bool TrackerConf::has_thread_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackerConf::set_has_thread_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackerConf::clear_has_thread_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackerConf::clear_thread_num() {
  thread_num_ = 0;
  clear_has_thread_num();
}
inline ::google::protobuf::int32 TrackerConf::thread_num() const {
  return thread_num_;
}
inline void TrackerConf::set_thread_num(::google::protobuf::int32 value) {
  set_has_thread_num();
  thread_num_ = value;
}

// optional string conf_dir = 3;
inline bool TrackerConf::has_conf_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackerConf::set_has_conf_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackerConf::clear_has_conf_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackerConf::clear_conf_dir() {
  if (conf_dir_ != &::google::protobuf::internal::kEmptyString) {
    conf_dir_->clear();
  }
  clear_has_conf_dir();
}
inline const ::std::string& TrackerConf::conf_dir() const {
  return *conf_dir_;
}
inline void TrackerConf::set_conf_dir(const ::std::string& value) {
  set_has_conf_dir();
  if (conf_dir_ == &::google::protobuf::internal::kEmptyString) {
    conf_dir_ = new ::std::string;
  }
  conf_dir_->assign(value);
}
inline void TrackerConf::set_conf_dir(const char* value) {
  set_has_conf_dir();
  if (conf_dir_ == &::google::protobuf::internal::kEmptyString) {
    conf_dir_ = new ::std::string;
  }
  conf_dir_->assign(value);
}
inline void TrackerConf::set_conf_dir(const char* value, size_t size) {
  set_has_conf_dir();
  if (conf_dir_ == &::google::protobuf::internal::kEmptyString) {
    conf_dir_ = new ::std::string;
  }
  conf_dir_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackerConf::mutable_conf_dir() {
  set_has_conf_dir();
  if (conf_dir_ == &::google::protobuf::internal::kEmptyString) {
    conf_dir_ = new ::std::string;
  }
  return conf_dir_;
}
inline ::std::string* TrackerConf::release_conf_dir() {
  clear_has_conf_dir();
  if (conf_dir_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = conf_dir_;
    conf_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string log_path = 4;
inline bool TrackerConf::has_log_path() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackerConf::set_has_log_path() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackerConf::clear_has_log_path() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackerConf::clear_log_path() {
  if (log_path_ != &::google::protobuf::internal::kEmptyString) {
    log_path_->clear();
  }
  clear_has_log_path();
}
inline const ::std::string& TrackerConf::log_path() const {
  return *log_path_;
}
inline void TrackerConf::set_log_path(const ::std::string& value) {
  set_has_log_path();
  if (log_path_ == &::google::protobuf::internal::kEmptyString) {
    log_path_ = new ::std::string;
  }
  log_path_->assign(value);
}
inline void TrackerConf::set_log_path(const char* value) {
  set_has_log_path();
  if (log_path_ == &::google::protobuf::internal::kEmptyString) {
    log_path_ = new ::std::string;
  }
  log_path_->assign(value);
}
inline void TrackerConf::set_log_path(const char* value, size_t size) {
  set_has_log_path();
  if (log_path_ == &::google::protobuf::internal::kEmptyString) {
    log_path_ = new ::std::string;
  }
  log_path_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TrackerConf::mutable_log_path() {
  set_has_log_path();
  if (log_path_ == &::google::protobuf::internal::kEmptyString) {
    log_path_ = new ::std::string;
  }
  return log_path_;
}
inline ::std::string* TrackerConf::release_log_path() {
  clear_has_log_path();
  if (log_path_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = log_path_;
    log_path_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional int32 httpd_port = 5;
inline bool TrackerConf::has_httpd_port() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackerConf::set_has_httpd_port() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackerConf::clear_has_httpd_port() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackerConf::clear_httpd_port() {
  httpd_port_ = 0;
  clear_has_httpd_port();
}
inline ::google::protobuf::int32 TrackerConf::httpd_port() const {
  return httpd_port_;
}
inline void TrackerConf::set_httpd_port(::google::protobuf::int32 value) {
  set_has_httpd_port();
  httpd_port_ = value;
}

// optional int32 monitor_cycle_second = 6;
inline bool TrackerConf::has_monitor_cycle_second() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackerConf::set_has_monitor_cycle_second() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackerConf::clear_has_monitor_cycle_second() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackerConf::clear_monitor_cycle_second() {
  monitor_cycle_second_ = 0;
  clear_has_monitor_cycle_second();
}
inline ::google::protobuf::int32 TrackerConf::monitor_cycle_second() const {
  return monitor_cycle_second_;
}
inline void TrackerConf::set_monitor_cycle_second(::google::protobuf::int32 value) {
  set_has_monitor_cycle_second();
  monitor_cycle_second_ = value;
}

// optional int32 info_hash_expire_time = 7;
inline bool TrackerConf::has_info_hash_expire_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackerConf::set_has_info_hash_expire_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackerConf::clear_has_info_hash_expire_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackerConf::clear_info_hash_expire_time() {
  info_hash_expire_time_ = 0;
  clear_has_info_hash_expire_time();
}
inline ::google::protobuf::int32 TrackerConf::info_hash_expire_time() const {
  return info_hash_expire_time_;
}
inline void TrackerConf::set_info_hash_expire_time(::google::protobuf::int32 value) {
  set_has_info_hash_expire_time();
  info_hash_expire_time_ = value;
}

// optional int32 remote_peers_syncronizer_num = 8;
inline bool TrackerConf::has_remote_peers_syncronizer_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackerConf::set_has_remote_peers_syncronizer_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackerConf::clear_has_remote_peers_syncronizer_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackerConf::clear_remote_peers_syncronizer_num() {
  remote_peers_syncronizer_num_ = 0;
  clear_has_remote_peers_syncronizer_num();
}
inline ::google::protobuf::int32 TrackerConf::remote_peers_syncronizer_num() const {
  return remote_peers_syncronizer_num_;
}
inline void TrackerConf::set_remote_peers_syncronizer_num(::google::protobuf::int32 value) {
  set_has_remote_peers_syncronizer_num();
  remote_peers_syncronizer_num_ = value;
}

// optional int32 server_send_timeout = 9;
inline bool TrackerConf::has_server_send_timeout() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackerConf::set_has_server_send_timeout() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackerConf::clear_has_server_send_timeout() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackerConf::clear_server_send_timeout() {
  server_send_timeout_ = 0;
  clear_has_server_send_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_send_timeout() const {
  return server_send_timeout_;
}
inline void TrackerConf::set_server_send_timeout(::google::protobuf::int32 value) {
  set_has_server_send_timeout();
  server_send_timeout_ = value;
}

// optional int32 server_recv_timeout = 10;
inline bool TrackerConf::has_server_recv_timeout() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackerConf::set_has_server_recv_timeout() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackerConf::clear_has_server_recv_timeout() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackerConf::clear_server_recv_timeout() {
  server_recv_timeout_ = 0;
  clear_has_server_recv_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_recv_timeout() const {
  return server_recv_timeout_;
}
inline void TrackerConf::set_server_recv_timeout(::google::protobuf::int32 value) {
  set_has_server_recv_timeout();
  server_recv_timeout_ = value;
}

// optional int32 server_accept_timeout = 11;
inline bool TrackerConf::has_server_accept_timeout() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackerConf::set_has_server_accept_timeout() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackerConf::clear_has_server_accept_timeout() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackerConf::clear_server_accept_timeout() {
  server_accept_timeout_ = 0;
  clear_has_server_accept_timeout();
}
inline ::google::protobuf::int32 TrackerConf::server_accept_timeout() const {
  return server_accept_timeout_;
}
inline void TrackerConf::set_server_accept_timeout(::google::protobuf::int32 value) {
  set_has_server_accept_timeout();
  server_accept_timeout_ = value;
}

// optional int32 task_expire_time = 12;
inline bool TrackerConf::has_task_expire_time() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackerConf::set_has_task_expire_time() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackerConf::clear_has_task_expire_time() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackerConf::clear_task_expire_time() {
  task_expire_time_ = 0;
  clear_has_task_expire_time();
}
inline ::google::protobuf::int32 TrackerConf::task_expire_time() const {
  return task_expire_time_;
}
inline void TrackerConf::set_task_expire_time(::google::protobuf::int32 value) {
  set_has_task_expire_time();
  task_expire_time_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace tracker
}  // namespace bbts

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tracker_5fconf_2eproto__INCLUDED
